<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="C#" TargetLanguage="C#" Description="Generates a CSLA Editable Switchable Object."%>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableSwitchable object to create." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>

<% bool first = true; %>
<!-- #include file="Header.inc" -->
using CSLA;
using CSLA.Data;
using System.Data;
using System.Data.SqlClient;
using System;
<%= GetUsingStatementsString(Info) %>
namespace <%=Info.ObjectNamespace%>
{
	<!-- #include file="XmlComment.inc" -->
	<%= "\r\n" %>	[Serializable]
	public abstract class <%=Info.ObjectName%>Base : <%
		if (Info.InheritedType.Type != String.Empty) {
			%><%=Info.InheritedType.Type%><%
		} else if (Info.InheritedType.ObjectName != String.Empty) {
			%><%=Info.InheritedType.ObjectName%><%
		} else {
			%>CSLA.BusinessBase<% 
		} %>
	{
	
		<!-- #include file="StateFields.inc" -->
		
		<!-- #include file="BusinessProps.inc" -->
		
		<!-- #include file="BusinessRules.inc" -->
		<!-- #include file="ObjectOverrides.inc" -->
		<%= "\r\n" %>		#region Shared Methods
		
		<!-- #include file="NewObject.inc" -->
		
		<!-- #include file="GetObject.inc" -->
		
		<!-- #include file="DeleteObject.inc" -->
		<%= "\r\n" %>		/// <summary>
		/// Factory method. New <see cref="<%=Info.ObjectName%>" /> object is created as a child object, based on given parameters.
		/// </summary>
		internal static <%=Info.ObjectName%> New<%=Info.ObjectName%>Child(<%
		first = true;
		foreach (Parameter param in Info.NewObjectParameters) 
		{
		
			if (!first) { writer.Write(", "); }
			else { first = false; }
		%><%=param.Property.PropertyType.ToString()%> <%=FormatCamel(param.Property.Name)%><%}%>)
		{
			<% if (Info.NewRoles != String.Empty) {
				string[] newRoles = System.Text.RegularExpressions.Regex.Split(Info.NewRoles, ";");
				first = true; %>
			if (<% foreach (string role in newRoles) {
					if (!first) { %> &&<% }
			     	else {first = false;}
					 %>!System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   } %>) {
					throw new System.Security.SecurityException("User not authorized to remove a <%=Info.ObjectName%>");
			}
			<% } %>		
			<% if (Info.NewObjectParameters.Count > 0) {
				Criteria crit = Info.NewObjectParameters[0].Criteria;
				string critVar = FormatCamel(crit.Name);
			%>
			<%=crit.Name%> <%=critVar%> = new <%=crit.Name%>(true);
			<% foreach (Parameter param in Info.NewObjectParameters) {%>
			<%=critVar%>.<%=param.Property.Name%> = <% 
				if (param.Property.PropertyType == TypeCodeEx.SmartDate) { 
					%>new SmartDate(<%=FormatCamel(param.Property.Name)%>);<%
				} else {
					%><%=FormatCamel(param.Property.Name)%>;
				<% } %>
			<%}%>
			return (<%=Info.ObjectName%>)DataPortal.Create(<%=critVar%>);
			<%}%><%
			 else if (Info.NewObjectCriteriaType != null) {%>
			return (<%=Info.ObjectName%>)DataPortal.Create(new <%=Info.NewObjectCriteriaType.Name%>());
			<% } %><% 
			else {%>
			return DataPortal.Create();
			<% } %>			
			//return (new <%=Info.ObjectName%>(<%
			first = true;
			foreach (Parameter param in Info.NewObjectParameters) {
				if (!first) {
					%>, <%
				} 
				else
				{
					first = false;
				}
			%><%=FormatCamel(param.Property.Name)%><% } %>));
			//return (<%=Info.ObjectName%>) DataPortal.Create(new Criteria(true));
		}
		
		<% if (!Info.LazyLoad) { %>
		/// <summary>
		/// Factory method. New <see cref="<%=Info.ObjectName%>" /> object is created as child object and loaded from the given ISafeDataReader.
		/// </summary>
		internal static <%=Info.ObjectName%> Get<%=Info.ObjectName%>Child(SafeDataReader dr)
		{
			<% if (Info.GetRoles != String.Empty) {
				string[] getRoles = System.Text.RegularExpressions.Regex.Split(Info.GetRoles, ";");
				first = true; %>
			if (<% foreach (string role in getRoles) {
					if (!first) { %> &&
			    <% } else {
						first = false;
					} %>!System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   } %>) {
					throw new System.Security.SecurityException("User not authorized to remove a <%=Info.ObjectName%>");
			}
			<% } %>
			<%=Info.ObjectName%> <%=FormatCamel(Info.ObjectName)%> = new <%=Info.ObjectName%>();
			<%=FormatCamel(Info.ObjectName)%>.Fetch(dr);
			return (<%=FormatCamel(Info.ObjectName)%>);
		}
		<% } else { %>
		/// <summary>
		/// Factory method. New <see cref="<%=Info.ObjectName%>" /> object is created as a child object and loaded from the database, based on given parameters.
		/// </summary>
		internal static <%=Info.ObjectName%> Get<%=Info.ObjectName%>Child(<%
		first = true;
		foreach (Parameter param in Info.GetObjectParameters) 
		{
			if (!first) { writer.Write(", "); }
			else { first = false; }
		%><%=param.Property.PropertyType.ToString()%> <%=FormatCamel(param.Property.Name)%><%}%>)
		{
			<% if (Info.GetRoles != String.Empty) {
				string[] getRoles = System.Text.RegularExpressions.Regex.Split(Info.GetRoles, ";");
				first = true; %>
			if (<% foreach (string role in getRoles) {
					if (!first) { %> &&
			    <% } else {
						first = false;
					} %>!System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   } %>) {
					throw new System.Security.SecurityException("User not authorized to remove a <%=Info.ObjectName%>");
			}
			<% } %>
			<% if (Info.GetObjectParameters.Count > 0) {
				Criteria crit = Info.GetObjectParameters[0].Criteria;
				string critVar = FormatCamel(crit.Name);
			%>
			<%=crit.Name%> <%=critVar%> = new <%=crit.Name%>(true);
			<% foreach (Parameter param in Info.GetObjectParameters) {%>
			<%=critVar%>.<%=param.Property.Name%> = <%=FormatCamel(param.Property.Name)%>;
			<%}%>
			return (<%=Info.ObjectName%>)DataPortal.Fetch(<%=critVar%>);
			<%}%>
			<% else if (Info.GetObjectCriteriaType != null) {%>
			return (<%=Info.ObjectName%>)DataPortal.Fetch(new <%=Info.GetObjectCriteriaType.Name%>());
			<% } %>
			<% else {%>
			return DataPortal.Fetch();
			<% } %>
		}
		<% } %>
		<!-- #include file="Save.inc" -->
		<%= "\r\n" %>		#endregion
		<!-- #include file="Constructor.inc" -->
		<%= "\r\n" %>		#region Criteria
		<% foreach (Criteria crit in Info.CriteriaObjects) { %>
		
		[Serializable]
		protected class <%=crit.Name%> : CSLA.CriteriaBase
		{
			public bool IsChild;
			<% foreach (Property prop in crit.Properties) {%>
			public <%=prop.PropertyType.ToString()%> <%=FormatPascal(prop.Name)%>;
			<% } %>
			
			public <%=crit.Name%>(bool isChild) : base(typeof(<%=Info.ObjectName%>))
			{
				this.IsChild = isChild;
			}
		}
		<% } %>
		#endregion
		
		#region Data Access
		<!-- #include file="DataPortalFetch.inc" -->
		
		<!-- #include file="DataPortalUpdate.inc" -->		

		<!-- #include file="InternalUpdate.inc" -->	

		<!-- #include file="DataPortalDelete.inc" -->
		
		<!-- #include file="DataPortalCreate.inc" -->
		
		<% if (!Info.LazyLoad) { %>
		<!-- #include file="InternalFetch.inc" -->
		<% } %>	
		#endregion
		
				
				
		<!-- #include file="TemplateMethods.inc.inc"  -->
		
	}
}

