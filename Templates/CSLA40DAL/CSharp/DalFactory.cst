<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a static Database class." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the CSLA Object (just to get some project info)" %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>

//-----------------------------------------------------------------------
// <copyright file="DalFactory.cs" company="Marimer LLC">
//     Copyright (c) Marimer LLC. All rights reserved.
//     Website: http://www.lhotka.net/cslanet/
// </copyright>
//-----------------------------------------------------------------------

<%
string utilNamespace = string.Empty;
if (CurrentUnit.GenerationParams.UtilitiesNamespace.Length - CurrentUnit.GenerationParams.BaseNamespace.Length > 0)
    utilNamespace = CurrentUnit.GenerationParams.UtilitiesNamespace.Substring(CurrentUnit.GenerationParams.BaseNamespace.Length);
%>
using System;
using System.Configuration;

namespace <%= CurrentUnit.GenerationParams.InterfaceDALNamespace %><%= utilNamespace %>
{
    /// <summary>
    /// Creates a DAL manager provider.
    /// </summary>
    /// <remarks>
    /// To use the generated DAL:
    /// 1) name this assembly DocStore.DataAccess.Security.Sql
    /// 2) add the following line to the <strong>appSettings</strong>
    /// section of the application .config file: <br/>
    /// &lt;add key="<%= CurrentUnit.GenerationParams.DatabaseConnection %>.DalManagerType" value="<%= CurrentUnit.GenerationParams.DALNamespace %><%= utilNamespace %>.DalManager, <%= CurrentUnit.GenerationParams.DALNamespace %>" /&gt;
    /// </remarks>
    public static class DalFactory
    {
        private static Type _dalType;

        /// <summary>Gets the DAL manager type that must be set
        /// in the <strong>appSettings</strong> section of the application .config file.</summary>
        /// <returns>A new <see cref="IDalManager"/> instance</returns>
        public static IDalManager GetManager()
        {
            if (_dalType == null)
            {
                string dalTypeName = ConfigurationManager.AppSettings["<%= CurrentUnit.GenerationParams.DatabaseConnection %>.DalManagerType"];
                if (!string.IsNullOrEmpty(dalTypeName))
                    _dalType = Type.GetType(dalTypeName);
                else
                    throw new NullReferenceException("<%= CurrentUnit.GenerationParams.DatabaseConnection %>.DalManagerType");
                if (_dalType == null)
                    throw new ArgumentException(string.Format("Type {0} could not be found", dalTypeName));
            }
            return (IDalManager) Activator.CreateInstance(_dalType);
        }
    }
}
