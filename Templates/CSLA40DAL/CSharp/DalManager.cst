<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a static Database class." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the CSLA Object (just to get some project info)" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>

//-----------------------------------------------------------------------
// <copyright file="DalManager.cs" company="Marimer LLC">
//     Copyright (c) Marimer LLC. All rights reserved.
//     Website: http://www.lhotka.net/cslanet/
// </copyright>
//-----------------------------------------------------------------------

using System;
using System.Data.SqlClient;
using Csla.Data;

namespace <%= CurrentUnit.GenerationParams.DALNamespace %>
{
    /// <summary>
    /// Implements <see cref="IDalManager"/> interface.
    /// </summary>
    public class DalManager : IDalManager
    {
        private static readonly string TypeMask = typeof (DalManager).FullName.Replace("DalManager", @"{0}");

        /// <summary>
        /// Initializes a new instance of the <see cref="DalManager"/> class.
        /// </summary>
        public DalManager()
        {
            ConnectionManager = ConnectionManager<SqlConnection>.GetManager("LocalDb");
        }

        /// <summary>
        /// Gets the ADO ConnectionManager object.
        /// </summary>
        public ConnectionManager<SqlConnection> ConnectionManager { get; private set; }

        #region IDalManager Members

        /// <summary>
        /// Gets the DAL provider for a given object Type.
        /// </summary>
        /// <typeparam name="T">Object Type that requires a DAL provider.</typeparam>
        /// <returns>A new DAL instance for the given Type.</returns>
        public T GetProvider<T>() where T : class
        {
            var typeName = string.Format(TypeMask, typeof (T).Name.Substring(1));
            var type = Type.GetType(typeName);
            if (type != null)
                return Activator.CreateInstance(type) as T;

            throw new NotImplementedException(typeName);
        }

        /// <summary>
        /// Disposes the ConnectionManager.
        /// </summary>
        public void Dispose()
        {
            ConnectionManager.Dispose();
            ConnectionManager = null;
        }

        #endregion
    }
}
