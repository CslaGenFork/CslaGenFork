<%@ CodeTemplate Inherits="SprocTemplateHelper" Language="C#" TargetLanguage="T-SQL" Description="Generates a Update stored procedure." %>

<%@ Assembly Name="DBSchemaInfo" %>
<%@ Import Namespace="DBSchemaInfo.Base" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Data"%>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Assembly Name="System.Windows.Forms"%>
<%@ Import Namespace="System.Windows.Forms"%>

<%
bool GenerateSP=false;
foreach(ValueProperty prop in Info.GetAllValueProperties())
{
    if (prop.DataAccess != ValueProperty.DataAccessBehaviour.ReadOnly &&
        prop.DataAccess != ValueProperty.DataAccessBehaviour.CreateOnly &&
        prop.PrimaryKey == ValueProperty.UserDefinedKeyBehaviour.Default)
    {
        GenerateSP = true;
        break;
    }
}
if (GenerateSP)
{
    Init(Info);
    bool first = false;
    ValueProperty propPK = null;
    List<IResultObject> tables = GetTablesUpdate(Info);
    string timeStampColumn = String.Empty;
    SortTables(tables);
    string plainTableSchema = tables[0].ObjectSchema + ".";
    string fullTableSchema = "[" + tables[0].ObjectSchema + "].";
    bool useBoolSoftDelete = UseBoolSoftDelete(tables, IgnoreFilter(Info));
%>
/****** Object:  StoredProcedure <%= fullTableSchema %>[<%= Info.UpdateProcedureName %>]    Script Date: <%= DateTime.Now %> ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'<%= fullTableSchema %>[<%= Info.UpdateProcedureName %>]') AND type in (N'P', N'PC'))
    DROP PROCEDURE <%= fullTableSchema %>[<%= Info.UpdateProcedureName %>]
GO

CREATE PROCEDURE <%= fullTableSchema %>[<%= Info.UpdateProcedureName %>]<%
    first = true;
    foreach (ValueProperty prop in Info.GetAllValueProperties())
    {
        if (prop.PrimaryKey == ValueProperty.UserDefinedKeyBehaviour.DBProvidedPK)
        {
            if (!first) { %>,<% } else { first = false; }
            propPK=prop;
            %>
    @<%= prop.ParameterName %> <%= GetDataTypeString(prop.DbBindColumn) %><%
        }
    }
    if (!Info.ParentInsertOnly)
    {
        foreach (ValueProperty prop in Info.GetParentValueProperties())
        {
            if (!first) { %>,<% } else { first = false; } %>
    @<%= prop.ParameterName %> <%= GetDataTypeString(prop.DbBindColumn) %><%
        }
    }
    foreach (ValueProperty prop in Info.GetAllValueProperties())
    {
        if(prop.DataAccess != ValueProperty.DataAccessBehaviour.ReadOnly
            && (prop.DataAccess != ValueProperty.DataAccessBehaviour.CreateOnly
            && prop.PrimaryKey != ValueProperty.UserDefinedKeyBehaviour.DBProvidedPK
            || prop.PrimaryKey == ValueProperty.UserDefinedKeyBehaviour.UserProvidedPK))
        {
            if (!first) { %>,<% } else { first = false; }
            %>
    @<%= prop.ParameterName %> <%= GetDataTypeString(prop.DbBindColumn) %><%
            if (prop.DbBindColumn.NativeType == "timestamp")
            {
                timeStampColumn = prop.ParameterName; %>,
    @New<%= prop.ParameterName %> <%= GetDataTypeString(prop.DbBindColumn) %> OUTPUT<%
            }
        }
    }
    %>
AS
    BEGIN

        SET NOCOUNT ON

        /* Check for object existance */
        IF NOT EXISTS
        (
            SELECT <%
    first = true;
    if (!Info.ParentInsertOnly)
    {
        foreach (ValueProperty prop in Info.GetParentValueProperties())
        {
            if (!first) { %>, <% } else { first = false; }
                %>[<%= GetColumnString(prop.DbBindColumn) %>]<%
        }
    }
    foreach (ValueProperty prop in Info.ValueProperties)
    {
        if (prop.DbBindColumn.IsPrimaryKey)
        {
            if (!first) { %>, <% } else { first = false; }
            %>[<%= GetColumnString(prop.DbBindColumn) %>]<%
        }
    }
            %> FROM <%= fullTableSchema %>[<%= tables[0].ObjectName %>]
            WHERE  <%
    first = true;
    if (!Info.ParentInsertOnly)
    {
        foreach (ValueProperty prop in Info.GetParentValueProperties())
        {
            if (!first)
            {
                %>
            AND    <%
            }
            else
            {
                first = false;
            }
            %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
        }
    }
    foreach (ValueProperty prop in Info.GetAllValueProperties())
    {
        if (prop.DbBindColumn.IsPrimaryKey)
        {
            if (!first)
            {
                %>
            AND    <%
            }
            else
            {
                first = false;
            }
            %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
        }
    }
    if (useBoolSoftDelete)
    {
        %>
            AND    [<%= Info.Parent.Params.SpBoolSoftDeleteColumn %>] = 'true'<%
    }
    %>
        )
        BEGIN
            RAISERROR ('''<%= plainTableSchema %><%= Info.ObjectName %>'' object not found. It was probably removed by another user.', 16, 1)
            RETURN
        END
    <%
    if (timeStampColumn != String.Empty)
    {
        %>

        /* Check for row version match */
        IF NOT EXISTS
        (
            SELECT <%
        first = true;
        if (!Info.ParentInsertOnly)
        {
            foreach (ValueProperty prop in Info.GetParentValueProperties())
            {
                if (!first) { %>, <% } else { first = false; }
                %>[<%= GetColumnString(prop.DbBindColumn) %>]<%
            }
        }
        foreach (ValueProperty prop in Info.ValueProperties)
        {
            if (prop.DbBindColumn.IsPrimaryKey)
            {
                if (!first) { %>, <% } else { first = false; }
            %>[<%= GetColumnString(prop.DbBindColumn) %>]<%
            }
        }
            %> FROM <%= fullTableSchema %>[<%= tables[0].ObjectName %>]
            WHERE  <%
        first = true;
        if (!Info.ParentInsertOnly)
        {
            foreach (ValueProperty prop in Info.GetParentValueProperties())
            {
                if (!first)
                {
                    %>
            AND    <%
                }
                else
                {
                    first = false;
                }
            %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
            }
        }
        foreach (ValueProperty prop in Info.ValueProperties)
        {
            if (prop.DbBindColumn.IsPrimaryKey || prop.ParameterName == timeStampColumn)
            {
                if (!first)
                {
                    %>
            AND    <%
                }
                else
                {
                    first = false;
                }
            %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
            }
        }
        foreach (ValueProperty prop in Info.InheritedValueProperties)
        {
            if (prop.DbBindColumn.IsPrimaryKey || prop.ParameterName == timeStampColumn)
            {
                if (!first)
                {
                    %>
            AND    <%
                }
                else
                {
                    first = false;
                }
            %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
            }
        }
        %>
        )
        BEGIN
            RAISERROR ('''<%= plainTableSchema %><%= Info.ObjectName %>'' object was modified by another user.', 16, 1)
            RETURN
        END
        <%
    }
    %>
        <%-- Update ------------------------%>
    <%
    string plainTableSchema2 = string.Empty;
    string fullTableSchema2 = string.Empty;
    foreach(IResultObject table in tables)
    {
        plainTableSchema2 = table.ObjectSchema + ".";
        fullTableSchema2 = "[" + table.ObjectSchema + "].";
        %>

        /* Update object in <%= plainTableSchema2 %><%= table.ObjectName %> */
        UPDATE <%= fullTableSchema2 %>[<%= table.ObjectName %>]
        SET<%
        first = true;
        foreach (ValueProperty prop in Info.ValueProperties)
        {
            if(prop.DataAccess != ValueProperty.DataAccessBehaviour.ReadOnly
                && prop.DataAccess != ValueProperty.DataAccessBehaviour.CreateOnly)
            {
                if (prop.DbBindColumn.ObjectName == table.ObjectName && !prop.DbBindColumn.IsPrimaryKey && prop.DbBindColumn.NativeType != "timestamp")
                {
                    if (!first) { %>,<% } else { first = false; } %>
               [<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
                }
            }
        }
        foreach (ValueProperty prop in Info.InheritedValueProperties)
        {
            if(prop.DataAccess != ValueProperty.DataAccessBehaviour.ReadOnly
                && prop.DataAccess != ValueProperty.DataAccessBehaviour.CreateOnly)
            {
                if (prop.DbBindColumn.ObjectName == table.ObjectName && !prop.DbBindColumn.IsPrimaryKey && prop.DbBindColumn.NativeType != "timestamp")
                {
                    if (!first) { %>,<% } else { first = false; } %>
               [<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
                }
            }
        }
        %>
        WHERE  <%
        first = true;
        if (!Info.ParentInsertOnly)
        {
            foreach (ValueProperty prop in Info.GetParentValueProperties())
            {
                if (!first)
                {
                    %>
            AND    <%
                }
                else
                {
                    first = false;
                }
            %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
            }
        }
        foreach (ValueProperty prop in Info.GetAllValueProperties())
        {
            if (prop.DbBindColumn.IsPrimaryKey || prop.ParameterName == timeStampColumn)
            {
                if (!first)
                {
                    %>
        AND    <%
                }
                else
                {
                    first = false;
                }
            %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
            }
        }
    }
    %>

        <%-- Output ------------------------------%>
    <%
    if (timeStampColumn != String.Empty)
    {
        %>
        /* Return new row version value */
        SELECT @New<%= timeStampColumn %> = [<%= timeStampColumn %>]
        FROM   <%= fullTableSchema %>[<%= tables[0].ObjectName %>]
        WHERE  <%
        first = true;

        if (!Info.ParentInsertOnly)
        {
            foreach (ValueProperty prop in Info.GetParentValueProperties())
            {
                if (!first)
                {
                    %>
            AND    <%
                }
                else
                {
                    first = false;
                }
            %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
            }
        }
        foreach (ValueProperty prop in Info.ValueProperties)
        {
            if (prop.DbBindColumn.IsPrimaryKey)
            {
                if (!first)
                {
                    %>
        AND    <%
                }
                else
                {
                    first = false;
                }
        %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
            }
        }
        foreach (ValueProperty prop in Info.InheritedValueProperties)
        {
            if (prop.ParameterName != timeStampColumn)
            {
                if (!first)
                {
                    %>
        AND    <%
                }
                else
                {
                    first = false;
                }
        %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
            }
        }
    }
    %>

    END
GO
<%
}
%>
