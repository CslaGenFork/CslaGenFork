<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA NameValueList Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the NameValueList Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="If true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>

<%
int silverlightLevel = 0;
bool genOptional = false;
ValueProperty nameProp = null;
ValueProperty valueProp = null;
foreach (ValueProperty prop in Info.ValueProperties)
{
    if (prop.Name.Equals(Info.NameColumn))
        nameProp = prop;
    if (prop.Name.Equals(Info.ValueColumn))
        valueProp = prop;
}
if (nameProp == null || valueProp == null)
    Errors.Append("Missing name or value properties." + Environment.NewLine);
else
{
    %><!-- #include file="Header.asp" -->
<!-- #include file="Using.asp" -->
<%
    if (Info.ObjectNamespace.Length > 0)
    {
        %>namespace <%= Info.ObjectNamespace %>
{
<%
    }
    bool? firstComment = null;
    %><!-- #include file="XmlComment.asp" -->
    <%
    if (GetAttributesString(Info.Attributes) != string.Empty)
    {
        %>
    <%= GetAttributesString(Info.Attributes) %>
    <%
    }
    %>
    [Serializable]
    <%
    if (ActiveObjects && Info.SubscribeToChannel.Length > 0)
    {
        %>[Subscribe("<%= Info.SubscribeToChannel %>")]
    <%
    }
    %>public partial class <%= Info.ObjectName %> : NameValueListBase<<%= GetDataTypeGeneric(valueProp, valueProp.PropertyType) %>, <%= GetDataTypeGeneric(nameProp, nameProp.PropertyType) %>>
    {

        <%
    if (Info.GenerateFactoryMethods)
    {
        if (!Info.UseCustomLoading)
        {
            if (Info.SimpleCacheOptions != SimpleCacheResults.None)
            {
                %>
        #region Private Fields

        private static <%= Info.ObjectName %> _list;

        #endregion

        #region Cache Management Methods

        /// <summary>
        /// Clears the in-memory <%= Info.ObjectName %> cache so it is reloaded on the next request.
        /// </summary>
        public static void InvalidateCache()
        {
            <%
        if (CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.None &&
            CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.PropertyLevel &&
            Info.GetRoles.Trim() != String.Empty)
        {
            %>if (!CanGetObject())
                throw new System.Security.SecurityException("User not authorized to load a <%= Info.ObjectName %>.");

            <%
        }
        %>_list = null;
        }

        /// <summary>
        /// Used by async loaders to load the cache.
        /// </summary>
        /// <param name="list">The list to cache.</param>
        internal static void SetCache(<%= Info.ObjectName %> list)
        {
            _list = list;
        }

        internal static bool IsCached
        {
            get { return _list != null; }
        }

        #endregion

        <%
            }
            foreach (Criteria c in GetCriteriaObjects(Info))
            {
                if (c.GetOptions.Factory)
                {
                    %>
        #region Factory Methods<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel, true, false) %>
<!-- #include file="GetNVL.asp" -->
<%= IfSilverlight (Conditional.Else, 0, ref silverlightLevel, true, false) %><!-- #include file="GetNVLSilverlight.asp" -->
<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel, true, false) %><!-- #include file="GetNVLAsync.asp" --><%
                }
            }
        }
        %>

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="<%= Info.ObjectName %>"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
<%
if (CurrentUnit.GenerationParams.GenerateSilverlight4)
{
    %>
#if SILVERLIGHT
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public <%= Info.ObjectName %>()
#else
        <%= GetConstructorVisibility(Info) %> <%= Info.ObjectName %>()
#endif
<%
}
else
{
    %>
        <%= GetConstructorVisibility(Info) %> <%= Info.ObjectName %>()
<%
}
%>
        {
            // Prevent direct creation
        }

        #endregion
    <%
    }
    %>
<!-- #include file="Criteria.asp" -->
<!-- #include file="SharedAuthorizationMethods.asp" -->
<%
    if (Info.GenerateDataAccessRegion)
    {
        if (!Info.UseCustomLoading)
        {
            if (!genOptional)
            {
                Response.Write(Environment.NewLine);
            }
            %>
        #region Data Access<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel, true, true) %>
        <%
            foreach (Criteria c in GetCriteriaObjects(Info))
            {
                if (c.GetOptions.DataPortal)
                {
                    %>
        /// <summary>
        <%
                    if (c.Properties.Count > 1)
                    {
                        %>
        /// Load <see cref="<%= Info.ObjectName %>"/> collection from the database<%= c.Properties.Count > 0 ? ", based on given criteria" : "" %>.
        /// </summary>
        /// <param name="crit">The fetch criteria.</param>
        protected void DataPortal_Fetch(<%= c.Name %> crit)
        {
            <%
                    }
                    else if (c.Properties.Count > 0)
                    {
                        %>
        /// Load <see cref="<%= Info.ObjectName %>"/> collection from the database<%= c.Properties.Count > 0 ? ", based on given criteria" : "" %>.
        /// </summary>
        /// <param name="<%= c.Properties.Count > 1 ? "crit" : HookSingleCriteria(c, "crit") %>">The fetch criteria.</param>
        protected void DataPortal_Fetch(<%= ReceiveSingleCriteria(c, "crit") %>)
        {
            <%
                    }
                    else
                    {
                        %>
        /// Load <see cref="<%= Info.ObjectName %>"/> collection from the database<%= Info.SimpleCacheOptions == SimpleCacheResults.DataPortal ? " or from the cache" : "" %>.
        /// </summary>
        protected void DataPortal_Fetch()
        {
            <%
                        if (Info.SimpleCacheOptions == SimpleCacheResults.DataPortal)
                        {
                            %>
            if (IsCached)
            {
                LoadCachedList();
                return;
            }

            <%
                        }
                    }
                    %>
            <%= GetConnection(Info, true) %>
            {
                <%
                    if (string.IsNullOrEmpty(c.GetOptions.ProcedureName))
                    {
                        Errors.Append("Criteria " + c.Name + " missing get procedure name." + Environment.NewLine);
                    }
                    %>
                <%= GetCommand(Info, c.GetOptions.ProcedureName) %>
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    <%
                    foreach (CriteriaProperty p in c.Properties)
                    {
                        if (c.Properties.Count > 1)
                        {
                            %>cmd.Parameters.AddWithValue("@<%=p.ParameterName%>", <%= GetParameterSet(p, true) %>);
                    <%
                        }
                        else
                        {
                            %>cmd.Parameters.AddWithValue("@<%=p.ParameterName%>", <%= AssignSingleCriteria(c, "crit") %>);
                    <%
                        }
                    }
                    if (Info.PersistenceType == PersistenceType.SqlConnectionUnshared)
                    {
                        %>cn.Open();
                    <%
                    }
                    string hookArgs = string.Empty;
                    if (c.Properties.Count > 1)
                    {
                        hookArgs = ", crit";
                    }
                    else if (c.Properties.Count > 0)
                    {
                        hookArgs = ", " + HookSingleCriteria(c, "crit");
                    }
                    %>var args = new DataPortalHookArgs(cmd<%= hookArgs %>);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }

        <%
                    if (c.Properties.Count == 0 && Info.SimpleCacheOptions == SimpleCacheResults.DataPortal)
                    {
                        %>
        private void LoadCachedList()
        {
            IsReadOnly = false;
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AddRange(_list);
            RaiseListChangedEvents = rlce;
            IsReadOnly = true;
        }

        <%
                    }
                }
            }
            %>
        private void LoadCollection(SqlCommand cmd)
        {
            IsReadOnly = false;
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                while (dr.Read())
                {
                    Add(new NameValuePair(
                        <%=String.Format(GetDataReaderStatement(valueProp)) %>,
                        <%=String.Format(GetDataReaderStatement(nameProp)) %>));
                }
            }
            RaiseListChangedEvents = rlce;
            IsReadOnly = true;
        }
<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel, true, true) %>        #endregion
        <%
        }
    %>
<!-- #include file="Events.asp" -->

<%
    }
%>

    }
<%
    if (Info.ObjectNamespace.Length > 0)
    {
    %>
}
<%
    }
}
%>
