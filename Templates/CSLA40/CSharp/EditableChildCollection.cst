<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Child Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableChildCollection Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="EditableChildCollectionValidate.asp" -->
<%
if (Errors.Length == 0)
{
    int silverlightLevel = 0;
    bool first = true;
    %><!-- #include file="Header.asp" -->
using System;
<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel) %>using System.Data;
using System.Data.SqlClient;<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel) %>
using Csla;
<%
    if (ActiveObjects)
    {
    %>using ActiveObjects;
<%
    }
%><%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel) %>using Csla.Data;<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel) %>
<%= GetUsingStatementsString(Info) %>
<%
    if (Info.ObjectNamespace.Length > 0)
    {
        %>namespace <%= Info.ObjectNamespace %>
{
<%
    }
    bool? firstComment = null;
    %><!-- #include file="XmlComment.asp" -->
<%
    if (GetAttributesString(Info.Attributes) != string.Empty)
    {
        %>
    <%= GetAttributesString(Info.Attributes) %>
    <%
    }
    %>
    [Serializable]
<%
    if (CurrentUnit.GenerationParams.DualListInheritance)
    {
        %>#if WINFORMS
    <%
    }
    if (ActiveObjects)
    {
        %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
        <%
        if (Info.SubscribeToChannel.Length > 0)
        {
            %>[Subscribe("<%= Info.SubscribeToChannel %>")]<%
        }
    }
    %><%= CurrentUnit.GenerationParams.DualListInheritance ? "" : "    " %>public partial class <%= Info.ObjectName %> : <%
    if (Info.InheritedType.Type != String.Empty)
    {
        %><%=Info.InheritedType.Type%><%
    }
    else if (Info.InheritedType.ObjectName != String.Empty)
    {
        %><%=Info.InheritedType.ObjectName%><%
    }
    else
    {
        if (ActiveObjects)
        {
            %>Active<%
        }
        %><%= ListBaseHelper("Business", true) %><%
    }
    %><<%= Info.ObjectName %>, <%= Info.ItemType %>><!-- #include file="Implements.asp" -->
<%
    if (CurrentUnit.GenerationParams.DualListInheritance)
    {
        %>#else
    <%
        if (ActiveObjects)
        {
            %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
    <%
            if (Info.SubscribeToChannel.Length > 0)
            {
                %>[Subscribe("<%= Info.SubscribeToChannel %>")]<%
            }
        }
    %><%= CurrentUnit.GenerationParams.DualListInheritance ? "" : "    " %>public partial class <%= Info.ObjectName %> : <%
        if (Info.InheritedType.Type != String.Empty)
        {
            %><%=Info.InheritedType.Type%><%
        }
        else if (Info.InheritedType.ObjectName != String.Empty)
        {
            %><%=Info.InheritedType.ObjectName%><%
        }
        else
        {
            if (ActiveObjects)
            {
                %>Active<%
            }
            %><%= ListBaseHelper("Business", false) %><%
        }
        %><<%= Info.ObjectName %>, <%= Info.ItemType %>><!-- #include file="Implements.asp" -->
#endif
    <%
    }
    %><%= CurrentUnit.GenerationParams.DualListInheritance ? "" : "    " %>{
        <!-- #include file="CollectionBusinessProps.asp" -->

<!-- #include file="FindMethods.asp" -->

        #region Factory Methods
    <%
    bool createCriteria = false;
    if (Info.GenerateFactoryMethods)
    {
        PropertyDeclaration declarationMode = GetDeclarationMode(Info);
        bool selfLoad3 = GetSelfLoad(Info);
        bool lazyLoad3 = GetLazyLoad(Info);
        bool parentCreateCriteria = false;
        CslaObjectInfo parentInfo = Info.Parent.CslaObjects.Find(Info.ParentType);
        string strNewCallback2 = string.Empty;
        foreach (Criteria c in Info.CriteriaObjects)
        {
            if (c.CreateOptions.Factory)
            {
                createCriteria = true;
                break;
            }
        }
        foreach (Criteria c in parentInfo.CriteriaObjects)
        {
            if (c.CreateOptions.RunLocal)
            {
                strNewCallback2 += ", DataPortal.ProxyModes.LocalOnly";
            }
            else
            {
                strNewCallback2 += ", DataPortal.ProxyModes.Auto";
            }
            if (c.CreateOptions.Factory || c.CreateOptions.DataPortal)
            {
                parentCreateCriteria = true;
                break;
            }
        }
        if (lazyLoad3 || createCriteria || parentCreateCriteria || declarationMode == PropertyDeclaration.ClassicProperty)
        {
            if (selfLoad3 && Info.DbName.Equals(String.Empty))
            {
                Warnings.Append("Make sure you specify a DB name." + Environment.NewLine);
            }
    %>
<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel) %>
        /// <summary>
        /// Factory method. Creates a new <see cref="<%=Info.ObjectName%>"/> collection.
        /// </summary>
        /// <returns>A reference to the created <see cref="<%=Info.ObjectName%>"/> object.</returns>
        internal static <%= Info.ObjectName %> New<%= Info.ObjectName %>()
        {
            return DataPortal.Create<%= CurrentUnit.GenerationParams.UseChildDataPortal ? "Child" : "" %><<%= Info.ObjectName %>>();
        }
        <%
            if (CurrentUnit.GenerationParams.GenerateSilverlight4)
            {
                %>

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="<%=Info.ObjectName%>"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void New<%= Info.ObjectName %>(EventHandler<DataPortalResult<<%= Info.ObjectName %>>> callback)
        {
            DataPortal.BeginCreate<<%= Info.ObjectName %>>(callback);
        }
        <%
            }
        }
        if (!selfLoad3)
        {
            %>

<!-- #include file="InternalGetObject.asp" -->
<%
        }
        else
        {
            %>
<!-- #include file="GetObject.asp" -->
<%
            if (CurrentUnit.GenerationParams.GenerateAsynchronous)
            {
                %>
<!-- #include file="GetObjectAsync.asp" -->
<%
            }
        }
        if (lazyLoad3 || createCriteria || parentCreateCriteria || declarationMode == PropertyDeclaration.ClassicProperty)
        {
            if (CurrentUnit.GenerationParams.GenerateSilverlight4)
            {
    %>
<%= IfSilverlight (Conditional.Else, 0, ref silverlightLevel) %>
        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="<%=Info.ObjectName%>"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void New<%= Info.ObjectName %>(EventHandler<DataPortalResult<<%= Info.ObjectName %>>> callback)
        {
            DataPortal.BeginCreate<<%= Info.ObjectName %>>(callback<%= strNewCallback2 %>);
        }
        <%
            }
        }
    }
    %>
<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel) %>
        #endregion
<!-- #include file="SharedAuthorizationMethods.asp" -->

<!-- #include file="Constructor.asp"  -->

        <!-- #include file="Criteria.asp" -->
<%
    if (Info.GenerateDataAccessRegion)
    {
        %>

        #region Data Access
<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel) %>
        <!-- #include file="CollectionDataPortalFetch.asp" -->

        <%
        if (!CurrentUnit.GenerationParams.UseChildDataPortal)
        {
            %>
        /// <summary>
        /// Update all changes made on <see cref="<%=Info.ObjectName%>"/> object's children to the database.
        /// </summary>
        <%
            if (Info.TransactionType == TransactionType.EnterpriseServices)
            {
                %>[Transactional(TransactionalTypes.EnterpriseServices)]
        <%
            }
            else if (Info.TransactionType == TransactionType.TransactionScope)
            {
                %>[Transactional(TransactionalTypes.TransactionScope)]
        <%
            }
            if (Info.ParentType.Length == 0)
            {
                Errors.Append("ParentType not set." + Environment.NewLine + Info.ObjectName + " will not compile." + Environment.NewLine);
            }
            %>internal void Update(<%= Info.ParentType %> parent)
        {
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            var args = new DataPortalHookArgs();
            OnUpdateStart(args);
            OnUpdatePre(args);
            <%
            CslaObjectInfo cldInfo = FindChildInfo(Info, Info.ItemType);
            bool ParentInsertOnly = cldInfo.ParentInsertOnly;
            %>
            // Loop through the deleted child objects and call their Update methods
            foreach (<%= Info.ItemType %> child in DeletedList)
                child.DeleteSelf(<%    if (!ParentInsertOnly) { %>parent<% } %>);

            //Now clear the deleted objects from the list
            DeletedList.Clear();

            // Loop through the objects to add and update, calling the Update Method
            foreach (<%= Info.ItemType %> child in this)
            {
                if (child.IsNew)
                    child.Insert(parent);
                else
                    child.Update(<% if (!ParentInsertOnly) { %>parent<% } %>);
            }
            OnUpdatePost(args);
            RaiseListChangedEvents = rlce;
        }

        <%
        }
        %>
<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel) %>
        #endregion
<!-- #include file="Events.asp" -->

<%
    }
    %>

    }
<%
    if (Info.ObjectNamespace.Length > 0)
    {
        %>
}
<%
    }
}
%>
