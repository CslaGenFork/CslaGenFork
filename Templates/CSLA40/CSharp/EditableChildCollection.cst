<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Child Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableChildCollection Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if (true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="EditableChildCollectionValidate.inc" -->
<%
if (Errors.Length == 0)
{
    bool first = true;
    %><!-- #include file="Header.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
<% if (ActiveObjects) { %>using ActiveObjects;
<% } %>using Csla.Data;
<%= GetUsingStatementsString(Info) %>
<% if (Info.ObjectNamespace.Length > 0) { %>namespace <%= Info.ObjectNamespace %>
{<% } %>
<% bool? firstComment = null; %><!-- #include file="XmlComment.inc" -->
    <% if (GetAttributesString(Info.Attributes) != string.Empty) { %>
    <%= GetAttributesString(Info.Attributes) %>
    <% } %>
    [Serializable]
<% if (CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WinForms_WPF) { %>#if WPF<% }
else if (CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WPF_WinForms) { %>#if WINFORMS<% } %>
    <% if (ActiveObjects) { %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
    <% if (Info.SubscribeToChannel.Length > 0) { %>[Subscribe("<%= Info.SubscribeToChannel %>")]<% } %>
    <% } %>public partial class <%= Info.ObjectName %> : <%
         if (Info.InheritedType.Type != String.Empty) {
            %><%=Info.InheritedType.Type%><%
         } else if (Info.InheritedType.ObjectName != String.Empty) {
            %><%=Info.InheritedType.ObjectName%><%
         } else {
            %><% if (ActiveObjects) { %>Active<% } %><%= BusinessListBaseHelper(true) %><%
        } %><<%= Info.ObjectName %>, <%= Info.ItemType %>><!-- #include file="Implements.inc" -->
<% if (CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WinForms_WPF || CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WPF_WinForms) { %>#else
    <% if (ActiveObjects) { %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
    <% if (Info.SubscribeToChannel.Length > 0) { %>[Subscribe("<%= Info.SubscribeToChannel %>")]<% } %>
    <% } %>public partial class <%= Info.ObjectName %> : <%
         if (Info.InheritedType.Type != String.Empty) {
            %><%=Info.InheritedType.Type%><%
         } else if (Info.InheritedType.ObjectName != String.Empty) {
            %><%=Info.InheritedType.ObjectName%><%
         } else {
            %><% if (ActiveObjects) { %>Active<% } %><%= BusinessListBaseHelper(false) %><%
        } %><<%= Info.ObjectName %>, <%= Info.ItemType %>><!-- #include file="Implements.inc" -->
<% if (CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WinForms_WPF || CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WPF_WinForms) { %>#endif<% }
            } %>
    {
        <!-- #include file="CollectionBusinessProps.inc" -->

<!-- #include file="FindMethods.inc" -->

        #region Factory Methods
    <%
    if (Info.GenerateFactoryMethods)
    {
        if (Info.LazyLoad && Info.DbName.Equals(String.Empty))
        {
            Warnings.Append("Make sure you specify a DB name." + Environment.NewLine);
        }
    %>

        /// <summary>
        /// Factory method. Creates a new <see cref="<%=Info.ItemType%>"/> collection.
        /// </summary>
        /// <returns>A reference to the created <see cref="<%=Info.ObjectName%>"/> object.</returns>
        internal static <%= Info.ObjectName %> New<%= Info.ObjectName %>()
        {
            <%
            if (Info.NewRoles != String.Empty)
            {
                %>
            if (!CanAddObject())
                throw new System.Security.SecurityException("User not authorized to create a <%= Info.ObjectName %>.");
            <%
            }
            %>
            return DataPortal.Create<%= CurrentUnit.GenerationParams.UseChildDataPortal ? "Child" : "" %><<%= Info.ObjectName %>>();
        }
        <% if (!Info.LazyLoad) { %>
        <!-- #include file="InternalGetObject.inc" -->
        <%  } else { %>
        <!-- #include file="GetObject.inc" -->
        <% } %>
    <% } %>

        #endregion
<!-- #include file="SharedAuthorizationMethods.inc" -->

<!-- #include file="Constructor.inc"  -->

        <!-- #include file="Criteria.inc" -->
<%
if (Info.GenerateDataAccessRegion)
{
    %>

        #region Data Access
        <!-- #include file="CollectionDataPortalFetch.inc" -->

        <%
    if (!CurrentUnit.GenerationParams.UseChildDataPortal)
    {
        %>
        /// <summary>
        /// Update all changes made on <see cref="<%=Info.ObjectName%>"/> object's children to the database.
        /// </summary>
        <%
        if (Info.TransactionType == TransactionType.EnterpriseServices)
        {
            %>[Transactional(TransactionalTypes.EnterpriseServices)]
        <%
        }
        else if (Info.TransactionType == TransactionType.TransactionScope)
        {
            %>[Transactional(TransactionalTypes.TransactionScope)]
        <%
        }
        if (Info.ParentType.Length == 0)
        {
            Errors.Append("ParentType not set." + Environment.NewLine + Info.ObjectName + " will not compile." + Environment.NewLine);
        }
        %>internal void Update(<%= Info.ParentType %> parent)
        {
            RaiseListChangedEvents = false;
            var args = new DataPortalHookArgs();
            OnUpdateStart(args);
            OnUpdatePre(args);
            <%
            CslaObjectInfo cldInfo = FindChildInfo(Info, Info.ItemType);
            bool ParentInsertOnly = cldInfo.ParentInsertOnly;
            %>
            // Loop through the deleted child objects and call their Update methods
            foreach (<%= Info.ItemType %> child in DeletedList)
                child.DeleteSelf(<%    if (!ParentInsertOnly) { %>parent<% } %>);

            //Now clear the deleted objects from the list
            DeletedList.Clear();

            // Loop through the objects to add and update, calling the Update Method
            foreach (<%= Info.ItemType %> child in this)
            {
                if (child.IsNew)
                    child.Insert(parent);
                else
                    child.Update(<%    if (!ParentInsertOnly) { %>parent<% } %>);
            }
            OnUpdatePost(args);
            RaiseListChangedEvents = true;
        }

        <%
    }
        %>
        #endregion
<!-- #include file="Events.inc" -->

<% } %>

    }
<% if (Info.ObjectNamespace.Length > 0) { %>
}
<% } %>
<% } %>
