<%@ CodeTemplate Inherits="CslaTemplateHelper" Debug="false" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Child Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableChild Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="EditableChildValidate.inccs" -->
<% if (Errors.Length == 0)
{
    bool first = true;
    %><!-- #include file="Header.inccs" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
<%
    if (ActiveObjects)
    {
        %>using ActiveObjects;
        <%
    }
%>
using Csla.Data;
<%= GetUsingStatementsString(Info) %>
<%
    if (Info.ObjectNamespace.Length > 0)
    {
        %>namespace <%= Info.ObjectNamespace %>
{
    <%
    }
    %>
<% bool? firstComment = null; %><!-- #include file="XmlComment.inccs" -->
    <%
    if (GetAttributesString(Info.Attributes) != string.Empty)
    {
        %>
    <%= GetAttributesString(Info.Attributes) %>
        <%
    }
    %>
    [Serializable]
    <%
    if (ActiveObjects && Info.SubscribeToChannel.Length > 0)
    {
        %>
        [Subscribe("<%= Info.SubscribeToChannel %>")]
        <%
    }
    %>
    public partial class <%= Info.ObjectName %> : <%
    if (Info.InheritedType.Type != string.Empty)
    {
        %><%=Info.InheritedType.Type%><%
    }
    else if (Info.InheritedType.ObjectName != string.Empty)
    {
        %><%=Info.InheritedType.ObjectName%><%
    }
    else
    {
        %><% if (ActiveObjects) { %>Active<% } %>BusinessBase<%
    }
        %><<%=Info.ObjectName%>><!-- #include file="Implements.inccs" -->
    {
<!-- #include file="StaticFields.inccs" -->
<!-- #include file="StateFields.inccs" -->

<!-- #include file="BusinessProps.inccs" -->

<!-- #include file="BusinessRules.inccs" -->

        <!-- #include file="ObjectOverrides.inccs" -->
    <%
    Response.Write(Environment.NewLine);
    %>
        #region Factory Methods
        <%
    if (Info.GenerateFactoryMethods)
    {
        if (Info.DbName.Equals(String.Empty))
        {
            Warnings.Append("Make sure you specify a DB name." + Environment.NewLine) ;
        }
        %>
        <!-- #include file="NewObject.inccs" -->

        <%
        if (Info.DbName != String.Empty)
        {
            if (!Info.LazyLoad)
            {
                %>
        <!-- #include file="InternalGetObject.inccs" -->
                <%
            }
            else
            {
                %>
        <!-- #include file="GetObject.inccs" -->
                <%
            }
        }
        %>
        <%
        Response.Write(Environment.NewLine);
        %>
        #endregion
        <%
    }
    %>
<!-- #include file="Constructor.inccs"  -->

    <!-- #include file="Criteria.inccs"  -->

<!-- #include file="SharedAuthorizationMethods.inccs" -->
    <%
    Response.Write(Environment.NewLine);
    %>
<!-- #include file="ConvertProperties.inccs" -->

    <%
    if (Info.DbName != String.Empty)
    {
        if (Info.GenerateDataAccessRegion)
        {
            %>
        #region Data Access
            <%
            Response.Write(Environment.NewLine);
            %>
        <!-- #include file="DataPortalCreate.inccs"  -->

        <!-- #include file="DataPortalFetch.inccs" -->

        <!-- #include file="InternalUpdate.inccs" -->
            <%
            Response.Write(Environment.NewLine);
            %>
        #endregion
<!-- #include file="Events.inccs" -->
<%
        }
    }
    %>

    }
    <%
    if (Info.ObjectNamespace.Length > 0)
    {
        %>
}
        <%
    }
}
%>
