<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Root Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableRoot Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="EditableRootValidate.inc" -->
<%
if (Errors.Length == 0)
{
    bool first = true;
    %><!-- #include file="Header.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
<% if (ActiveObjects) { %>using ActiveObjects;<%  } else { %>using Csla;<% } %>
using Csla.Data;
<%= GetUsingStatementsString(Info) %>
<% if (Info.ObjectNamespace.Length > 0) { %>namespace <%= Info.ObjectNamespace %>
{<% } %>
<% bool? firstComment = null; %><!-- #include file="XmlComment.inc" -->
    <% if (GetAttributesString(Info.Attributes) != string.Empty) { %>
    <%= GetAttributesString(Info.Attributes) %>
    <% } %>
    [Serializable]
    <% if (ActiveObjects && Info.SubscribeToChannel.Length > 0) { %>[Subscribe("<%= Info.SubscribeToChannel %>")]
    <% } %>public partial class <%= Info.ObjectName %> : <%
        if (Info.InheritedType.Type != string.Empty) {
            %><%=Info.InheritedType.Type%><%
        } else if (Info.InheritedType.ObjectName != string.Empty) {
            %><%=Info.InheritedType.ObjectName%><%
         } else {
            %><% if (ActiveObjects) { %>Active<% } %>BusinessBase<<%=Info.ObjectName %>><%
        } %><!-- #include file="Implements.inc" -->
    {
<!-- #include file="StaticFields.inc" -->
<!-- #include file="StateFields.inc" -->

<!-- #include file="BusinessProps.inc" -->

<!-- #include file="BusinessRules.inc" -->

        <!-- #include file="ObjectOverrides.inc" -->
        <% Response.Write(Environment.NewLine); %>
        #region Factory Methods
    <% if (Info.GenerateFactoryMethods)
    {
            if (Info.DbName.Equals(String.Empty))
            {
                Warnings.Append("Make sure you specify a DB name." + Environment.NewLine) ;
            }
    %>
        <!-- #include file="NewObject.inc" -->

        <!-- #include file="GetObject.inc" -->

        <!-- #include file="DeleteObject.inc" -->
    <% } %>
        <!-- #include file="Save.inc" -->
        <% Response.Write(Environment.NewLine); %>
        #endregion
<!-- #include file="Constructor.inc"  -->

        <!-- #include file="Criteria.inc"  -->

<!-- #include file="SharedAuthorizationMethods.inc" -->
<% Response.Write(Environment.NewLine); %>
<!-- #include file="ConvertProperties.inc" -->
<% if (Info.GenerateDataAccessRegion) { %>
        #region Data Access

        <!-- #include file="DataPortalCreate.inc"  -->

        <!-- #include file="DataPortalFetch.inc"  -->

        <!-- #include file="DataPortalInsert.inc" -->

        <!-- #include file="DataPortalUpdate.inc" -->

<% if (Info.GenerateDataPortalInsert || Info.GenerateDataPortalUpdate) { %>
<!-- #include file="DoInsertUpdate.inc" -->
<% } %>
        <!-- #include file="DataPortalDelete.inc" -->
        #endregion
<!-- #include file="Events.inc" -->

<% } %>

    }
<% if (Info.ObjectNamespace.Length > 0) { %>
}
<% } %>
<% } %>
