<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA NameValueList Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the NameValueList Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="If true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>

<%
ValueProperty nameProp = null;
ValueProperty valueProp = null;
foreach (ValueProperty prop in Info.ValueProperties)
{
    if (prop.Name.Equals(Info.NameColumn))
        nameProp = prop;
    if (prop.Name.Equals(Info.ValueColumn))
        valueProp = prop;
}
if (nameProp == null || valueProp == null)
    Errors.Append("Missing name or value properties." + Environment.NewLine);
else
{
    %><!-- #include file="Header.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
<%
    if (ActiveObjects) { %>using ActiveObjects;<%  } else { %>using Csla;<% } %>
using Csla.Data;
<%
    if (Info.ObjectNamespace.IndexOf(CurrentUnit.GenerationParams.UtilitiesNamespace) != 0)
    {
%>using <%= CurrentUnit.GenerationParams.UtilitiesNamespace %>;
<%
    }
    Response.Write(Environment.NewLine);
    if (Info.ObjectNamespace.Length > 0)
    {
%>namespace <%= Info.ObjectNamespace %>
{
    <%
    }
    %>
<% bool? firstComment = null; %><!-- #include file="XmlComment.inc" -->
    [Serializable]
    <%
    if (ActiveObjects && Info.SubscribeToChannel.Length > 0)
    {
    %>[Subscribe("<%= Info.SubscribeToChannel %>")]
    <%
    }
    %>public partial class <%= Info.ObjectName %> : NameValueListBase<<%= GetDataTypeGeneric(valueProp, valueProp.PropertyType) %>, <%= GetDataTypeGeneric(nameProp, nameProp.PropertyType) %>>
    {

        #region Constructors

        <%= GetConstructorVisibility(Info) %> <%=Info.ObjectName%>()
        {
            // Prevent direct creation
        }

        #endregion

        <%
    if (Info.GenerateFactoryMethods)
    {
        if (!Info.UseCustomLoading)
        {
            %>
        #region Factory Methods

        <%
            if (Info.CacheResults)
            {
                %>
        private static <%= Info.ObjectName %> _list;

        <%
            }
        Criteria c = Info.CriteriaObjects[0];
            if (c.GetOptions.Factory)
            {
                %>
        /// <summary>
        /// Factory method. New <see cref="<%= Info.ObjectName %>"/> object is loaded from the database.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="<%=Info.ObjectName%>"/> object.</returns>
        <%
                string strGetParams = string.Empty;
                string strGetCritParams = string.Empty;
                for (int i = 0; i < c.Properties.Count; i++)
                {
                    if (i > 0)
                    {
                        strGetParams += ", ";
                        strGetCritParams += ", ";
                    }
                    strGetParams += string.Concat(GetDataTypeGeneric(c.Properties[i], c.Properties[i].PropertyType), " ", FormatCamel(c.Properties[i].Name));
                    strGetCritParams += FormatCamel(c.Properties[i].Name);
                }
        %>
        public static <%= Info.ObjectName %> Get<%= Info.ObjectName %><%= c.GetOptions.FactorySuffix %>()
        {
            <%
                if (Info.GetRoles.Trim() != string.Empty)
                {
                    %>
            if (!CanGetObject())
                throw new System.Security.SecurityException("User not authorized to load a <%= Info.ObjectName %>.");

            <%
                }
                if (Info.CacheResults)
                {
                    %>
            if (_list == null)
                _list = DataPortal.Fetch<<%= Info.ObjectName %>>();

            return _list;
            <%
                }
                else
                {
                    %>
            return <% if (ActiveObjects) { %>ActiveObjects.<% } %>DataPortal.Fetch<<%= Info.ObjectName %>>(crit);
            <%
                }
                %>
        }
        <%
            }
        }
        %>

        /// <summary>
        /// Clears the in-memory <%= Info.ObjectName %> cache so it is reloaded on the next request.
        /// </summary>
        public static void Invalidate()
        {
            _list = null;
        }

        #endregion
    <%
    }
    %>
<!-- #include file="SharedAuthorizationMethods.inc" -->
<%
    if (Info.GenerateDataAccessRegion)
    {
        if (!Info.UseCustomLoading)
        {
            %>

        #region Data Access

        <%
            Criteria c = Info.CriteriaObjects[0];
            if (c.GetOptions.DataPortal)
            {
                %>
        /// <summary>
        /// Load <see cref="<%= Info.ObjectName %>"/> collection from the database.
        /// </summary>
        protected void DataPortal_Fetch()
        {
            <%= GetConnection(Info, true) %>
            {
                <%
                if (string.IsNullOrEmpty(c.GetOptions.ProcedureName))
                {
                    Errors.Append("Criteria " + c.Name + " missing get procedure name." + Environment.NewLine);
                }
                %>
                <%= GetCommand(Info, c.GetOptions.ProcedureName) %>
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    <%
                if (Info.PersistenceType == PersistenceType.SqlConnectionUnshared)
                {
                    %>
                    cn.Open();
                    <%
                }
                %>
                    var args = new DataPortalHookArgs(cmd);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }

        <%
            }
            %>
        private void LoadCollection(SqlCommand cmd)
        {
            RaiseListChangedEvents = false;
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                IsReadOnly = false;
                while (dr.Read())
                {
                    Add(new NameValuePair(
                        <%=String.Format(GetDataReaderStatement(valueProp))%>,
                        <%=String.Format(GetDataReaderStatement(nameProp))%>));
                }
                IsReadOnly = true;
            }
            RaiseListChangedEvents = true;
        }

        #endregion
        <%
        }
    %>
<!-- #include file="Events.inc" -->

<%
    }
%>

    }
<%
    if (Info.ObjectNamespace.Length > 0)
    {
    %>
}
<%
    }
}
%>
