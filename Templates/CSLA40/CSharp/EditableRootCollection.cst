<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Root Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableRootCollection Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="EditableRootCollectionValidate.asp" -->
<%
if (Errors.Length == 0)
{
    int silverlightLevel = 0;
    bool first = true;
    %><!-- #include file="Header.asp" -->
using System;
<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel) %>using System.Data;
using System.Data.SqlClient;<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel) %>
using Csla;
<%
    if (ActiveObjects)
    {
    %>using ActiveObjects;
<%
    }
    %><%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel) %>using Csla.Data;<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel) %>
<%= GetUsingStatementsString(Info) %>
<%
    if (Info.ObjectNamespace.Length > 0)
    {
%>namespace <%= Info.ObjectNamespace %>
{
    <%
    }
    %>
<% bool? firstComment = null; %><!-- #include file="XmlComment.asp" -->
    <%
    if (GetAttributesString(Info.Attributes) != string.Empty)
    {
        %>
    <%= GetAttributesString(Info.Attributes) %>
    <%
    }
    %>
    [Serializable]
<%
    if (CurrentUnit.GenerationParams.DualListInheritance)
    {
        %>#if WINFORMS
    <%
    }
    if (ActiveObjects)
    {
        %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
    <%
        if (Info.SubscribeToChannel.Length > 0)
        {
            %>[Subscribe("<%= Info.SubscribeToChannel %>")]<%
        }
    }
    %><%= CurrentUnit.GenerationParams.DualListInheritance ? "" : "    " %>public partial class <%= Info.ObjectName %> : <%
    if (Info.InheritedType.Type != String.Empty)
    {
        %><%=Info.InheritedType.Type%><%
    }
    else if (Info.InheritedType.ObjectName != String.Empty)
    {
        %><%=Info.InheritedType.ObjectName%><%
    }
    else
    {
        if (ActiveObjects)
        {
            %>Active<%
        }
        %><%= ListBaseHelper("Business", true) %><%
    }
    %><<%= Info.ObjectName %>, <%= Info.ItemType %>>
    <!-- #include file="Implements.asp" -->
<%
    if (CurrentUnit.GenerationParams.DualListInheritance)
    {
%>#else
    <%
        if (ActiveObjects)
        {
    %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
    <%
            if (Info.SubscribeToChannel.Length > 0)
            {
        %>[Subscribe("<%= Info.SubscribeToChannel %>")]<%
            }
        }
        %><%= CurrentUnit.GenerationParams.DualListInheritance ? "" : "    " %>public partial class <%= Info.ObjectName %> : <%
        if (Info.InheritedType.Type != String.Empty)
        {
        %><%=Info.InheritedType.Type%><%
        }
        else if (Info.InheritedType.ObjectName != String.Empty)
        {
        %><%=Info.InheritedType.ObjectName%><%
        }
        else
        {
            if (ActiveObjects)
            {
                %>Active<%
            }
            %><%= ListBaseHelper("Business", false) %><%
        }
        %><<%= Info.ObjectName %>, <%= Info.ItemType %>><!-- #include file="Implements.asp" -->
#endif
    <%
    }
    %><%= CurrentUnit.GenerationParams.DualListInheritance ? "" : "    " %>{
        <!-- #include file="CollectionBusinessProps.asp" -->

<!-- #include file="FindMethods.asp" -->

    <%
    if (Info.GenerateFactoryMethods)
    {
        if (Info.DbName.Equals(String.Empty))
        {
            Warnings.Append("Make sure you specify a DB name." + Environment.NewLine);
        }
        %>
        #region Factory Methods
<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel) %>
        <!-- #include file="NewObject.asp" -->
        <!-- #include file="GetObject.asp" -->
        <!-- #include file="NewObjectAsync.asp" -->
<%= IfSilverlight (Conditional.Else, 0, ref silverlightLevel) %>
        <!-- #include file="NewObjectSilverlight.asp" -->
<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel) %>
        <!-- #include file="GetObjectAsync.asp" -->
<% Response.Write(Environment.NewLine); %>        #endregion
        <%
    }
    %>
        <!-- #include file="Save.asp" -->

<!-- #include file="Constructor.asp" -->

        <!-- #include file="Criteria.asp" -->

<!-- #include file="SharedAuthorizationMethods.asp" -->
    <%
    if (Info.GenerateDataAccessRegion)
    {
        %>

        #region Data Access
<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel) %>
        <!-- #include file="CollectionDataPortalFetch.asp" -->

        /// <summary>
        /// Saves (delete, add, update) all child objects to database.
        /// </summary>
        <%
        if (Info.TransactionType == TransactionType.EnterpriseServices)
        {
            %>[Transactional(TransactionalTypes.EnterpriseServices)]
        <%
        }
        else if (Info.TransactionType == TransactionType.TransactionScope)
        {
            %>[Transactional(TransactionalTypes.TransactionScope)]
        <%
        }
        %>protected override void DataPortal_Update()
        {
            <%= GetConnection(Info, false) %>
            {
                <%
        if (Info.PersistenceType == PersistenceType.SqlConnectionUnshared)
        {
            %>cn.Open();
                <%
        }
        if (CurrentUnit.GenerationParams.UseChildDataPortal)
        {
            %>base.Child_Update();
<%
        }
        else
        {
            %>foreach (<%= Info.ItemType %> child in DeletedList)
                    child.DeleteSelf();

                // Now clear the deleted objects from the list
                DeletedList.Clear();

                foreach (<%= Info.ItemType %> child in this)
                {
                    if (child.IsNew)
                        child.Insert();
                    else
                        child.Update();
                }
                <%
        }
        if (Info.TransactionType == TransactionType.ADO && Info.PersistenceType == PersistenceType.SqlConnectionManager)
        {
            %>
                ctx.Commit();
                <%
        }
%>
            }
        }
<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel) %>
        #endregion
<!-- #include file="Events.asp" -->

<%
    }
    %>

    }
<%
    if (Info.ObjectNamespace.Length > 0)
    {
    %>
}
<%
    }
}
%>
