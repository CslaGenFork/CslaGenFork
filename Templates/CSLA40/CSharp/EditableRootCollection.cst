<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Root Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableRootCollection Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if (true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="EditableRootCollectionValidate.inc" -->
<%
if (Errors.Length == 0)
{
    bool first = true;
    %><!-- #include file="Header.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
<%
    if (ActiveObjects)
    {
    %>using ActiveObjects;
<%
    }
    %>using Csla.Data;
<%= GetUsingStatementsString(Info) %>
<%
    if (Info.ObjectNamespace.Length > 0)
    {
%>namespace <%= Info.ObjectNamespace %>
{
    <%
    }
    %>
<% bool? firstComment = null; %><!-- #include file="XmlComment.inc" -->
    <%
    if (GetAttributesString(Info.Attributes) != string.Empty)
    {
        %>
    <%= GetAttributesString(Info.Attributes) %>
    <%
    }
    %>
    [Serializable]
<%
    if (CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WinForms_WPF)
    {
        %>#if WPF
    <%
    }
    else if (CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WPF_WinForms)
    {
        %>#if WINFORMS
    <%
    }
    if (ActiveObjects)
    {
        %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
    <%
        if (Info.SubscribeToChannel.Length > 0)
        {
            %>[Subscribe("<%= Info.SubscribeToChannel %>")]<%
        }
    }
    %>public partial class <%= Info.ObjectName %> : <%
    if (Info.InheritedType.Type != String.Empty)
    {
        %><%=Info.InheritedType.Type%><%
    }
    else if (Info.InheritedType.ObjectName != String.Empty)
    {
        %><%=Info.InheritedType.ObjectName%><%
    }
    else
    {
        if (ActiveObjects)
        {
            %>Active<%
        }
        %><%= BusinessListBaseHelper(true) %><%
    }
    %><<%= Info.ObjectName %>, <%= Info.ItemType %>>
    <!-- #include file="Implements.inc" -->
<%
    if (CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WinForms_WPF ||
        CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WPF_WinForms)
    {
%>#else
    <%
        if (ActiveObjects)
        {
    %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
    <%
            if (Info.SubscribeToChannel.Length > 0)
            {
        %>[Subscribe("<%= Info.SubscribeToChannel %>")]<%
            }
        }
        %>public partial class <%= Info.ObjectName %> : <%
        if (Info.InheritedType.Type != String.Empty)
        {
        %><%=Info.InheritedType.Type%><%
        }
        else if (Info.InheritedType.ObjectName != String.Empty)
        {
        %><%=Info.InheritedType.ObjectName%><%
        }
        else
        {
            if (ActiveObjects)
            {
            %>Active<%
            }
        %><%= BusinessListBaseHelper(false) %><%
        }
    %><<%= Info.ObjectName %>, <%= Info.ItemType %>><!-- #include file="Implements.inc" -->
<%
        if (CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WinForms_WPF ||
            CurrentUnit.GenerationParams.GeneratedUIEnvironment == UIEnvironment.WPF_WinForms)
        {
%>#endif<%
        }
    }
%>
    {
        <!-- #include file="CollectionBusinessProps.inc" -->

<!-- #include file="FindMethods.inc" -->

    <%
    if (Info.GenerateFactoryMethods)
    {
        if (Info.DbName.Equals(String.Empty))
        {
            Warnings.Append("Make sure you specify a DB name." + Environment.NewLine);
        }
        %>
        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="<%=Info.ObjectName%>"/> collection.
        /// </summary>
        /// <returns>A reference to the created <see cref="<%=Info.ObjectName%>"/> object.</returns>
        public static <%= Info.ObjectName %> New<%= Info.ObjectName %>()
        {
            return DataPortal.Create<<%= Info.ObjectName %>>();
        }
        <!-- #include file="GetObject.inc" -->
        <% Response.Write(Environment.NewLine); %>
        #endregion
        <%
    }
    %>
        <!-- #include file="Save.inc" -->

<!-- #include file="Constructor.inc" -->

        <!-- #include file="Criteria.inc" -->

<!-- #include file="SharedAuthorizationMethods.inc" -->
    <%
    if (Info.GenerateDataAccessRegion)
    {
        %>

        #region Data Access
        <!-- #include file="CollectionDataPortalFetch.inc" -->

        /// <summary>
        /// Saves (delete, add, update) all child objects to database.
        /// </summary>
        <%
        if (Info.TransactionType == TransactionType.EnterpriseServices)
        {
            %>[Transactional(TransactionalTypes.EnterpriseServices)]
        <%
        }
        else if (Info.TransactionType == TransactionType.TransactionScope)
        {
            %>[Transactional(TransactionalTypes.TransactionScope)]
        <%
        }
        %>protected override void DataPortal_Update()
        {
            <%= GetConnection(Info, false) %>
            {
                <%
        if (Info.PersistenceType == PersistenceType.SqlConnectionUnshared)
        {
            %>cn.Open();
                <%
        }
        if (CurrentUnit.GenerationParams.UseChildDataPortal)
        {
            %>base.DataPortal_Update();
<%
        }
        else
        {
            %>foreach (<%= Info.ItemType %> child in DeletedList)
                    child.DeleteSelf();

                // Now clear the deleted objects from the list
                DeletedList.Clear();

                foreach (<%= Info.ItemType %> child in this)
                {
                    if (child.IsNew)
                        child.Insert();
                    else
                        child.Update();
                }
                <%
        }
        if (Info.TransactionType == TransactionType.ADO && Info.PersistenceType == PersistenceType.SqlConnectionManager)
        {
            %>
                ctx.Commit();
                <%
        }
%>
            }
        }

        /*/// <summary>
        /// Not implemented.
        /// </summary>
        /// <param name="crit">The delete criteria.</param>
        protected override void DataPortal_Delete(object crit)
        {
        }*/

        #endregion
<!-- #include file="Events.inc" -->

<%
    }
    %>

    }
<%
    if (Info.ObjectNamespace.Length > 0)
    {
    %>
}
<%
    }
}
%>
