<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Child Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableChildCollection Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if ( true, base class is generated as ActiveObjects" %>

<% bool first = true; %>
<!-- #include file="Header.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
<% if (ActiveObjects) { %>using ActiveObjects;
<% } %>using Csla.Data;
<%= GetUsingStatementsString(Info) %>
<% if (Info.ObjectNamespace.Trim().Length > 0) { %>namespace <%=Info.ObjectNamespace%>
{	<% } %>
	<!-- #include file="XmlComment.inc" -->
	<% if (GetAttributesString(Info.Attributes) != string.Empty) { %>
	<%= GetAttributesString(Info.Attributes) %>
	<% } %>
	[Serializable()]
	<% if (ActiveObjects) { %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
	<% if (Info.SubscribeToChannel.Length > 0) { %>[Subscribe("<%= Info.SubscribeToChannel %>")]<% } %>
	<% } %>public partial class <%=Info.ObjectName%> : <%
		 if (Info.InheritedType.Type != String.Empty) { 
			%><%=Info.InheritedType.Type%><% 
		 } else if (Info.InheritedType.ObjectName != String.Empty) {
			%><%=Info.InheritedType.ObjectName%><% 
		 } else { 
			%><% if (ActiveObjects) { %>Active<% } %>BusinessListBase<% 
		} %><<%=Info.ObjectName%>, <%=Info.ItemType %>><!-- #include file="Implements.inc" -->	
	{
<% if (Info.AddParentReference) { %>

		#region Parent Reference

		[NonSerialized()]
		[NotUndoable()]
		private Object m_Parent;
		
		public Object Parent
		{
			get
			{
				return m_Parent;
			}
		}
		
		internal void SetParent(Object parent)
		{
			m_Parent = parent;
		}
	
		#endregion
<% } %>

		<!-- #include file="CollectionBusinessProps.inc" -->
		
		<!-- #include file="FindMethods.inc" -->
		<% Response.WriteLine(); %>
		#region Factory Methods
	<% if (Info.GenerateFactoryMethods) { 
		if (Info.LazyLoad && Info.DbName.Trim().Equals(String.Empty)) {
			Errors.Append("	Make sure you specify a DB name.");
			Errors.Append("\r\n");
		}
	%>
	
		/// <summary>
		/// Factory method. Creates a new <see cref="<%=Info.ItemType%>" /> collection.
		/// </summary>
		internal static <%= Info.ObjectName %> New<%= Info.ObjectName %>()
		{
			<% if (Info.NewRoles != String.Empty) { %>
			if (!CanAddObject())
				throw new System.Security.SecurityException("User not authorized to create a <%= Info.ObjectName %>");
			<% } %>
			return new <%= Info.ObjectName %>();
		}
		
		<% if (!Info.LazyLoad) { %>
		<!-- #include file="InternalGetObject.inc" -->
		<%  } else { %>
		<!-- #include file="GetObject.inc" -->
		<% } %>
	<% } %>
	
		#endregion
		<!-- #include file="SharedAuthorizationMethods.inc" -->
		
		<!-- #include file="Constructor.inc"  -->
		
		<!-- #include file="Criteria.inc" -->
<% if (Info.GenerateDataAccessRegion) { %>
	
		#region Data Access
		<!-- #include file="CollectionDataPortalFetch.inc" -->

		/// <summary>
		/// Update all changes made on <see cref="<%=Info.ObjectName%>" /> Object's children to the underlying database.
		/// </summary>
		<%	if (Info.TransactionType == TransactionType.EnterpriseServices) { %>[Transactional()]
		<%	} 
			if (Info.ParentType.Length == 0) { 
				Errors.Append("ParentType not set." + "\r\n" + Info.ObjectName + " will not compile.");
				Errors.Append("\r\n");
			}
		%>internal void Update(<%= Info.ParentType %> parent)
		{
			RaiseListChangedEvents = false;
			onUpdatePre(this, EventArgs.Empty);
			<% 
			CslaObjectInfo cldInfo = FindChildInfo(Info, Info.ItemType);
			bool ParentInsertOnly = cldInfo.ParentInsertOnly;
			%>
			// Loop through the deleted child objects and call their Update methods
			foreach (<%= Info.ItemType %> child in DeletedList)
				child.DeleteSelf(<%	if (!ParentInsertOnly) { %>parent<% } %>);
			
			//Now clear the deleted objects from the list
			DeletedList.Clear();
			
			// Loop through the objects to add and update, calling the Update Method
			foreach (<%= Info.ItemType %> child in this) 
			{
				if (child.IsNew)
					child.Insert(parent);
				else
					child.Update(<%	if (!ParentInsertOnly) { %>parent<% } %>);
			}
			onUpdatePost(this, EventArgs.Empty);
			RaiseListChangedEvents = true;
		}
		
		#endregion
		<!-- #include file="Events.inc" -->

<% } %>

	}

<% if ( Info.ObjectNamespace.Trim().Length > 0 ) { %>
}
<% } %>
