<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Switchable Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableSwitchable Object to create." %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if ( true, base class is generated as ActiveObjects" %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Collections.Generic" %>

<% bool first = true; %>
<!-- #include file="Header.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Validation;
<% if (ActiveObjects) { %>using ActiveObjects;<% } %>
using Csla.Data;
<%= GetUsingStatementsString(Info) %>
<% if (Info.ObjectNamespace.Trim().Length > 0 ) { %>namespace <%=Info.ObjectNamespace%>
{ <% } %>
	<!-- #include file="XmlComment.inc" -->
	<% if (GetAttributesString(Info.Attributes) != string.Empty) { %>
	<%= GetAttributesString(Info.Attributes) %>
	<% } %>
	[Serializable()]<%
	if (ActiveObjects && Info.SubscribeToChannel.Length > 0) { %>
	[Subscribe("<%= Info.SubscribeToChannel %>")]
	<% } %>
	public partial class <%=Info.ObjectName%> :  <%
			if (Info.InheritedType.Type != String.Empty) { 
				%><%=Info.InheritedType.Type%><% 
			} else if (Info.InheritedType.ObjectName != String.Empty) {
				%><%=Info.InheritedType.ObjectName%><% 
			 } else { 
				%><% if (ActiveObjects) { %>Active<% } %>BusinessBase<% 
			} %><<%=Info.ObjectName%>>
	{
		<!-- #include file="Implements.inc" -->	
		
		<!-- #include file="StateFields.inc" -->
		
		<!-- #include file="BusinessProps.inc" -->
		
		<!-- #include file="BusinessRules.inc" -->
		
		<!-- #include file="ObjectOverrides.inc" -->
		<% Response.Write("\r\n"); %>
		#region Factory Methods
	<% if (Info.GenerateFactoryMethods) { 
			if (Info.DbName.Trim().Equals(String.Empty)) {
				Errors.Append("	Make sure you specify a DB name.\r\n") ;
			}
	%>
		<!-- #include file="NewObject.inc" -->
		
		<!-- #include file="GetObject.inc" -->
		
		<!-- #include file="InternalGetObject.inc" -->
		
		<!-- #include file="DeleteObject.inc" -->

<% foreach (Criteria c in Info.CriteriaObjects) {
	if (c.CreateOptions.Factory) { %>
		/// <summary>
		/// Factory method. New <see cref="<%=Info.ObjectName%>" /> Object is created as child, based on given parameters.
		/// </summary>
<%
		string strNewParams = string.Empty;
		string strNewCritParams = string.Empty;
		CslaGenerator.Metadata.CriteriaPropertyCollection newParams = c.Properties;
		for (int i = 0; i < newParams.Count; i++) {
			if (i > 0) {
				strNewParams += ", ";
				strNewCritParams += ", ";
			}
			strNewParams += string.Concat(GetDataType(newParams[i]), " ", FormatCamel(newParams[i].Name));
			strNewCritParams += FormatCamel(newParams[i].Name);
		}
%>	
		internal static <%=Info.ObjectName%> New<%=Info.ObjectName%><%=c.CreateOptions.FactorySuffix.Trim()%>Child(<%= strNewParams %>)
		{
		<% if (Info.NewRoles != String.Empty) { 
				String[] newRoles = System.Text.RegularExpressions.Regex.Split(Info.NewRoles, ";");
				first = true; %>
			if (<% foreach (String role in newRoles) {
					if (!first) { %> && _
			   <% } else {
						first = false;
					} %>!System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   } %>) {
					throw new System.Security.SecurityException("User not authorized to create a <%=Info.ObjectName%>");
			}
			
			<% } 
			
			if (Info.ObjectType == CslaObjectType.EditableSwitchable) {
				if (strNewCritParams.Length > 0) {
					strNewCritParams = "true, " + strNewCritParams;
				} else {
					strNewCritParams = "true";
				}
			}
			
			%>
			<%= Info.ObjectName %> obj = <% if (ActiveObjects) { %>ActiveObjects.<% } %>DataPortal.Create<<%= Info.ObjectName %>>(new <%= c.Name %>(<%= strNewCritParams %>));
			obj.MarkAsChild();
			return obj;
		}
<% } 

	if (c.GetOptions.Factory) { %>
		/// <summary>
		/// Factory method. New <see cref="<%=Info.ObjectName%>" /> Object is created as a Child Object and loaded from the database, based on given parameters.
		/// </summary>
		<%
			string strGetParams = string.Empty;
			string strGetCritParams = string.Empty;
			for (int i = 0; i < c.Properties.Count; i++) {
				if (i > 0) {
					strGetParams += ", ";
					strGetCritParams += ", ";
				}
				strGetParams += string.Concat(GetDataType(c.Properties[i]), " ", FormatCamel(c.Properties[i].Name));
				strGetCritParams += FormatCamel(c.Properties[i].Name);
			}
		%>
		internal static <%=Info.ObjectName%> Get<%=Info.ObjectName%><%=c.GetOptions.FactorySuffix.Trim()%>Child(<%=strGetParams%>)
		{
			<% if (Info.GetRoles != String.Empty) { 
				string[] getRoles = System.Text.RegularExpressions.Regex.Split(Info.GetRoles, ";");
				first = true; %>
			if (<% foreach (String role in getRoles) {
					if (!first) { %> &&
			   <% } else {
						first = false;
					} %>!System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   } %>) {
					throw new System.Security.SecurityException("User not authorized to load a <%=Info.ObjectName%>");
			}
			
			<% }
			if (strGetCritParams.Trim().Length > 0)
				strGetCritParams = "true, " + strGetCritParams;
			else
				strGetCritParams = "true";
			%>
			return <% if (ActiveObjects) { %>ActiveObjects.<% } %>DataPortal.Fetch<<%=Info.ObjectName %>>(new <%=c.Name%>(<%=strGetCritParams %>));
		}
	<% } %>
<% } %>
	<% } %>
		<!-- #include file="Save.inc" -->
		<% Response.Write("\r\n"); %>
		#endregion
		<!-- #include file="Constructor.inc" -->

		<!-- #include file="Criteria.inc" -->

		<!-- #include file="SharedAuthorizationMethods.inc" -->
<% if (Info.GenerateDataAccessRegion) { %>
	
		#region Data Access
		<!-- #include file="DataPortalCreate.inc" -->
		
		<!-- #include file="DataPortalFetch.inc" -->
		
		<!-- #include file="DataPortalInsert.inc" -->		
		
		<!-- #include file="DataPortalUpdate.inc" -->	
		
		<!-- #include file="InternalUpdate.inc" -->	
		
		<!-- #include file="DataPortalDelete.inc" -->
		
		#endregion
		<!-- #include file="Events.inc" -->

<% } %>

	}

<% if (Info.ObjectNamespace.Trim().Length > 0) { %>
}
<% } %>
