<%-- 
Name:
Author: 
Description: 
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="" Inherits="CslaTemplateHelper" Debug="False" Description="Generates a NUnit test base class." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableSwitchable object to create." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>
using System;
using NUnit.Framework;
using System.Configuration;
using System.EnterpriseServices;
using <%=Info.ObjectNamespace%>;


namespace <%=Info.ObjectNamespace%>.UnitTest
{
	public abstract class <%=Info.ObjectName%>TestBase 
	{
		#region properties
		<%
		foreach (Parameter param in GetCriterias(Info)) //Info.GetObjectParameters) 
		{%>
		private <%=param.Property.PropertyType.ToString()%> <%=FormatFieldName(param.Property.Name)%>;
		<%
		}%>
		
		<%
		foreach (Parameter param in GetCriterias(Info)) //Info.GetObjectParameters) 
		{%>
		public <%=param.Property.PropertyType.ToString()%> <%=FormatPascal(param.Property.Name)%>
		{
			get { return <%=FormatFieldName(param.Property.Name)%>; }
			set { <%=FormatFieldName(param.Property.Name)%> = value; }		
		}		
		
		<%		
		}%>
		#endregion
		
		#region NUNit setup and TearDdown
		[SetUp] 
		public void Setup() 
		{
			ServiceConfig config = new ServiceConfig();
			config.Transaction= TransactionOption.RequiresNew;
			ServiceDomain.Enter(config);		
			Init();
		}
		
		
		public virtual void Init()
		{}


		[TearDown]
		public void TearDownTest()
		{
			TearDown();
			if(ContextUtil.IsInTransaction)
			{
				ContextUtil.SetAbort();
			}        
			ServiceDomain.Leave();
		}
		
		
		public virtual void TearDown()
		{}
		#endregion
				
		#region tests		
		[Test]
		public virtual void Get()
		{
			<%=Info.ObjectName%> col = <%=Info.ObjectName%>.Get<%=Info.ObjectName%>(<%
			bool first = true;
			foreach (Parameter param in Info.GetObjectParameters) 
			{
				if (!first) { writer.Write(", "); }
				else { first = false; }
			%><%=FormatPascal(param.Property.Name)%><%
			}			
			%>);
			Assert.IsTrue(col.Count > 0);
		}
				
		
		[Test]
		public virtual void GetById()
		{		
			<%CslaObjectInfo detailItem = FindChildInfo(Info, Info.ItemType);%>
			<%=Info.ObjectName%> col = <%=Info.ObjectName%>.Get<%=Info.ObjectName%>(<%
			first = true;
			foreach (Parameter param in Info.GetObjectParameters) 
			{
				if (!first) { writer.Write(", "); }
				else { first = false; }
			%><%=FormatPascal(param.Property.Name)%><%
			}			
			%>);
			<%=detailItem.ObjectName%> itemGet = col.GetById(<%
			first = true;
			foreach (Parameter param in detailItem.GetObjectParameters) 
			{
				if (!first) { writer.Write(", "); }
				else { first = false; }
			%><%=FormatPascal(param.Property.Name)%><%
			}			
			%>);

			Assert.IsFalse(itemGet == null);
		}
		#endregion

	}
}

<script runat="template">
public ParameterCollection GetCriterias(CslaObjectInfo info)
{
	ParameterCollection list = new ParameterCollection();
	AddUniqueItems(Info.GetObjectParameters, list);
	AddUniqueItems(Info.NewObjectParameters, list);
	CslaObjectInfo childProp = FindChildInfo(Info, Info.ItemType);		
	AddUniqueItems(childProp.GetObjectParameters, list);			
	AddUniqueItems(childProp.NewObjectParameters, list);	
	
	return list;			
}

private void AddUniqueItems(ParameterCollection source, ParameterCollection target)
{
	bool found;
	foreach (Parameter param in source) 
	{
		found = false;
		foreach (Parameter item in target)
		{
			if (param.Property.Name == item.Property.Name)
			{
				found = true;
				break;
			}
		}
		
		if (!found)
		{
			target.Add(param);	
		}
	}	
}
public CslaObjectInfo GetItemType(CslaObjectInfo info)
{
	return  FindChildInfo(Info, Info.ItemType);
}
</script>