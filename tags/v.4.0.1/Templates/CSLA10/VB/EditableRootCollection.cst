<%@ CodeTemplate Inherits="VbCslaTemplateHelper" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Editable Root Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="False" Category="Business Object" Description="Definition of the EditableRootCollection object to create." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="If true, base class is generated as ActiveObjects" %>

<% Dim first As Boolean = True %>
<!-- #include file="Header.inc" -->
Imports System.Data.SqlClient
<% If ActiveObjects = False Then %>Imports CSLA<% else %>Imports ActiveObjects<% End If %>
Imports CSLA.Data
<%= GetUsingStatementsString(Info) %>
<% If Info.ObjectNamespace.Trim.Length > 0 Then %>Namespace <%=Info.ObjectNamespace%><% End If %>
	<!-- #include file="XmlComment.inc" -->
	<%= vbLf %>	<Serializable()> _
	Public MustInherit Class <%=Info.ObjectName%>Base : Inherits <%
			If Info.InheritedType.Type <> String.Empty Then 
				%><%=Info.InheritedType.Type%><% 
			ElseIf Info.InheritedType.ObjectName <> String.Empty Then
				%><%=Info.InheritedType.ObjectName%><% 
			Else 
				%><% If ActiveObjects Then %>Active<% End If %>BusinessCollectionBase<% 
			End If %>
		<!-- #include file="CollectionBusinessProps.inc" -->
	
		<!-- #include file="Contains.inc" -->
		
		<!-- #include file="FindMethods.inc" -->
		<%= vbLf %>#Region " Shared Methods "

		''' <summary>
		''' Factory method. Creates a new <see cref="<%=Info.ObjectName%>" /> collection.
		''' </summary>
		Public Shared Function New<%= Info.ObjectName %>() As <%= Info.ObjectName %>

			<% If Info.NewRoles <> String.Empty Then 
				Dim newRoles() As String = System.Text.RegularExpressions.Regex.Split(Info.NewRoles, ";")
				first = True %>
			If <% For Each role As String In newRoles 
					If Not first Then %> AndAlso _
			   <% 	Else
						first = False 
					End If %>Not System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   Next %> Then
					Throw New System.Security.SecurityException("User not authorized to create a <%=Info.ObjectName%>")
			End If
			
			<% End If %>
			Return New <%= Info.ObjectName %>
			
		End Function
		<!-- #include file="CollectionGetObject.inc" -->
		
		<!-- #include file="Save.inc" -->
		<%= vbLf %>#End Region
		<!-- #include file="Constructor.inc" -->
	
		<!-- #include file="Criteria.inc" -->
		<%= vbLf %>#Region " Data Access "
		<!-- #include file="CollectionDataPortalFetch.inc" -->
		<%= vbLf %>		''' <summary>
		''' Save (delete, add, update) all child objects to database.
		''' </summary>
		<% If Info.TransactionType = TransactionType.EnterpriseServices Then %>
		<Transactional()> _ 
		<% End If %>
		Protected Overrides Sub DataPortal_Update()

			
			<% If Info.TransactionType = TransactionType.ADO Then %>
			Dim cn As New SqlConnection(DB("<%= Info.DbName %>"))
			Dim cmd As New SqlCommand()
			cn.Open()
			Dim tr As SqlTransaction = cn.BeginTransaction()
			Try
			<% End If %>     
				' Loop through the deleted child objects and call their Update methods
				For Each child As <%= Info.ItemType %> In deletedList
					child.Update(<% If Info.TransactionType = TransactionType.ADO %>tr<% End If %>)
				Next
					
				' Now clear the deleted objects from the list
				deletedList.Clear()
				
				' Loop through the objects to add and update, calling the Update Method
				For Each child As <%= Info.ItemType %> In List
					child.Update(<% If Info.TransactionType = TransactionType.ADO %>tr<% End If %>)
				Next
				
		<% If Info.TransactionType = TransactionType.ADO %>
				tr.Commit()

			Catch ex As Exception
					tr.Rollback()
					Throw New Exception(ex.Message, ex.InnerException)
			Finally
				cn.Close()
			End Try
		<%  End If %>
			
		End Sub

		''' <summary>
		''' Not implemented.
		''' </summary>
		Protected Overrides Sub DataPortal_Delete(ByVal criteria As Object)
			'
		End Sub
		
#End Region
	
	End Class
	
<% If Info.ObjectNamespace.Trim.Length > 0 Then %>End Namespace<% End If %>
