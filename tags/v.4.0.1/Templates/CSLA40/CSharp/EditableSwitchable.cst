<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Switchable Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableSwitchable Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if (true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="EditableSwitchableValidate.inc" -->
<%
if (Errors.Length == 0)
{
    bool first = true;
    %><!-- #include file="Header.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
<% if (ActiveObjects) { %>using ActiveObjects;<% } %>
using Csla.Data;
<%= GetUsingStatementsString(Info) %>
<% if (Info.ObjectNamespace.Length > 0) { %>namespace <%= Info.ObjectNamespace %>
{<% } %>
<% bool? firstComment = null; %><!-- #include file="XmlComment.inc" -->
    <% if (GetAttributesString(Info.Attributes) != string.Empty) { %>
    <%= GetAttributesString(Info.Attributes) %>
    <% } %>
    [Serializable]
    <% if (ActiveObjects && Info.SubscribeToChannel.Length > 0) { %>
    [Subscribe("<%= Info.SubscribeToChannel %>")]
    <% } %>
    public partial class <%= Info.ObjectName %> : <%
            if (Info.InheritedType.Type != String.Empty) {
                %><%= Info.InheritedType.Type %><%
            } else if (Info.InheritedType.ObjectName != String.Empty) {
                %><%= Info.InheritedType.ObjectName %><%
             } else {
                %><% if (ActiveObjects) { %>Active<% } %>BusinessBase<%
            } %><<%= Info.ObjectName %>>
    {
<!-- #include file="Implements.inc" -->
<!-- #include file="StaticFields.inc" -->
<!-- #include file="StateFields.inc" -->
<!-- #include file="BusinessProps.inc" -->
<!-- #include file="BusinessRules.inc" -->
<!-- #include file="ObjectOverrides.inc" -->
<% Response.Write(Environment.NewLine); %>
        #region Factory Methods
    <% if (Info.GenerateFactoryMethods) {
            if (Info.DbName.Equals(String.Empty)) {
                Warnings.Append("Make sure you specify a DB name." + Environment.NewLine) ;
            }
    %>
        <!-- #include file="NewObject.inc" -->

        <!-- #include file="GetObject.inc" -->

        <!-- #include file="InternalGetObject.inc" -->

        <!-- #include file="DeleteObject.inc" -->


<% foreach (Criteria c in Info.CriteriaObjects) {
    if (c.CreateOptions.Factory) { %>

        /// <summary>
        /// Factory method. Creates a new <see cref="<%=Info.ObjectName%>"/> child object, based on given parameters.
        /// </summary>
<%
        string strNewParams = string.Empty;
        string strNewCritParams = string.Empty;
        CriteriaPropertyCollection newParams = c.Properties;
        for (int i = 0; i < newParams.Count; i++) {
            if (i > 0) {
                strNewParams += ", ";
                strNewCritParams += ", ";
            }
            strNewParams += string.Concat(GetDataTypeGeneric(newParams[i], newParams[i].PropertyType), " ", FormatCamel(newParams[i].Name));
            strNewCritParams += FormatCamel(newParams[i].Name);
        }
%>
        /// <returns>A reference to the created <see cref="<%=Info.ObjectName%>"/> object.</returns>
        internal static <%= Info.ObjectName %> New<%= Info.ObjectName %><%=c.CreateOptions.FactorySuffix%>Child(<%=  strNewParams %>)
        {
        <%
        if (CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.None &&
            CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.PropertyLevel &&
            Info.GetRoles.Trim() != String.Empty)
        {
            %>
            if (!CanAddObject())
                throw new System.Security.SecurityException("User not authorized to create a <%= Info.ObjectName %>.");

            <%
        }
            if (Info.ObjectType == CslaObjectType.EditableSwitchable) {
                if (strNewCritParams.Length > 0) {
                    strNewCritParams = "true, " + strNewCritParams;
                } else {
                    strNewCritParams = "true";
                }
            }
            %>
            <%= Info.ObjectName %> obj = <% if (ActiveObjects) { %>ActiveObjects.<% } %>DataPortal.Create<%= CurrentUnit.GenerationParams.UseChildDataPortal ? "Child" : "" %><<%= Info.ObjectName %>>(new <%= c.Name %>(<%= strNewCritParams %>));
            obj.MarkAsChild();
            return obj;
        }
<% }

    if (c.GetOptions.Factory) { %>
        /// <summary>
        /// Factory method. New <see cref="<%=Info.ObjectName%>" /> child object is loaded from the database, based on given parameters.
        /// </summary>
        <%
            string strGetParams = string.Empty;
            string strGetCritParams = string.Empty;
            for (int i = 0; i < c.Properties.Count; i++) {
                if (i > 0) {
                    strGetParams += ", ";
                    strGetCritParams += ", ";
                }
                strGetParams += string.Concat(GetDataTypeGeneric(c.Properties[i], c.Properties[i].PropertyType), " ", FormatCamel(c.Properties[i].Name));
                strGetCritParams += FormatCamel(c.Properties[i].Name);
            }
        %>
        internal static <%= Info.ObjectName %> Get<%= Info.ObjectName %><%= c.GetOptions.FactorySuffix %>Child(<%= strGetParams %>)
        {
            <%
            if (CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.None &&
                CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.PropertyLevel &&
                Info.GetRoles.Trim() != String.Empty)
            {
                %>
            if (!CanGetObject())
                throw new System.Security.SecurityException("User not authorized to load a <%= Info.ObjectName %>.");

            <%
            }
            if (strGetCritParams.Trim().Length > 0)
                strGetCritParams = "true, " + strGetCritParams;
            else
                strGetCritParams = "true";
            %>
            return <% if (ActiveObjects) { %>ActiveObjects.<% } %>DataPortal.Fetch<<%= Info.ObjectName %>>(new <%= c.Name %>(<%= strGetCritParams %>));
        }
    <% } %>
<% } %>
    <% } %>
        <!-- #include file="Save.inc" -->
        <% Response.Write(Environment.NewLine); %>
        #endregion
<!-- #include file="Constructor.inc" -->

        <!-- #include file="Criteria.inc" -->

<!-- #include file="SharedAuthorizationMethods.inc" -->
<% Response.Write(Environment.NewLine); %>
<!-- #include file="ConvertProperties.inc" -->
<% if (Info.GenerateDataAccessRegion) { %>
        #region Data Access

<!-- #include file="DataPortalCreate.inc" -->

<!-- #include file="DataPortalFetch.inc" -->

<!-- #include file="DataPortalInsert.inc" -->

<!-- #include file="DataPortalUpdate.inc" -->

<!-- #include file="InternalUpdate.inc" -->

<!-- #include file="DataPortalDelete.inc" -->

        #endregion
<!-- #include file="Events.inc" -->

<% } %>

    }
<% if (Info.ObjectNamespace.Length > 0) { %>
}
<% } %>
<% } %>
