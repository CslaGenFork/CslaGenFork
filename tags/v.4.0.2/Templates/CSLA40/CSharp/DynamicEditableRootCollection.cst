<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Dynamic Root Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the DynamicEditableRootCollection Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="DynamicEditableRootCollectionValidate.asp" -->
<%
if (Errors.Length == 0)
{
    int silverlightLevel = 0;
    bool genOptional = false;
    bool first = true;
    %><!-- #include file="Header.asp" -->
<!-- #include file="Using.asp" -->
<%
    if (Info.ObjectNamespace.Length > 0)
    {
        %>namespace <%= Info.ObjectNamespace %>
{
<%
    }
    bool? firstComment = null;
    %><!-- #include file="XmlComment.asp" -->
    <%
    if (GetAttributesString(Info.Attributes) != string.Empty)
    {
        %>
    <%= GetAttributesString(Info.Attributes) %>
    <%
    }
    %>
    [Serializable]
    public partial class <%= Info.ObjectName %> : <%
    if (Info.InheritedType.Type != String.Empty)
    {
        %><%= Info.InheritedType.Type %><%
    }
    else if (Info.InheritedType.ObjectName != String.Empty)
    {
        %><%= Info.InheritedType.ObjectName %><%
    }
    else
    {
        %>DynamicListBase<%
    }
    %><<%=Info.ItemType %>><!-- #include file="Implements.asp" -->
    {
<!-- #include file="CollectionBusinessProps.asp" -->
<!-- #include file="FindMethods.asp" -->
    <%
    Response.Write(Environment.NewLine);
    if (Info.GenerateFactoryMethods)
    {
        if (Info.DbName.Equals(String.Empty))
        {
            Warnings.Append("Make sure you specify a DB name." + Environment.NewLine);
        }
        %>
        #region Factory Methods<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel, true, false) %>

        /// <summary>Adds a new item to the end of the <see cref="<%=Info.ObjectName%>"/> collection.</summary>
        protected override object AddNewCore()
        {
            <%= Info.ItemType %> item = <%= Info.ItemType %>.New<%= Info.ItemType %>();
            Add(item);
            return item;
        }

        /// <summary>
        /// Factory method. Creates a new <see cref="<%=Info.ObjectName%>"/> collection.
        /// </summary>
        /// <returns>A reference to the created <see cref="<%=Info.ObjectName%>"/> object.</returns>
        public static <%= Info.ObjectName %> New<%= Info.ObjectName %>()
        {
            <%
        if (CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.None &&
            CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.PropertyLevel &&
            Info.GetRoles.Trim() != String.Empty)
        {
            %>
            //if (!CanAddObject())
            //    throw new System.Security.SecurityException("User not authorized to create a <%= Info.ObjectName %>.");aaa

            <%
        }
        %>
            return DataPortal.Create<<%= Info.ObjectName %>>();
        }
<!-- #include file="GetObject.asp" -->
        #endregion
    <%
    }
    %>
<!-- #include file="Save.asp" -->
<!-- #include file="Constructor.asp" -->
<!-- #include file="Criteria.asp" -->
<!-- #include file="SharedAuthorizationMethods.asp" -->
<%
    if (Info.GenerateDataAccessRegion)
    {
        if (!genOptional)
        {
            Response.Write(Environment.NewLine);
        }
        %>
        #region Data Access<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel, true, true) %>
<!-- #include file="CollectionDataPortalFetch.asp" -->
<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel, true, true) %>        #endregion
<!-- #include file="Events.asp" -->

<%
    }
    %>

    }
<%
    if (Info.ObjectNamespace.Length > 0)
    {
        %>
}
<%
    }
}
%>
