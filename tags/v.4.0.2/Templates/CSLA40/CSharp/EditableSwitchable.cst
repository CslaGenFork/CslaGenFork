<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Switchable Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableSwitchable Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="EditableSwitchableValidate.asp" -->
<%
if (Errors.Length == 0)
{
    int silverlightLevel = 0;
    bool genOptional = false;
    bool first = true;
    %><!-- #include file="Header.asp" -->
<!-- #include file="Using.asp" -->
<%
    if (Info.ObjectNamespace.Length > 0)
    {
        %>namespace <%= Info.ObjectNamespace %>
{
<%
    }
    bool? firstComment = null;
    %><!-- #include file="XmlComment.asp" -->
    <%
    if (GetAttributesString(Info.Attributes) != string.Empty)
    {
        %>
    <%= GetAttributesString(Info.Attributes) %>
    <%
    }
    %>
    [Serializable]
    public partial class <%= Info.ObjectName %> : <%
    if (Info.InheritedType.Type != String.Empty)
    {
        %><%= Info.InheritedType.Type %><%
    }
    else if (Info.InheritedType.ObjectName != String.Empty)
    {
        %><%= Info.InheritedType.ObjectName %><%
    }
    else
    {
        %>BusinessBase<<%=Info.ObjectName %>><%
    }
    %><!-- #include file="Implements.asp" -->
    {
<!-- #include file="StaticFields.asp" -->
<!-- #include file="StateFields.asp" -->
<!-- #include file="BusinessProps.asp" -->
<!-- #include file="ObjectOverrides.asp" -->
    <%
    Response.Write(Environment.NewLine);
    if (Info.GenerateFactoryMethods)
    {
        if (Info.DbName.Equals(String.Empty))
        {
            Warnings.Append("Make sure you specify a DB name." + Environment.NewLine) ;
        }
        %>
        #region Factory Methods<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel, true, false) %>
<!-- #include file="NewObject.asp" -->
<!-- #include file="GetObject.asp" -->
<!-- #include file="InternalGetObject.asp" -->
<!-- #include file="DeleteObject.asp" -->
<%
        foreach (Criteria c in GetCriteriaObjects(Info))
        {
            if (c.CreateOptions.Factory)
            {
                %>

        /// <summary>
        /// Factory method. Creates a new <see cref="<%=Info.ObjectName%>"/> child object<%= c.Properties.Count > 0 ? ", based on given parameters" : "" %>.
        /// </summary>
<%
                string strNewParams = string.Empty;
                string strNewCritParams = string.Empty;
                CriteriaPropertyCollection newParams = c.Properties;
                for (int i = 0; i < newParams.Count; i++)
                {
                    if (i > 0)
                    {
                        strNewParams += ", ";
                        strNewCritParams += ", ";
                    }
                    strNewParams += string.Concat(GetDataTypeGeneric(newParams[i], newParams[i].PropertyType), " ", FormatCamel(newParams[i].Name));
                    strNewCritParams += FormatCamel(newParams[i].Name);
                }
%>
        /// <returns>A reference to the created <see cref="<%=Info.ObjectName%>"/> object.</returns>
        internal static <%= Info.ObjectName %> New<%= Info.ObjectName %><%=c.CreateOptions.FactorySuffix%>Child(<%=  strNewParams %>)
        {
        <%
                if (CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.None &&
                    CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.PropertyLevel &&
                    Info.GetRoles.Trim() != String.Empty)
                {
                    %>
            if (!CanAddObject())
                throw new System.Security.SecurityException("User not authorized to create a <%= Info.ObjectName %>.");

            <%
                }
                if (Info.ObjectType == CslaObjectType.EditableSwitchable)
                {
                    if (strNewCritParams.Length > 0)
                    {
                        strNewCritParams = "true, " + strNewCritParams;
                    }
                    else
                    {
                        strNewCritParams = "true";
                    }
                }
            %>
            <%= Info.ObjectName %> obj = DataPortal.CreateChild<<%= Info.ObjectName %>>(new <%= c.Name %>(<%= strNewCritParams %>));
            obj.MarkAsChild();
            return obj;
        }
<%
            }

            if (c.GetOptions.Factory)
            {
                %>

        /// <summary>
        /// Factory method. Loads an existing <see cref="<%=Info.ObjectName%>" /> child object from the database<%= c.Properties.Count > 0 ? ", based on given parameters" : "" %>.
        /// </summary>
        <%
                string strGetParams = string.Empty;
                string strGetCritParams = string.Empty;
                for (int i = 0; i < c.Properties.Count; i++)
                {
                    if (i > 0)
                    {
                        strGetParams += ", ";
                        strGetCritParams += ", ";
                    }
                    strGetParams += string.Concat(GetDataTypeGeneric(c.Properties[i], c.Properties[i].PropertyType), " ", FormatCamel(c.Properties[i].Name));
                    strGetCritParams += FormatCamel(c.Properties[i].Name);
                }
        %>
        internal static <%= Info.ObjectName %> Get<%= Info.ObjectName %><%= c.GetOptions.FactorySuffix %>Child(<%= strGetParams %>)
        {
            <%
            if (CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.None &&
                CurrentUnit.GenerationParams.GenerateAuthorization != Authorization.PropertyLevel &&
                Info.GetRoles.Trim() != String.Empty)
            {
                %>
            if (!CanGetObject())
                throw new System.Security.SecurityException("User not authorized to load a <%= Info.ObjectName %>.");

            <%
            }
            if (strGetCritParams.Trim().Length > 0)
                strGetCritParams = "true, " + strGetCritParams;
            else
                strGetCritParams = "true";
            %>
            return DataPortal.Fetch<<%= Info.ObjectName %>>(new <%= c.Name %>(<%= strGetCritParams %>));
        }
    <%
            }
        }
    }
    %>
<!-- #include file="Save.asp" -->
        <% Response.Write(Environment.NewLine); %>
        #endregion
<!-- #include file="Constructor.asp" -->
<!-- #include file="Criteria.asp" -->
<!-- #include file="SharedAuthorizationMethods.asp" -->
<!-- #include file="ConvertProperties.asp" -->
<%
    if (Info.GenerateDataAccessRegion)~
    {
        if (!genOptional)
        {
            Response.Write(Environment.NewLine);
        }
        %>
        #region Data Access<%= IfSilverlight (Conditional.NotSilverlight, 0, ref silverlightLevel, true, false) %>
<!-- #include file="DataPortalCreate.asp" -->
<!-- #include file="DataPortalFetch.asp" -->
<!-- #include file="DataPortalInsert.asp" -->
<!-- #include file="DataPortalUpdate.asp" -->
<!-- #include file="InternalUpdate.asp" -->
<%
        if (Info.GenerateDataPortalInsert || Info.GenerateDataPortalUpdate)
        {
            %>
<!-- #include file="DoInsertUpdate.asp" -->
<%
        }
        %>
<!-- #include file="DataPortalDelete.asp" -->
<%= IfSilverlight (Conditional.Else, 0, ref silverlightLevel, true, true) %><!-- #include file="DataPortalCreateSilverlight.asp" -->
<%= IfSilverlight (Conditional.End, 0, ref silverlightLevel, true, true) %>        #endregion
<!-- #include file="Events.asp" -->
<%
    }
    %>

    }
<%
    if (Info.ObjectNamespace.Length > 0)
    {
        %>
}
<%
    }
}
%>
