<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="C#" TargetLanguage="C#" Description="Generates a CSLA ReadOnly Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the ReadOnlyObject to create." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>

<% bool first = true; %>
<!-- #include file="Header.inc" -->
using CSLA;
using CSLA.Data;
using System.Data;
using System.Data.SqlClient;
using System;
<%= GetUsingStatementsString(Info) %>
namespace <%=Info.ObjectNamespace%>
{
	<!-- #include file="XmlComment.inc" -->
	<%= "\r\n" %>	[Serializable]
	public abstract class <%=Info.ObjectName%>Base : <%
		if (Info.InheritedType.Type != String.Empty) {
			%><%=Info.InheritedType.Type%><%
		} else if (Info.InheritedType.ObjectName != String.Empty) {
			%><%=Info.InheritedType.ObjectName%><%
		} else {
			%>CSLA.BusinessBase<% 
		} %>
	{
		<!-- #include file="StateFields.inc" -->

		<!-- #include file="BusinessProps.inc" -->
		
		<!-- #include file="ObjectOverrides.inc" -->
		<%= "\r\n" %>		#region Shared Methods
		<!-- #include file="GetObject.inc" -->
		
		
		
		/// <summary>
		/// Factory method. New <see cref="<%=Info.ObjectName%>" /> object is created as child object and loaded from the given ISafeDataReader.
		/// </summary>
		internal static <%=Info.ObjectName%> Get<%=Info.ObjectName%>(SafeDataReader dr)
		{
			<% if (Info.GetRoles != String.Empty) {
				string[] getRoles = System.Text.RegularExpressions.Regex.Split(Info.GetRoles, ";");
				first = true; %>
			if (<% foreach (string role in getRoles) {
					if (!first) { %> &&
			    <% } else {
						first = false;
					} %>!System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   } %>) {
					throw new System.Security.SecurityException("User not authorized to remove a <%=Info.ObjectName%>");
			}
			<% } %>
			<%=Info.ObjectName%> <%=FormatCamel(Info.ObjectName)%> = new <%=Info.ObjectName%>();
			<%=FormatCamel(Info.ObjectName)%>.Fetch(dr);
			return (<%=FormatCamel(Info.ObjectName)%>);
		}		
		<%= "\r\n" %>		#endregion
		<!-- #include file="Constructor.inc"  -->
		
		<!-- #include file="Criteria.inc"  -->
		<%= "\r\n" %>		#region Data Access
		<!-- #include file="DataPortalFetch.inc"  -->
		
		<!-- #include file="InternalFetch.inc" -->
		
		
		/// <summary>
		/// Retrieve extra/custom information for the object. 
		/// </summary>
		protected virtual void ExtraFetchProcessing(SafeDataReader dr)
		{
			
		}	
		<%= "\r\n" %>		#endregion
		
	}
}
