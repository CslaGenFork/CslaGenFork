<%@ CodeTemplate Inherits="VbCslaTemplateHelper" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Editable Switchable Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="False" Category="Business Object" Description="Definition of the EditableSwitchable object to create." %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="If true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>

<% Dim first As Boolean = True %>
<!-- #include file="Header.inc" -->
Imports System.Data.SqlClient
<% If ActiveObjects = False Then %>Imports CSLA<% else %>Imports ActiveObjects<% End If %>
Imports CSLA.Data
<%= GetUsingStatementsString(Info) %>
<% If Info.ObjectNamespace.Trim.Length > 0 Then %>Namespace <%=Info.ObjectNamespace%><% End If %>
	<!-- #include file="XmlComment.inc" -->
	<%= vbLf %>	<Serializable()> _
	Public MustInherit Class <%=Info.ObjectName%>Base : Inherits <%
			If Info.InheritedType.Type <> String.Empty Then 
				%><%=Info.InheritedType.Type%><% 
			ElseIf Info.InheritedType.ObjectName <> String.Empty Then
				%><%=Info.InheritedType.ObjectName%><% 
			Else 
				%><% If ActiveObjects Then %>Active<% End If %>BusinessBase<% 
			End If %>
		<!-- #include file="StateFields.inc" -->
		
		<!-- #include file="BusinessProps.inc" -->
		
		<!-- #include file="BusinessRules.inc" -->
		
		<!-- #include file="ObjectOverrides.inc" -->
		<%= vbLf %>#Region " Shared Methods "
		<!-- #include file="NewObject.inc" -->
		
		<!-- #include file="GetObject.inc" -->
		
		<!-- #include file="DeleteObject.inc" -->
		<%= vbLf %>		''' <summary>
		''' Factory method. New <see cref="<%=Info.ObjectName%>" /> object is created as a child object, based on given parameters.
		''' </summary>
		Friend Shared Function New<%=Info.ObjectName%>Child(<%
		first = True
		For Each param As Parameter In Info.NewObjectParameters
			If Not first Then 
				writer.Write(", ")
			Else 
				first = False
			End If
		%>ByVal <%=FormatCamel(param.Property.Name)%> As <%=param.Property.PropertyType.ToString()%><%
		Next %>) As <%=Info.ObjectName%>
		
			<% If Info.NewRoles <> String.Empty Then 
				Dim newRoles() As String = System.Text.RegularExpressions.Regex.Split(Info.NewRoles, ";")
				first = True %>
			If <% For Each role As String In newRoles 
					If Not first Then %> AndAlso _
			   <% 	Else
						first = False 
					End If %>Not System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   Next %> Then
					Throw New System.Security.SecurityException("User not authorized to create a <%=Info.ObjectName%>")
			End If
			
			<% End If %>
			Dim <%=FormatCamel(Info.ObjectName)%> As New <%=Info.ObjectName%>
			<% For Each param As Parameter In Info.NewObjectParameters%>
			<%=FormatCamel(Info.ObjectName)%>.<%=FormatFieldName(param.Property.Name)%> = <%=FormatCamel(param.Property.Name)%>
			<% Next %>
			<%=FormatCamel(Info.ObjectName)%>.MarkAsChild()
			Return <%=FormatCamel(Info.ObjectName)%>
			
		End Function
		
		<% If Not Info.LazyLoad Then %>
		''' <summary>
		''' Factory method. New <see cref="<%=Info.ObjectName%>" /> object is created as child object and loaded from the given SafeDataReader.
		''' </summary>
		Friend Shared Function Get<%=Info.ObjectName%>Child(ByVal dr As SafeDataReader) As <%=Info.ObjectName%>
		
			<% If Info.GetRoles <> String.Empty Then 
				Dim getRoles() As String = System.Text.RegularExpressions.Regex.Split(Info.GetRoles, ";")
				first = True %>
			If <% For Each role As String In getRoles 
					If Not first Then %> AndAlso _
			   <% 	Else
						first = False 
					End If %>Not System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   Next %> Then
					Throw New System.Security.SecurityException("User not authorized to load a <%=Info.ObjectName%>")
			End If
			
			<% End If %>
			Dim <%=FormatCamel(Info.ObjectName)%> As New <%=Info.ObjectName%>()
			<%=FormatCamel(Info.ObjectName)%>.Fetch(dr)
			Return <%=FormatCamel(Info.ObjectName)%>
			
		End Function
		<% Else %>
		''' <summary>
		''' Factory method. New <see cref="<%=Info.ObjectName%>" /> object is created as a child object and loaded from the database, based on given parameters.
		''' </summary>
		Friend Shared Function Get<%=Info.ObjectName%>Child(<%
		first = True
		For Each param As Parameter In Info.GetObjectParameters
			If Not first Then
				writer.Write(", ")
			Else
				first = False
			End If
		%>ByVal <%=FormatCamel(param.Property.Name)%> As <%=param.Property.PropertyType.ToString()%><%
		Next %>) As <%=Info.ObjectName%>
		
			<% If Info.GetRoles <> String.Empty Then 
				Dim getRoles() As String = System.Text.RegularExpressions.Regex.Split(Info.GetRoles, ";")
				first = True %>
			If <% For Each role As String In getRoles 
					If Not first Then %> AndAlso _
			   <% 	Else
						first = False 
					End If %>Not System.Threading.Thread.CurrentPrincipal.IsInRole("<%=role%>")<%
				   Next %> Then
					Throw New System.Security.SecurityException("User not authorized to load a <%=Info.ObjectName%>")
			End If
			
			<% End If %>
			<% If Info.GetObjectParameters.Count > 0 Then
				Dim crit As Criteria = Info.GetObjectParameters(0).Criteria
				Dim critVar As String = FormatCamel(crit.Name)
			%>
			Dim <%=critVar%> As New <%=crit.Name%>(True)
			<% For Each param As Parameter In Info.GetObjectParameters %>
			<%=critVar%>.<%=param.Property.Name%> = <%=FormatCamel(param.Property.Name)%>
			<% Next %>
			
			Return DirectCast(DataPortal.Fetch(<%=critVar%>), <%=Info.ObjectName%>)
			<% ElseIf Info.GetObjectCriteriaType Is Nothing = False Then %>
			Return DirectCast(DataPortal.Fetch(New <%=Info.GetObjectCriteriaType.Name%>), <%=Info.ObjectName%>)
			<% Else %>
			Return DataPortal.Fetch()
			<% End If %>
			
		End Function
		<% End If %>
		<!-- #include file="Save.inc" -->
		<%= vbLf %>#End Region
		<!-- #include file="Constructor.inc" -->
		<%= vbLf %>#Region " Criteria "
		<% For Each crit As Criteria In Info.CriteriaObjects %>
		
		<Serializable()> _
		Private Class <%=crit.Name%> : Inherits CSLA.CriteriaBase
		
			Public IsChild As Boolean
			<% For Each prop As Metadata.Property In crit.Properties %>
			Public <%=FormatPascal(prop.Name)%> As <%=prop.PropertyType.ToString()%>
			<% Next %>
			
			Public Sub New(ByVal isChild As Boolean) 
				MyBase.New (GetType(<%=Info.ObjectName%>))
				Me.IsChild = isChild
			End Sub
		
		End Class
		<% Next %>
		
#End Region
		
#Region " Data Access "
		<!-- #include file="DataPortalFetch.inc" -->
		<!-- #include file="DataPortalUpdate.inc" -->		
		
		<!-- #include file="InternalUpdate.inc" -->	
		
		<!-- #include file="DataPortalDelete.inc" -->
		
		<!-- #include file="DataPortalCreate.inc" -->
		<% If Not Info.LazyLoad Then %>
		<!-- #include file="InternalFetch.inc" -->
		<% End If %>
		
#End Region
	
	End Class

<% If Info.ObjectNamespace.Trim.Length > 0 Then %>End Namespace<% End If %>
