<%@ CodeTemplate Inherits="VbCslaTemplateHelper" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Inherited Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="False" Category="Business Object" Description="Definition of the CSLA object to inherit from." %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="If true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>

<% If ActiveObjects Then %>Imports ActiveObjects<% End If %>
<!-- #include file="Header.inc" -->

<% If Info.ObjectNamespace.Trim.Length > 0 Then %>Namespace <%=Info.ObjectNamespace%><% End If %>

	''' <summary>
	''' <%= Info.ObjectName %> business object.
	''' </summary>
	''' <remarks>
	''' 
	''' </remarks>
	<Serializable()> _
	Public Class <%= Info.ObjectName %> : Inherits <%= Info.ObjectName %>Base

		<% If ActiveObjects Then %>
		<% If Info.ObjectType = CslaObjectType.ReadOnlyCollection Then %>
		#Region " ISubscriber interface (overriden)"
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	'''''' This is just an example of what an OnChannelNotification sub should look like
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    '~ Protected Overrides Sub OnChannelNotification(ByVal sender As Observer.IPublisher, ByVal ChannelName As String, ByVal e As Observer.ObserverEvent)
        '~ Select Case e.Name
            '~ Case BusinessEvents.Added
                '~ Dim obj As ObjectType = DirectCast(e.Value, ObjectType) ''replace ObjectType by the object you are listening
                '~ If Not obj Is Nothing Then
                    '~ Dim info As Info
                    '~ ExtractInfo(info, obj)
                    '~ innerlist.Add(info)
                    '~ Notify(BusinessEvents.Added, info)
                '~ End If
            '~ Case BusinessEvents.Updated
                '~ Dim obj As ObjectType = DirectCast(e.Value, ObjectType) ''replace ObjectType by the object you are listening
                '~ If Not obj Is Nothing Then
                    '~ Dim info As Info
                    '~ For i As Integer = 0 To InnerList.Count - 1
                        '~ info = DirectCast(InnerList(i), Info)
                        '~ If info.IDObjectType.Equals(obj.ID) Then
                            '~ ExtractInfo(info, obj)
                            '~ InnerList(i) = info
                            '~ Notify(BusinessEvents.Updated, info)
                            '~ Exit For
                        '~ End If
                    '~ Next
                    '~ obj = Nothing
                    '~ GC.Collect()
                '~ End If
            '~ Case BusinessEvents.Deleted
                '~ Dim ID As Guid = DirectCast(e.Value, Guid)
                '~ Dim info As Info
                '~ For i As Integer = InnerList.Count - 1 To 0 Step -1
                    '~ info = CType(InnerList(i), Info)
                    '~ If info.IDObjectType.Equals(ID) Then
                        '~ InnerList.Remove(info)
                        '~ Notify(BusinessEvents.Deleted, info)
                        '~ Exit For
                    '~ End If
                '~ Next
        '~ End Select
    '~ End Sub

    '~ ' method to extract listview data from a real Project object
    '~ Private Sub ExtractInfo(ByRef info As Info, ByVal obj As ObjectType)
        '~ With info
		<% For Each prop As ChildProperty In Info.GetMyChildProperties() %>
            '~ .<%=FormatPascal(prop.Name)%>  = obj.<%=FormatPascal(prop.Name)%> 
		<% Next %>
        '~ End With
    '~ End Sub

#End Region
		
		<% else %>
		<% If Info.ObjectType <> CslaObjectType.EditableChildCollection AndAlso Info.ObjectType <> CslaObjectType.EditableRootCollection Then %>
		'This method makes observer objects aware of the changes that <%= Info.ObjectName %> suffers
		Protected Overrides Sub PublishEvent(ByVal EventName as String, ByVal Value as object)
			'SafePublish("<%= Info.ObjectName %>", EventName, Value)
		End Sub
		<% End If %>		
		<% End If %>		
		<% End If %>		

	End Class

<% If Info.ObjectNamespace.Trim.Length > 0 Then %>End Namespace<% End If %>
