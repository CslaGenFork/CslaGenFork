<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="C#" TargetLanguage="C#" Description="Generates a CSLA Editable Child Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableChildCollection object to create." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>

<% bool first = true; %>
<!-- #include file="Header.inc" -->
using CSLA;
using CSLA.Data;
using System.Data;
using System.Data.SqlClient;
using System;
<%= GetUsingStatementsString(Info) %>
namespace <%=Info.ObjectNamespace%>
{
	<!-- #include file="XmlComment.inc" -->
	<%= "\r\n" %>	[Serializable]
	public abstract class <%=Info.ObjectName%>Base : BusinessCollectionBase
	{
		<!-- #include file="CollectionBusinessProps.inc" -->

		<!-- #include file="Contains.inc" -->
		
		<!-- #include file="FindMethods.inc" -->
		<%= "\r\n" %>		#region Shared Methods
		
		/// <summary>
		/// Factory method. Creates a new <see cref="<%=Info.ItemType%>" /> collection.
		/// </summary>
		internal static <%= Info.ObjectName %> New<%= Info.ObjectName %>()
		{
			return(new <%= Info.ObjectName %>());

		}
		<% if (!Info.LazyLoad) { %>
		<!-- #include file=InternalGetObject.inc" -->
		<% } else { %>
		<!-- #include file=CollectionGetObject.inc" -->
		<% } %>
		<!-- #include file="CollectionSave.inc" -->
		<%= "\r\n" %>		#endregion 
		<!-- #include file="Constructor.inc"  -->

		<!-- #include file="Criteria.inc" -->
		<%= "\r\n" %>		#region Data Access
		
		<% if (!Info.LazyLoad) { 
			
			bool isSwitchable = false;
			CslaObjectInfo childInfo = FindChildInfo(Info, Info.ItemType);
			if (childInfo.ObjectType == CslaObjectType.EditableSwitchable) { isSwitchable = true; } %>
		/// <summary>
		/// Load all <see cref="<%=Info.ObjectName%>" /> collection items from given SafeDataReader
		/// </summary>
		private void Fetch(SafeDataReader dr)
		{
			while(dr.Read())
			{
				<%= Info.ItemType %> <%= FormatCamel(Info.ItemType) %> = <%= Info.ItemType %>.Get<%= Info.ItemType %><% if (isSwitchable) {%>Child<%}%>(dr);
				List.Add(<%=FormatCamel(Info.ItemType)%>);			
			}
		}
		<% } else { %>
		<!-- #include file="CollectionDataPortalFetch.inc" -->
		<% } %>
		
		/// <summary>
		/// Update all changes made on <see cref="<%=Info.ObjectName%>" /> object's children to the underlying database.
		/// </summary>
		<% if(Info.TransactionType == TransactionType.EnterpriseServices) {%>[Transactional] 
		<%}%>internal void Update(<%if(Info.TransactionType == TransactionType.ADO) {%>SqlTransaction tr, <% } %><%= Info.ParentType %> parent)
		{
			//Loop through the deleted child objects and call their Update methods
			foreach(<%= Info.ItemType %> child in deletedList)
			{
				child.Update(<%if(Info.TransactionType == TransactionType.ADO) {%>tr, <% }%>parent);
			}
			
			//Now clear the deleted objects from the list
			deletedList.Clear();
			
			//Loop through the objects to add and update, calling the Update Method
			foreach(<%= Info.ItemType %> child in List)
			{
				child.Update(<%if(Info.TransactionType == TransactionType.ADO) {%>tr, <% }%>parent);
			} 
		}
		
		#endregion

	}
}
