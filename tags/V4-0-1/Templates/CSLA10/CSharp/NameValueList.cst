<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a CSLA NameValueList Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the NameValueList object to create." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="System.Text" %>
<!-- #include file="Header.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using CSLA;
using CSLA.Data;

namespace <%=Info.ObjectNamespace%>
{
	<!-- #include file="XmlComment.inc" -->
	<%= "\r\n" %>	[Serializable]
	public class <%=Info.ObjectName%> : NameValueList
	{
		#region Constructors
		
		protected <%=Info.ObjectName%>()
		{
			// Prevent direct creation
		}
		
		protected <%=Info.ObjectName%>(System.Runtime.Serialization.SerializationInfo info,
									 System.Runtime.Serialization.StreamingContext context) : base (info,context)
		{
		}
		
		#endregion
	
		#region Shared Methods
		
		public static <%=Info.ObjectName%> Get<%=Info.ObjectName%>()
		{
			return (<%=Info.ObjectName%>)DataPortal.Fetch(new <%=Info.GetObjectCriteriaType.Name%>());
		}
		
		#endregion
		
		#region Criteria
		<% foreach (Criteria crit in Info.CriteriaObjects) { %>
		
		[Serializable]
		private class <%=crit.Name%> : CSLA.CriteriaBase
		{
			<% foreach (Property prop in crit.Properties) {%>
			public <%=prop.PropertyType.ToString()%> <%=FormatPascal(prop.Name)%>;
			<% } %>
			public <%=crit.Name%>() : base(typeof(<%=Info.ObjectName%>))
			{
			}
		}
		<% } %>
		
		#endregion
		
		#region Data Access
		
		protected override void DataPortal_Fetch(object criteria)
		{
			<% if (Info.NameIsGuid) { %>
			SimpleFetchGUID("<%=Info.DbName%>", "<%=Info.NameValueTable%>", "<%=Info.NameColumn%>", "<%=Info.ValueColumn%>");
			<% } else { %>
			SimpleFetch("<%=Info.DbName%>", "<%=Info.NameValueTable%>", "<%=Info.NameColumn%>", "<%=Info.ValueColumn%>");
			<% } %>
		}
		
		#endregion
	}
} 

<%-- ******************************************************************************************************************* --%>

<script runat="template">

private string FormatFieldName(string name)
{
	return "_" + FormatCamel(name);
}

private string FormatCamel(string name)
{
	if (name.Length > 0)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append(Char.ToLower(name[0]));
		if (name.Length > 1)
		{
			sb.Append(name.Substring(1));
		}
		return sb.ToString();
	}
	return String.Empty;
}

private string FormatPascal(string name)
{
	if (name.Length > 0)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append(Char.ToUpper(name[0]));
		if (name.Length > 1)
		{
			sb.Append(name.Substring(1));
		}
		return sb.ToString();
	}
	return String.Empty;
}

</script>