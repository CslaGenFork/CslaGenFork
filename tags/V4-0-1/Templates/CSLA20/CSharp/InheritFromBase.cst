<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Inherited Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the CSLA Object to inherit from." %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if ( true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>

<% if (ActiveObjects) { %>using ActiveObjects;
<% } %><!-- #include file="Header.inc" -->
<% Response.Write("\r\n"); %>
using System;

<% if (Info.ObjectNamespace.Trim().Length > 0) { %>namespace <%=Info.ObjectNamespace%>
{
<% } %>
    public partial class <%= Info.ObjectName %>
    {
<%        System.Collections.Generic.List<string> eventList = new System.Collections.Generic.List<string>();
        if (Info.HasGetCriteria)
            eventList.AddRange(new string[] {"FetchPre", "FetchPost"});
        if (Info.ObjectType != CslaObjectType.ReadOnlyObject && Info.ObjectType != CslaObjectType.NameValueList && Info.ObjectType.ToString().IndexOf("Collection") == -1)
            eventList.AddRange(new string[] {"UpdateStart", "UpdatePre", "UpdatePost", "InsertStart", "InsertPre", "InsertPost", "DeletePre", "DeletePost"});
        if (Info.ObjectType.ToString().IndexOf("Collection") == -1 && Info.ObjectType != CslaObjectType.NameValueList)
            eventList.Add("FetchRead");
        if (Info.ObjectType == CslaObjectType.EditableRoot || Info.ObjectType == CslaObjectType.DynamicEditableRoot || Info.ObjectType == CslaObjectType.EditableChild || Info.ObjectType == CslaObjectType.EditableSwitchable)
           eventList.Add("Create");
        if (eventList.Count > 0) { %>

        #region Initialize

        /// <summary>
        /// Set up event handlers so user code can respond to events raised by generated code.
        /// </summary>
        <% if (Info.ObjectType == CslaObjectType.DynamicEditableRootCollection ) { %>
        protected void Initialize()
        {
            // EditableRootListBase doesn't define the Initialize() signature.
            // We can't override Initialize and must force it to run on DataPortal_Fetch
            //base.Initialize();
            AddHandlers();
        }
        <% } else { %>
        protected override void Initialize()
        {
            base.Initialize();
            AddHandlers();
        }
        <% } %>

        /// <summary>
        /// Set up event handlers so user code can respond to events raised by generated code.
        /// </summary>
        /// <remarks>Event handler</remarks>
        <% if (Info.ObjectType == CslaObjectType.ReadOnlyCollection || Info.ObjectType == CslaObjectType.NameValueList) { %>
        protected virtual void OnDeserialized(System.Runtime.Serialization.StreamingContext context)
        {
            // missing base OnDeserialized on this stereotype
            AddHandlers();
        }

        [System.Runtime.Serialization.OnDeserialized]
        private void OnDeserializedHandler(System.Runtime.Serialization.StreamingContext context)
        {
            OnDeserialized(context);
        }
        <% } else { %>
        protected override void OnDeserialized(System.Runtime.Serialization.StreamingContext context)
        {
            base.OnDeserialized(context);
            AddHandlers();
        }
        <% } %>

        private void AddHandlers()
        {
            <% foreach (string strEvent in eventList) { %>
            //this.<%=strEvent%> += new EventHandler(On<%=strEvent%>);
            <% } %>
        }
        
        #endregion

        #region EventHandlers

        <% foreach (string strEvent in eventList) { %>
        //private void On<%=strEvent%>(object sender, EventArgs e)
        //{
        //    throw new System.Exception("The method or operation is not implemented.");
        //}

        <% } %>
        #endregion

        <% } %>
        <% if (ActiveObjects) { %>
        <% if (Info.ObjectType == CslaObjectType.ReadOnlyCollection || Info.ObjectType == CslaObjectType.ReadOnlyObject) { %>
        #region ISubscriber interface (overriden)
        <% if (Info.ObjectType == CslaObjectType.ReadOnlyCollection) {
                CslaObjectInfo childInfo = FindChildInfo(Info, Info.ItemType);
        %>

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////''
    ////// This is just an example of what an OnChannelNotification sub should look like
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////''
    /*
    protected override void OnChannelNotification(Observer.IPublisher sender, String ChannelName, Observer.ObserverEvent e)
    {
        switch(e.Name)
        {
            case BusinessEvents.Added:
                ObjectType obj = (ObjectType) e.Value; // replace ObjectType by the Object you are listening
                if (obj != null) {
                    <%=Info.ItemType%> info;
                    info.ExtractInfo(obj);
                    Item.Add(info);
                    Notify(BusinessEvents.Added, info);
                }
             break;

            case BusinessEvents.Updated:
                ObjectType obj = (ObjectType) e.Value; // replace ObjectType by the Object you are listening
                if (obj != null) {
                    <%=Info.ItemType%> info;
                for (int i = 0; i < Item.Count; i++) {
                        info = Item[i];
                        if (info.IDObjectType.Equals(obj.ID)) {
                            ExtractInfo(info, obj);
                            Item[i] = info;
                            Notify(BusinessEvents.Updated, info);
                            break;
                    }
                    }
                    obj = null;
                    GC.Collect();
                }
           break;

            case BusinessEvents.Deleted:
              Guid ID = (Guid) e.Value;
                <%=Info.ItemType%> info;
            for (int i = Item.Count - 1; i >= 0 ; i--)    {
                info = this[i];
                if (info.IDObjectType.Equals(ID)) {
                    Item.Remove(info);
                    Notify(BusinessEvents.Deleted, info);
                    break;
                }
            }
            break;
        }
    }
    */
    <% } %>
    <% if (Info.ObjectType == CslaObjectType.ReadOnlyObject) { %>
        //internal void ExtractInfo(ObjectType obj)
        {
        <% foreach (ValueProperty prop in Info.GetAllValueProperties()) { %>
            //this.<%=FormatPascal(prop.Name)%> = obj.<%=FormatPascal(prop.Name)%>;
        <% } %>
        //}

    <% } %>
        #endregion
<%      } %>
<%  } %>
    }
<% if (Info.ObjectNamespace.Trim().Length > 0) { %>
}
<% } %>
