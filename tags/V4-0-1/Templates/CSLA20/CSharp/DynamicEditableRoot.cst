<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Dynamic Root Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the DynamicEditableRoot Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if ( true, base class is generated as ActiveObjects" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Windows.Forms" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="System.Text" %>

<!-- #include file="DynamicEditableRootValidate.inc" -->
<% if (Errors.Length == 0) { bool first = true; %><!-- #include file="Header.inc" -->
<% Response.Write("\r\n"); %>
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
<% if (ActiveObjects) { %>using ActiveObjects;<% } %>
using Csla.Data;
<%= GetUsingStatementsString(Info) %>
<% if (Info.ObjectNamespace.Trim().Length > 0 ) { %>namespace <%=Info.ObjectNamespace%>
{<%} %>
<!-- #include file="XmlComment.inc" -->
    <% if (GetAttributesString(Info.Attributes) != string.Empty) { %>
    <%= GetAttributesString(Info.Attributes) %>
    <% } %>
    [Serializable()]
    <% if (ActiveObjects && Info.SubscribeToChannel.Length > 0) { %>
    [Subscribe("<%= Info.SubscribeToChannel %>")]
    <% } %>
    public partial class <%=Info.ObjectName%> : <%
            if (Info.InheritedType.Type != String.Empty) {
                %><%=Info.InheritedType.Type%><%
            } else if (Info.InheritedType.ObjectName != String.Empty) {
                %><%=Info.InheritedType.ObjectName%><%
             } else {
                %><% if (ActiveObjects) { %>Active<% } %>BusinessBase<%
            } %><<%=Info.ObjectName%>>
    {
<!-- #include file="Implements.inc" -->
<!-- #include file="StaticFields.inc" -->
<!-- #include file="StateFields.inc" -->
<!-- #include file="BusinessProps.inc" -->
<!-- #include file="BusinessRules.inc" -->
<!-- #include file="ObjectOverrides.inc" -->
<% Response.Write("\r\n"); %>
        #region Factory Methods
    <% if (Info.GenerateFactoryMethods) {
            if (Info.DbName.Trim().Equals(String.Empty)) {
                Warnings.Append("Make sure you specify a DB name." + Environment.NewLine) ;
            }
    %>
        <!-- #include file="NewObject.inc" -->

        <!-- #include file="GetObject.inc" -->

        <!-- #include file="InternalGetObject.inc" -->

    <% } %>
        <!-- #include file="Save.inc" -->
<% Response.Write("\r\n"); %>
        #endregion
<!-- #include file="Constructor.inc" -->

        <!-- #include file="Criteria.inc" -->

<!-- #include file="SharedAuthorizationMethods.inc" -->
<% Response.Write("\r\n"); %>
<!-- #include file="ConvertProperties.inc" -->
<% if (Info.GenerateDataAccessRegion) { %>
        #region Data Access

<!-- #include file="DataPortalCreate.inc" -->

<!-- #include file="DataPortalFetch.inc" -->

<!-- #include file="DataPortalInsert.inc" -->

<!-- #include file="DataPortalUpdate.inc" -->

<!-- #include file="InternalUpdate.inc" -->

<!-- #include file="DataPortalDelete.inc" -->

        #endregion
<!-- #include file="Events.inc" -->

<% } %>

    }
<% if (Info.ObjectNamespace.Trim().Length > 0) { %>
}
<% } %>
<% } %>
