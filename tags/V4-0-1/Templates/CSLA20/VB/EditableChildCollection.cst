<%@ CodeTemplate Inherits="VbCslaTemplateHelper" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Editable Child Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="False" Category="Business Object" Description="Definition of the EditableChildCollection object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="False" Category="Options" Description="Allows the template to return errors to master.cst" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="If true, base class is generated as ActiveObjects" %>

<% Dim first As Boolean = True %>
<!-- #include file="Header.inc" -->
Imports System.Data.SqlClient
Imports CSLA
<% If ActiveObjects Then %>Imports ActiveObjects<% End If %>
Imports CSLA.Data
<%= GetUsingStatementsString(Info) %>
<% If Info.ObjectNamespace.Trim.Length > 0 Then %>Namespace <%=Info.ObjectNamespace%><% End If %>
<!-- #include file="XmlComment.inc" -->
<%= GetAttributesString(Info.Attributes) %>
<Serializable()<% If ActiveObjects Then %>, RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")<% End If %><%
	If ActiveObjects Then 
		If Info.SubscribeToChannel.Length > 0 Then
		%>, Subscribe("<%= Info.SubscribeToChannel %>")<% 
		End If 
	End If %>> _
Public Partial Class <%=Info.ObjectName%>
	Inherits <%
		If Info.InheritedType.Type <> String.Empty Then 
			%><%=Info.InheritedType.Type%><% 
		ElseIf Info.InheritedType.ObjectName <> String.Empty Then
			%><%=Info.InheritedType.ObjectName%><% 
		Else 
			%><% If ActiveObjects Then %>Active<% End If %>BusinessListBase<% 
		End If %>(Of <%=Info.ObjectName %>, <%=Info.ItemType %>)
		<!-- #include file="Implements.inc" -->	
<% Dim cldInfo As CslaObjectInfo = FindChildInfo(Info, Info.ItemType) 
If cldInfo Is Nothing Then
	Errors.Append("Invalid Item Type: " & Info.ItemType)
	Errors.AppendLine()
Else %>
<% If Info.AddParentReference Then %>
#Region " Parent Reference "

	<NonSerialized(), NotUndoable()> _
	Private m_Parent As Object
	
	Public ReadOnly Property Parent As Object
		Get
			Return m_Parent
		End Get
	End Property
	
	Friend Sub SetParent(ByVal parent As Object)
		m_Parent = parent
	End Sub
	
#End Region
<% End If %>


		<!-- #include file="CollectionBusinessProps.inc" -->
		
		<!-- #include file="FindMethods.inc" -->

#Region " Shared Methods "
	<% If Info.GenerateFactoryMethods Then 
			If Info.LazyLoad AndAlso Info.DbName.Trim().Equals(String.Empty) Then
				Errors.Append("	Make sure you specify a DB name.") 
				Errors.Append(vbCrLf)
			End If
	%>
		''' <summary>
		''' Factory method. Creates a new <see cref="<%=Info.ItemType%>" /> collection.
		''' </summary>
		Friend Shared Function New<%= Info.ObjectName %>(<% 
			If Info.AddParentReference 
				%>ByVal parent As  Object<% 
			End If 
			%>) As <%= Info.ObjectName %>
			<% If Info.NewRoles <> String.Empty Then %>
			If Not CanAddObject() Then
				Throw New System.Security.SecurityException( _
					"User not authorized to create a <%= Info.ObjectName %>")
			End If
			<% End If %>
			<% If Info.AddParentReference Then %>
			Dim obj As <%= Info.ObjectName %> = New <%= Info.ObjectName %>()
			obj.SetParent(parent)
			Return obj
			<% Else %>
			Return New <%= Info.ObjectName %>()
			<% End If %> 
		End Function
		<% If Not Info.LazyLoad Then %>
		<!-- #include file="InternalGetObject.inc" -->
		<% Else %>
		<!-- #include file="GetObject.inc" -->
		<% End If %>
	<% End If %>
		<!-- #include file="SharedAuthorizationMethods.inc" -->
		
#End Region 
		<!-- #include file="Constructor.inc"  -->

		<!-- #include file="Criteria.inc" -->
		
		<% If Info.GenerateDataAccessRegion Then %>
		
#Region " Data Access "
		
		<!-- #include file="CollectionDataPortalFetch.inc" -->
				
		''' <summary>
		''' Update all changes made on <see cref="<%=Info.ObjectName%>" /> object's children to the underlying database.
		''' </summary>
		<% 	If Info.TransactionType = TransactionType.EnterpriseServices Then%><Transactional()> _ 
		<% 	End If 
			If Info.ParentType.Length = 0 Then 
				Errors.Append("ParentType not set." & vbCrLf & Info.ObjectName & " will not compile.")
				Errors.Append(vbCrLf)
			End If
			
			%>Friend Sub Update(ByVal parent As <%= Info.ParentType %>)
			Me.RaiseListChangedEvents = False
			RaiseEvent UpdatePre(Me, EventArgs.Empty)
			<% 
			
			
			Dim ParentInsertOnly As Boolean = cldInfo.ParentInsertOnly
%>
			' Loop through the deleted child objects and call their Update methods
			For Each child As <%= Info.ItemType %> In DeletedList
				child.DeleteSelf(<% If Not ParentInsertOnly Then %>parent<% End If%>)
			Next
			
			' Now clear the deleted objects from the list
			DeletedList.Clear()
			
			' Loop through the objects to add and update, calling the Update Method
			For Each child As <%= Info.ItemType %> In Me
				If child.IsNew Then
					child.Insert(parent)
				Else
					child.Update(<% If Not ParentInsertOnly Then %>parent<% End If%>)
				End If
			Next
			RaiseEvent UpdatePost(Me, EventArgs.Empty) 
			Me.RaiseListChangedEvents = True
		End Sub
		
#End Region
		
		<!-- #include file="Events.inc" -->
		
		<% End If %>
		
<% End If %>
End Class

<% If Info.ObjectNamespace.Trim.Length > 0 Then %>End Namespace<% End If %>
