<%@ CodeTemplate Inherits="VbCslaTemplateHelper" Language="VB" TargetLanguage="VB" Description="Generates a CSLA Editable Root Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="False" Category="Business Object" Description="Definition of the EditableRootCollection object to create." %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="If true, base class is generated as ActiveObjects" %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="False" Category="Options" Description="Allows the template to return errors to master.cst" %>

<% Dim first As Boolean = True %>


<%

'This is here to prevent calling inc files that will throw exeptions in case your collection is missing the ItemType prop.
If Info.ItemType.Equals(String.Empty) Then
	Errors.Append("	EditableRootCollection is missing ItemType property")
	Errors.Append(vbCrLf)
ElseIf FindChildInfo(Info, Info.ItemType) Is Nothing Then
	Errors.Append("	EditableRootCollection has an invalid ItemType")
	Errors.Append(vbCrLf)
Else

%>

<!-- #include file="Header.inc" -->
Imports System.Data.SqlClient
Imports CSLA
<% If ActiveObjects Then %>Imports ActiveObjects<% End If %>
Imports CSLA.Data
<%= GetUsingStatementsString(Info) %>
<% If Info.ObjectNamespace.Trim.Length > 0 Then %>Namespace <%=Info.ObjectNamespace%><% End If %>
	<!-- #include file="XmlComment.inc" -->
	<%= GetAttributesString(Info.Attributes) %>
	<Serializable()<% If ActiveObjects Then %>, RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")<% End If %><%
	If ActiveObjects Then 
		If Info.SubscribeToChannel.Length > 0 Then
		%>, Subscribe("<%= Info.SubscribeToChannel %>")<% 
		End If 
	End If %>> _
	Public Partial Class <%=Info.ObjectName%>
		Inherits <%
			If Info.InheritedType.Type <> String.Empty Then 
				%><%=Info.InheritedType.Type%><% 
			ElseIf Info.InheritedType.ObjectName <> String.Empty Then
				%><%=Info.InheritedType.ObjectName%><% 
			Else 
				%><% If ActiveObjects Then %>Active<% End If %>BusinessListBase<% 
			End If %>(Of <%=Info.ObjectName %>, <%=Info.ItemType %>)
			<!-- #include file="Implements.inc" -->	
			
		<!-- #include file="CollectionBusinessProps.inc" -->
			
		<!-- #include file="FindMethods.inc" -->
#Region " Shared Methods "
	<% If Info.GenerateFactoryMethods Then 
			If Info.DbName.Trim().Equals(String.Empty) Then
				Errors.Append("	Make sure you specify a DB name.") 
				Errors.Append(vbCrLf)
			End If
	%>
		''' <summary>
		''' Factory method. Creates a new <see cref="<%=Info.ObjectName%>" /> collection.
		''' </summary>
		Public Shared Function New<%= Info.ObjectName %>() As <%= Info.ObjectName %>

			<% If Info.NewRoles <> String.Empty Then 
				Dim newRoles() As String = System.Text.RegularExpressions.Regex.Split(Info.NewRoles, ";")
				first = True %>
			If Not CanAddObject() Then
					Throw New System.Security.SecurityException("User not authorized to create a <%=Info.ObjectName%>")
			End If
			
			<% End If %>
			Return New <%= Info.ObjectName %>
			
		End Function
		<!-- #include file="GetObject.inc" -->
	<% End If %>
		<!-- #include file="Save.inc" -->
#End Region
		<!-- #include file="Constructor.inc" -->
	
		<!-- #include file="Criteria.inc" -->
				
		<!-- #include file="SharedAuthorizationMethods.inc" -->	
		
		<% If Info.GenerateDataAccessRegion Then %>
		
#Region " Data Access "
		<!-- #include file="CollectionDataPortalFetch.inc" -->

		''' <summary>
		''' Save (delete, add, update) all child objects to database.
		''' </summary>
		<% If Info.TransactionType = TransactionType.EnterpriseServices Then %><Transactional()> _ 
		<% ElseIf Info.TransactionType = TransactionType.TransactionalAttribute Then %><Transactional(TransactionalTypes.TransactionScope)> _
		<% End If %>Protected Overrides Sub DataPortal_Update()

			Using cn As New SqlConnection(DataBase.<%= Info.DbName %>Connection)
				cn.Open()
				LocalContext("dpConnection") = cn
				<% If Info.TransactionType = TransactionType.ADO Then %>
				Using tr As SqlTransaction = cn.BeginTransaction()
				LocalContext("dpTransaction") = tr
				<% End If %>     
				For Each child As <%= Info.ItemType %> In deletedList
					child.DeleteSelf()
				Next
					
				' Now clear the deleted objects from the list
				deletedList.Clear()
				
				For Each child As <%= Info.ItemType %> In Me
					If child.IsNew Then
						child.Insert()
					Else
						child.Update()
					End If
				Next
				
				<% If Info.TransactionType = TransactionType.ADO Then %>
				tr.Commit()
				End Using
				<% End If %>
			End Using
		End Sub

		''' <summary>
		''' Not implemented.
		''' </summary>
		Protected Overrides Sub DataPortal_Delete(ByVal criteria As Object)
			'
		End Sub
		
#End Region

		<!-- #include file="Events.inc" -->	
		
		<% End If %>
		
	End Class

<% If Info.ObjectNamespace.Trim.Length > 0 Then %>End Namespace<% End If %>

<% End If %>
