<%@ CodeTemplate Inherits="CslaTemplateHelper" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA Editable Root Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the EditableRootCollection Object to create." %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="ActiveObjects" Type="System.Boolean" Default="false" Category="Options" Description="if ( true, base class is generated as ActiveObjects" %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>

<%

// This is here to prevent calling inc files that will throw exeptions in case your collection is missing the ItemType prop.
if (Info.ItemType.Equals(String.Empty)) {
	Errors.Append("	EditableRootCollection is missing ItemType property\r\n");
} else if (FindChildInfo(Info, Info.ItemType) == null) {
	Errors.Append("	EditableRootCollection has an invalid ItemType\r\n");
} else {

%>
<% bool first = true; %>
<!-- #include file="Header.inc" -->
using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
<% if (ActiveObjects) { %>using ActiveObjects;
<% } %>using Csla.Data;
<%= GetUsingStatementsString(Info) %>
<% if (Info.ObjectNamespace.Trim().Length > 0) { %>namespace <%=Info.ObjectNamespace%>
{ <% } %>
	<!-- #include file="XmlComment.inc" -->
	<% if (GetAttributesString(Info.Attributes) != string.Empty) { %>
	<%= GetAttributesString(Info.Attributes) %>
	<% } %>
	[Serializable()]
	<% if (ActiveObjects) { %>[RegisterNotify("IsValid, IsDirty, BrokenRulesChanged")]
	<%	if (Info.SubscribeToChannel.Length > 0) { %>[Subscribe("<%= Info.SubscribeToChannel %>")]<% } %>
	<% } %>public partial class <%=Info.ObjectName%> : <%
			if (Info.InheritedType.Type != String.Empty) { 
				%><%=Info.InheritedType.Type%><% 
			} else if (Info.InheritedType.ObjectName != String.Empty) {
				%><%=Info.InheritedType.ObjectName%><% 
			 } else { 
				%><% if (ActiveObjects) { %>Active<% } %>BusinessListBase<% 
			} %><<%=Info.ObjectName %>, <%=Info.ItemType %>><!-- #include file="Implements.inc" -->	
	{
		
		<!-- #include file="CollectionBusinessProps.inc" -->
			
		<!-- #include file="FindMethods.inc" -->
		
	<% if (Info.GenerateFactoryMethods) { 
			if (Info.DbName.Trim().Equals(String.Empty)) {
				Errors.Append("	Make sure you specify a DB name.\r\n");
			}
	%>
		<% Response.Write("\r\n"); %>
		#region Factory Methods
		
		/// <summary>
		/// Factory method. Creates a new <see cref="<%=Info.ObjectName%>" /> collection.
		/// </summary>
		public static <%= Info.ObjectName %> New<%= Info.ObjectName %>()
		{
			<% if (Info.NewRoles != String.Empty) { %>
			if (!CanAddObject())
				throw new System.Security.SecurityException("User not authorized to create a <%= Info.ObjectName %>");
			<% } %>
			return new <%= Info.ObjectName %>();
		}
		<!-- #include file="GetObject.inc" -->
		<% Response.Write("\r\n"); %>
		#endregion
	<% } %>
		<!-- #include file="Save.inc" -->
		
		<!-- #include file="Constructor.inc" -->
	
		<!-- #include file="Criteria.inc" -->
				
		<!-- #include file="SharedAuthorizationMethods.inc" -->	
<% if (Info.GenerateDataAccessRegion) { %>
	
		#region Data Access
		<!-- #include file="CollectionDataPortalFetch.inc" -->

		/// <summary>
		/// Save (delete, add, update) all child objects to database.
		/// </summary>
		<% if (Info.TransactionType == TransactionType.EnterpriseServices) { %>
		[Transactional()]
		<% } else if (Info.TransactionType == TransactionType.TransactionalAttribute) { %>
		[Transactional(TransactionalTypes.TransactionScope)]
		<% } %>
		protected override void DataPortal_Update()
		{
			using (SqlConnection cn = new SqlConnection(DataBase.<%= Info.DbName %>Connection))
			{
				cn.Open();
				ApplicationContext.LocalContext["dpConnection"] = cn;
				try 
				{
					<% if (Info.TransactionType == TransactionType.ADO) { %>
					using (SqlTransaction tr = cn.BeginTransaction())
					{
						ApplicationContext.LocalContext["dpTransaction"] = tr;
					<% } %>     
					foreach (<%= Info.ItemType %> child in DeletedList)
						child.DeleteSelf();
						
					// Now clear the deleted objects from the list
					DeletedList.Clear();
					
					foreach (<%= Info.ItemType %> child in this) 
					{
						if (child.IsNew)
							child.Insert();
						else
							child.Update();
					}
					<% if (Info.TransactionType == TransactionType.ADO) { %>
					
					tr.Commit();
					}
					<% } %>
				}
				finally
				{
					ApplicationContext.LocalContext.Remove("dpConnection");
					<% if (Info.TransactionType == TransactionType.ADO) { %>
					ApplicationContext.LocalContext.Remove("dpTransaction");
					<% } %>
				}
			}
		}

		/// <summary>
		/// Not implemented.
		/// </summary>
		protected override void DataPortal_Delete(object criteria)
		{
		}
		
		#endregion
		<!-- #include file="Events.inc" -->

<% } %>

	}

<% if (Info.ObjectNamespace.Trim().Length > 0) { %>
}
<% } %>

<% } %>
