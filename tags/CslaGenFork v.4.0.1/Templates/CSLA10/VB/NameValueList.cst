<%@ CodeTemplate Language="VB" TargetLanguage="VB" Description="Generates a CSLA NameValueList Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="False" Category="Business Object" Description="Definition of the NameValueList object to create." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="System.Text" %>
<!-- #include file="Header.inc" -->
Imports System.Data.SqlClient
Imports CSLA
Imports CSLA.Data

<% If Info.ObjectNamespace.Trim.Length > 0 Then %>Namespace <%=Info.ObjectNamespace%><% End If %>
	<!-- #include file="XmlComment.inc" -->
	<%= vbLf %>	<Serializable()> _
	Public Class <%=Info.ObjectName%> : Inherits NameValueList
	
#Region " Constructors "
		
		Protected Sub New()
			' Prevent direct creation 
		End Sub
		
		Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, _
						  ByVal context As System.Runtime.Serialization.StreamingContext) 
			MyBase.New(info, context)
		End Sub
		
#End Region
		
#Region " Shared Methods "
		
		Public Shared Function Get<%=Info.ObjectName%>() As <%=Info.ObjectName%>
			Return DirectCast(DataPortal.Fetch(New <%=Info.GetObjectCriteriaType.Name%>()), <%=Info.ObjectName%>)
		End Function
		
#End Region
		
#Region " Criteria "
		<% For Each crit As Criteria In Info.CriteriaObjects %>
		
		<Serializable()> _
		Private Class <%=crit.Name%> : Inherits CSLA.CriteriaBase
		
			<% For Each prop As Metadata.Property In crit.Properties %>
			Public <%=FormatPascal(prop.Name)%> As <%=prop.PropertyType.ToString()%>
			<% Next %>
			
			Public Sub New() 
				MyBase.New(GetType(<%=Info.ObjectName%>))
			End Sub
			
		End Class
		<% Next %>
		
#End Region
		
#Region " Data Access "
		
		Protected Overrides Sub DataPortal_Fetch(ByVal criteria As Object)
			<% If Info.NameIsGUID Then %>
			SimpleFetchGUID("<%=Info.DbName%>", "<%=Info.NameValueTable%>", "<%=Info.NameColumn%>", "<%=Info.ValueColumn%>")
			<% Else %>
			SimpleFetch("<%=Info.DbName%>", "<%=Info.NameValueTable%>", "<%=Info.NameColumn%>", "<%=Info.ValueColumn%>")
			<% End If %>
		End Sub
		
#End Region
	
	End Class
	
<% If Info.ObjectNamespace.Trim.Length > 0 Then %>End Namespace<% End If %>

<%-- ******************************************************************************************************************* --%>

<script runat="template">

Private Function FormatFieldName(ByVal name As String) As String
	Return "_" & FormatCamel(name)
End Function

Private Function FormatCamel(ByVal name As String) As String
	If name.Length > 0 Then
		Dim sb As New StringBuilder
		sb.Append(Char.ToLower(name.Chars(0)))
		If name.Length > 1 Then
			sb.Append(name.SubString(1))
		End If
		Return sb.ToString()
	End If
	Return String.Empty
End Function

Private Function FormatPascal(ByVal name As String) As String
	If name.Length > 0 Then
		Dim sb As New StringBuilder
		sb.Append(Char.ToUpper(name.Chars(0)))
		If name.Length > 1 Then
			sb.Append(name.SubString(1))
		End If
		Return sb.ToString
	End If
	Return String.Empty
End Function

</script>