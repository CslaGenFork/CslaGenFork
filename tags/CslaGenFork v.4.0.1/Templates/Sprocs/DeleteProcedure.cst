<%@ CodeTemplate Inherits="SprocTemplateHelper" Language="C#" TargetLanguage="T-SQL" Description="Generates a Delete stored procedure." %>

<%@ Assembly Name="DBSchemaInfo" %>
<%@ Import Namespace="DBSchemaInfo.Base" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Data"%>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Assembly Name="System.Windows.Forms"%>
<%@ Import Namespace="System.Windows.Forms"%>

<%
bool first = false;
List<IResultObject> tables = GetTablesDelete(Info);
SortTables(tables);
bool timeStampColumn=false;
string procName=String.Empty;
string parms=String.Empty;
string whereClause=String.Empty;
string whereClauseTS=String.Empty;
if (!CriteriaDefined)
{
    procName = Info.DeleteProcedureName;
    first = true;
    if (!Info.ParentInsertOnly)
    {
        foreach (ValueProperty parm in Info.GetParentValueProperties())
        {
            if (!first)
            {
                whereClause += "\r\n        AND    ";
                parms += ","  + Environment.NewLine;
            }
            else { first = false; }
            whereClause += String.Format("[{0}] = @{1}", CheckParentRelationName(parm,tables[0]), parm.ParameterName);
            parms += String.Format("    @{0} {1}", parm.ParameterName, GetDataTypeString(parm.DbBindColumn));
        }
    }
    foreach (ValueProperty parm in Info.ValueProperties)
    {
        if (parm.PrimaryKey != ValueProperty.UserDefinedKeyBehaviour.Default)
        {
            if (!first) {
                if (parm.DbBindColumn.NativeType != "timestamp")
                    whereClauseTS += "\r\n        AND    ";
                whereClause += "\r\n        AND    ";
                parms += ","  + Environment.NewLine;
            }
            else { first = false; }
            whereClause +=String.Format("[{0}] = @{1}", GetColumnString(parm.DbBindColumn), parm.ParameterName);
            if (parm.DbBindColumn.NativeType != "timestamp")
                whereClauseTS +=String.Format("[{0}] = @{1}", GetColumnString(parm.DbBindColumn), parm.ParameterName) + Environment.NewLine;
            else
                timeStampColumn=true;
            parms += String.Format("    @{0} {1}", parm.ParameterName, GetDataTypeString(parm.DbBindColumn));
        }
    }
}
else
{
    procName = Criteria.DeleteOptions.ProcedureName;
    first = true;
    foreach (CriteriaProperty parm in Criteria.Properties)
    {
        if (!first)
        {
            if (parm.DbBindColumn.NativeType != "timestamp")
                whereClauseTS += " \r\n        AND    ";
            whereClause += "\r\n        AND    ";
            parms += ","  + Environment.NewLine;
        }
        else
        {
            first=false;
        }
        whereClause +=String.Format("[{0}] = @{1}", GetColumnString(parm), parm.ParameterName);
        if (parm.DbBindColumn.NativeType != "timestamp")
            whereClauseTS +=String.Format("[{0}] = @{1}", GetColumnString(parm), parm.ParameterName) + Environment.NewLine;
        else
            timeStampColumn=true;
        parms += String.Format("    @{0} {1}", parm.ParameterName, GetDataTypeString(parm));
    }
}
%>
/***** <%=procName%> *****/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[<%=procName%>]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE [<%=procName%>]
GO

CREATE PROCEDURE [<%=procName%>]
<%=parms%>
AS
    BEGIN

        SET NOCOUNT ON

        /* Check for object existance */
        IF NOT EXISTS
        (
            SELECT <%first = true;
            if (!Info.ParentInsertOnly)
            {
                foreach (ValueProperty prop in Info.GetParentValueProperties())
                {
                    if (!first) { %>, <% } else { first = false; }
                %>[<%=GetColumnString(prop.DbBindColumn)%>]<%
                }
            }
            foreach (ValueProperty prop in Info.ValueProperties)
            {
                if (prop.DbBindColumn.IsPrimaryKey)
                {
                    if (!first) { %>, <% } else { first = false; }
            %>[<%=GetColumnString(prop.DbBindColumn)%>]<%
                }
            }
            %> FROM [<%=tables[0].ObjectName%>]
            WHERE  <%
            first = true;
            if (!Info.ParentInsertOnly)
            {
                foreach (ValueProperty prop in Info.GetParentValueProperties())
                {
                    if (!first)
                    {
                    %>
            AND    <% } else { first = false; }
            %>[<%=GetColumnString(prop.DbBindColumn)%>] = @<%=prop.ParameterName%><%
                }
            }
            foreach (ValueProperty prop in Info.GetAllValueProperties())
            {
                if (prop.DbBindColumn.IsPrimaryKey)
                {
                    if (!first)
                    {
                    %>
            AND    <% } else { first = false; }
            %>[<%=GetColumnString(prop.DbBindColumn)%>] = @<%=prop.ParameterName%><%
                }
            }
            if (UseBoolSoftDelete(tables, IgnoreFilter(Info)))
            {
                if (!first)
                {
                    %>
            AND    <% } else { first = false; }
            %>[<%= Info.Parent.Params.SpBoolSoftDeleteColumn %>] = 'true'<%
            }
            else if (UseIntSoftDelete(tables, IgnoreFilter(Info)))
            {
                if (!first)
                {
                    %>
            AND    <% } else { first = false; }
            %>[<%= Info.Parent.Params.SpIntSoftDeleteColumn %>] > 0<%
            }
            else if (IgnoreFilter(Info) && (string.IsNullOrEmpty(Info.Parent.Params.SpBoolSoftDeleteColumn) || string.IsNullOrEmpty(Info.Parent.Params.SpIntSoftDeleteColumn)))
            {
                    %>
            /* Ignore filter option is on */<%
            }
            %>
        )
        BEGIN
            RAISERROR ('''<%=Info.ObjectName%>'' object not found. It was probably removed by another user.', 16, 1)
            RETURN
        END
        <%
        if (timeStampColumn)
        {
            %>

        /* Check for row version match */
        IF NOT EXISTS
        (
            SELECT <%first = true;
            if (!Info.ParentInsertOnly)
            {
                foreach (ValueProperty prop in Info.GetParentValueProperties())
                {
                    if (!first) { %>, <% } else { first = false; }
                %>[<%=GetColumnString(prop.DbBindColumn)%>]<%
                }
            }
            foreach (ValueProperty prop in Info.ValueProperties)
            {
                if (prop.DbBindColumn.IsPrimaryKey)
                {
                    if (!first) { %>, <% } else { first = false; }
            %>[<%=GetColumnString(prop.DbBindColumn)%>]<%
                }
            }
            %> FROM [<%=tables[0].ObjectName%>]
            WHERE  <%
            first = true;
            if (!Info.ParentInsertOnly)
            {
                foreach (ValueProperty prop in Info.GetParentValueProperties())
                {
                    if (!first) { %>
            AND    <% } else { first = false; }
            %>[<%=GetColumnString(prop.DbBindColumn)%>] = @<%=prop.ParameterName%><%
                }
            }
            foreach (ValueProperty prop in Info.ValueProperties) {
                if (prop.DbBindColumn.IsPrimaryKey || prop.DbBindColumn.NativeType == "timestamp") {
                    if (!first) { %>
            AND    <% } else { first = false; }
            %>[<%=GetColumnString(prop.DbBindColumn)%>] = @<%=prop.ParameterName%><%
                }
            }
            %>
        )
        BEGIN
            RAISERROR ('''<%=Info.ObjectName%>'' object was modified by another user.', 16, 1)
            RETURN
        END
        <%
        }

        if (Info.Parent.Params.SpRemoveChildBeforeParent)
        {
            foreach (ChildProperty childProp in Info.GetAllChildProperties())
            {
                CslaObjectInfo childCollInfo = FindChildInfo(Info, childProp.TypeName);
                CslaObjectInfo childInfo = FindChildInfo(childCollInfo, childCollInfo.ItemType);
                if (childInfo != null)
                {
                    List<IResultObject> childTables = GetTablesDelete(childInfo);
                    SortTables(childTables);
                    if (!UseBoolSoftDelete(childTables, false))
                    {
                        Response.Write("\r\n");
                        %>
        /* Delete child <%= childInfo.ObjectName %> from <%=childTables[0].ObjectName%> */
        DELETE FROM [<%= childTables[0].ObjectName %>]
        WHERE  <%= whereClause %>
        <%
                    }
                    else
                    {
                        Response.Write("\r\n");
                        %>
        /* Mark child <%= childInfo.ObjectName %> as not active */
        UPDATE [<%= childTables[0].ObjectName %>]
        SET    [<%= childInfo.Parent.Params.SpBoolSoftDeleteColumn %>] = 'false'
        WHERE  <%= whereClause %>
        <%
                    }
                }
            }
        }

        if (!UseBoolSoftDelete(tables, false))
        {
            Response.Write("\r\n");
            %>
        /* Delete <%= Info.ObjectName %> object from <%=tables[0].ObjectName%> */
        DELETE FROM [<%= tables[0].ObjectName %>]
        WHERE  <%= whereClause %><%
        }
        else
        {
            %>
        /* Mark <%= Info.ObjectName %> object as not active */
        UPDATE [<%= tables[0].ObjectName %>]
        SET    [<%= Info.Parent.Params.SpBoolSoftDeleteColumn %>] = 'false'
        WHERE  <%= whereClause %><%
        }
        %>

    END
GO
