//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    FolderCircColl
// ObjectType:  FolderCircColl
// CSLAType:    EditableChildCollection

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using DocStore.Business.Util;
using Csla.Rules;
using Csla.Rules.CommonRules;

namespace DocStore.Business.Circulations
{

    /// <summary>
    /// Collection of circulations of this folder (editable child list).<br/>
    /// This is a generated base class of <see cref="FolderCircColl"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is child of <see cref="Folder"/> editable root object.<br/>
    /// The items of the collection are <see cref="FolderCirc"/> objects.
    /// </remarks>
    [Serializable]
#if WINFORMS
    public partial class FolderCircColl : BusinessBindingListBase<FolderCircColl, FolderCirc>
#else
    public partial class FolderCircColl : BusinessListBase<FolderCircColl, FolderCirc>
#endif
    {

        #region Collection Business Methods

        /// <summary>
        /// Adds a new <see cref="FolderCirc"/> item to the collection.
        /// </summary>
        /// <param name="item">The item to add.</param>
        /// <exception cref="ArgumentException">if the item already exists in the collection.</exception>
        public new void Add(FolderCirc item)
        {
            if (Contains(item.CircID))
                throw new ArgumentException("FolderCirc already exists.");

            base.Add(item);
        }

        /// <summary>
        /// Adds a new <see cref="FolderCirc"/> item to the collection.
        /// </summary>
        /// <returns>The new FolderCirc item added to the collection.</returns>
        public FolderCirc Add()
        {
            var item = FolderCirc.NewFolderCirc();
            Add(item);
            return item;
        }

        /// <summary>
        /// Asynchronously adds a new <see cref="FolderCirc"/> item to the collection.
        /// </summary>
        public void BeginAdd()
        {
            FolderCirc folderCirc = null;
            FolderCirc.NewFolderCirc((o, e) =>
                {
                    if (e.Error != null)
                        throw e.Error;
                    else
                        folderCirc = e.Object;
                });
            Add(folderCirc);
        }

        /// <summary>
        /// Removes a <see cref="FolderCirc"/> item from the collection.
        /// </summary>
        /// <param name="circID">The CircID of the item to be removed.</param>
        public void Remove(int circID)
        {
            foreach (var folderCirc in this)
            {
                if (folderCirc.CircID == circID)
                {
                    Remove(folderCirc);
                    break;
                }
            }
        }

        /// <summary>
        /// Determines whether a <see cref="FolderCirc"/> item is in the collection.
        /// </summary>
        /// <param name="circID">The CircID of the item to search for.</param>
        /// <returns><c>true</c> if the FolderCirc is a collection item; otherwise, <c>false</c>.</returns>
        public bool Contains(int circID)
        {
            foreach (var folderCirc in this)
            {
                if (folderCirc.CircID == circID)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Determines whether a <see cref="FolderCirc"/> item is in the collection's DeletedList.
        /// </summary>
        /// <param name="circID">The CircID of the item to search for.</param>
        /// <returns><c>true</c> if the FolderCirc is a deleted collection item; otherwise, <c>false</c>.</returns>
        public bool ContainsDeleted(int circID)
        {
            foreach (var folderCirc in DeletedList)
            {
                if (folderCirc.CircID == circID)
                {
                    return true;
                }
            }
            return false;
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="FolderCircColl"/> collection.
        /// </summary>
        /// <returns>A reference to the created <see cref="FolderCircColl"/> collection.</returns>
        internal static FolderCircColl NewFolderCircColl()
        {
            return DataPortal.CreateChild<FolderCircColl>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="FolderCircColl"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="FolderCircColl"/> object.</returns>
        internal static FolderCircColl GetFolderCircColl(SafeDataReader dr)
        {
            if (!CanGetObject())
                throw new System.Security.SecurityException("User not authorized to load a FolderCircColl.");

            FolderCircColl obj = new FolderCircColl();
            // show the framework that this is a child object
            obj.MarkAsChild();
            obj.Fetch(dr);
            return obj;
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="FolderCircColl"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        internal static void NewFolderCircColl(EventHandler<DataPortalResult<FolderCircColl>> callback)
        {
            DataPortal.BeginCreate<FolderCircColl>(callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="FolderCircColl"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public FolderCircColl()
        {
            // Use factory methods and do not use direct creation.

            // show the framework that this is a child object
            MarkAsChild();

            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AllowNew = true;
            AllowEdit = true;
            AllowRemove = true;
            RaiseListChangedEvents = rlce;
        }

        #endregion

        #region Object Authorization

        /// <summary>
        /// Adds the object authorization rules.
        /// </summary>
        protected static void AddObjectAuthorizationRules()
        {
            BusinessRules.AddRule(typeof (FolderCircColl), new IsInRole(AuthorizationActions.GetObject, "User"));

            AddObjectAuthorizationRulesExtend();
        }

        /// <summary>
        /// Allows the set up of custom object authorization rules.
        /// </summary>
        static partial void AddObjectAuthorizationRulesExtend();

        /// <summary>
        /// Checks if the current user can create a new FolderCircColl object.
        /// </summary>
        /// <returns><c>true</c> if the user can create a new object; otherwise, <c>false</c>.</returns>
        public static bool CanAddObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.CreateObject, typeof(FolderCircColl));
        }

        /// <summary>
        /// Checks if the current user can retrieve FolderCircColl's properties.
        /// </summary>
        /// <returns><c>true</c> if the user can read the object; otherwise, <c>false</c>.</returns>
        public static bool CanGetObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.GetObject, typeof(FolderCircColl));
        }

        /// <summary>
        /// Checks if the current user can change FolderCircColl's properties.
        /// </summary>
        /// <returns><c>true</c> if the user can update the object; otherwise, <c>false</c>.</returns>
        public static bool CanEditObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.EditObject, typeof(FolderCircColl));
        }

        /// <summary>
        /// Checks if the current user can delete a FolderCircColl object.
        /// </summary>
        /// <returns><c>true</c> if the user can delete the object; otherwise, <c>false</c>.</returns>
        public static bool CanDeleteObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.DeleteObject, typeof(FolderCircColl));
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads all <see cref="FolderCircColl"/> collection items from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            var args = new DataPortalHookArgs(dr);
            OnFetchPre(args);
            while (dr.Read())
            {
                Add(FolderCirc.GetFolderCirc(dr));
            }
            OnFetchPost(args);
            RaiseListChangedEvents = rlce;
        }

        #endregion

        #region DataPortal Hooks

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        #endregion

    }
}
