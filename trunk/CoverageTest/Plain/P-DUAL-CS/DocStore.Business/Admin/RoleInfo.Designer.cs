//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    RoleInfo
// ObjectType:  RoleInfo
// CSLAType:    ReadOnlyObject

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using DocStore.Business.Util;
using Csla.Rules;
using Csla.Rules.CommonRules;

namespace DocStore.Business.Admin
{

    /// <summary>
    /// Role basic information (read only object).<br/>
    /// This is a generated base class of <see cref="RoleInfo"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="RoleList"/> collection.
    /// </remarks>
    [Serializable]
    public partial class RoleInfo : ReadOnlyBase<RoleInfo>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="RoleID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> RoleIDProperty = RegisterProperty<int>(p => p.RoleID, "Role ID", -1);
        /// <summary>
        /// Gets the Role ID.
        /// </summary>
        /// <value>The Role ID.</value>
        public int RoleID
        {
            get { return GetProperty(RoleIDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="RoleName"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> RoleNameProperty = RegisterProperty<string>(p => p.RoleName, "Role Name");
        /// <summary>
        /// Gets the Role Name.
        /// </summary>
        /// <value>The Role Name.</value>
        public string RoleName
        {
            get { return GetProperty(RoleNameProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IsActive"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool?> IsActiveProperty = RegisterProperty<bool?>(p => p.IsActive, "IsActive", null);
        /// <summary>
        /// Gets the active or deleted state.
        /// </summary>
        /// <value><c>true</c> if IsActive; <c>false</c> if not IsActive; otherwise, <c>null</c>.</value>
        public bool? IsActive
        {
            get { return GetProperty(IsActiveProperty); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="RoleInfo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="RoleInfo"/> object.</returns>
        internal static RoleInfo GetRoleInfo(SafeDataReader dr)
        {
            RoleInfo obj = new RoleInfo();
            obj.Fetch(dr);
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="RoleInfo"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public RoleInfo()
        {
            // Use factory methods and do not use direct creation.
        }

        #endregion

        #region Object Authorization

        /// <summary>
        /// Adds the object authorization rules.
        /// </summary>
        protected static void AddObjectAuthorizationRules()
        {
            BusinessRules.AddRule(typeof (RoleInfo), new IsInRole(AuthorizationActions.GetObject, "User"));

            AddObjectAuthorizationRulesExtend();
        }

        /// <summary>
        /// Allows the set up of custom object authorization rules.
        /// </summary>
        static partial void AddObjectAuthorizationRulesExtend();

        /// <summary>
        /// Checks if the current user can retrieve RoleInfo's properties.
        /// </summary>
        /// <returns><c>true</c> if the user can read the object; otherwise, <c>false</c>.</returns>
        public static bool CanGetObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.GetObject, typeof(RoleInfo));
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="RoleInfo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(RoleIDProperty, dr.GetInt32("RoleID"));
            LoadProperty(RoleNameProperty, dr.GetString("RoleName"));
            LoadProperty(IsActiveProperty, (bool?)dr.GetValue("IsActive"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        #endregion

        #region DataPortal Hooks

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        #endregion

    }
}
