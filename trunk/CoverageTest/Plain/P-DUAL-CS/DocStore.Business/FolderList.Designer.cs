//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    FolderList
// ObjectType:  FolderList
// CSLAType:    ReadOnlyCollection

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using DocStore.Business.Util;

namespace DocStore.Business
{

    /// <summary>
    /// Collection of folder's basic information (read only list).<br/>
    /// This is a generated base class of <see cref="FolderList"/> business object.
    /// This class is a root collection.
    /// </summary>
    /// <remarks>
    /// The items of the collection are <see cref="FolderInfo"/> objects.
    /// </remarks>
    [Serializable]
#if WINFORMS
    public partial class FolderList : ReadOnlyBindingListBase<FolderList, FolderInfo>
#else
    public partial class FolderList : ReadOnlyListBase<FolderList, FolderInfo>
#endif
    {

        #region Collection Business Methods

        /// <summary>
        /// Determines whether a <see cref="FolderInfo"/> item is in the collection.
        /// </summary>
        /// <param name="folderID">The FolderID of the item to search for.</param>
        /// <returns><c>true</c> if the FolderInfo is a collection item; otherwise, <c>false</c>.</returns>
        public bool Contains(int folderID)
        {
            foreach (var folderInfo in this)
            {
                if (folderInfo.FolderID == folderID)
                {
                    return true;
                }
            }
            return false;
        }

        #endregion

        #region Find Methods

        /// <summary>
        /// Finds a <see cref="FolderInfo"/> item of the <see cref="FolderList"/> collection, based on a given FolderID.
        /// </summary>
        /// <param name="folderID">The FolderID.</param>
        /// <returns>A <see cref="FolderInfo"/> object.</returns>
        public FolderInfo FindFolderInfoByFolderID(int folderID)
        {
            for (var i = 0; i < this.Count; i++)
            {
                if (this[i].FolderID.Equals(folderID))
                {
                    return this[i];
                }
            }

            return null;
        }

        #endregion

        #region Private Fields

        private static FolderList _list;

        #endregion

        #region Cache Management Methods

        /// <summary>
        /// Clears the in-memory FolderList cache so it is reloaded on the next request.
        /// </summary>
        public static void InvalidateCache()
        {
            _list = null;
        }

        /// <summary>
        /// Used by async loaders to load the cache.
        /// </summary>
        /// <param name="list">The list to cache.</param>
        internal static void SetCache(FolderList list)
        {
            _list = list;
        }

        internal static bool IsCached
        {
            get { return _list != null; }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="FolderList"/> collection.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="FolderList"/> collection.</returns>
        public static FolderList GetFolderList()
        {
            if (_list == null)
                _list = DataPortal.Fetch<FolderList>();

            return _list;
        }

        /// <summary>
        /// Factory method. Loads a <see cref="FolderList"/> collection, based on given parameters.
        /// </summary>
        /// <param name="folderTypeID">The FolderTypeID parameter of the FolderList to fetch.</param>
        /// <param name="folderRef">The FolderRef parameter of the FolderList to fetch.</param>
        /// <param name="year">The Year parameter of the FolderList to fetch.</param>
        /// <param name="subject">The Subject parameter of the FolderList to fetch.</param>
        /// <param name="folderStatusID">The FolderStatusID parameter of the FolderList to fetch.</param>
        /// <param name="createDate">The CreateDate parameter of the FolderList to fetch.</param>
        /// <param name="createUserID">The CreateUserID parameter of the FolderList to fetch.</param>
        /// <param name="changeDate">The ChangeDate parameter of the FolderList to fetch.</param>
        /// <param name="changeUserID">The ChangeUserID parameter of the FolderList to fetch.</param>
        /// <returns>A reference to the fetched <see cref="FolderList"/> collection.</returns>
        public static FolderList GetFolderList(int? folderTypeID, string folderRef, int? year, string subject, int? folderStatusID, SmartDate createDate, int? createUserID, SmartDate changeDate, int? changeUserID)
        {
            return DataPortal.Fetch<FolderList>(new FilteredCriteria(folderTypeID, folderRef, year, subject, folderStatusID, createDate, createUserID, changeDate, changeUserID));
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="FolderList"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void GetFolderList(EventHandler<DataPortalResult<FolderList>> callback)
        {
            if (_list == null)
                DataPortal.BeginFetch<FolderList>((o, e) =>
                    {
                        _list = e.Object;
                        callback(o, e);
                    });
            else
                callback(null, new DataPortalResult<FolderList>(_list, null, null));
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="FolderList"/> collection, based on given parameters.
        /// </summary>
        /// <param name="folderTypeID">The FolderTypeID parameter of the FolderList to fetch.</param>
        /// <param name="folderRef">The FolderRef parameter of the FolderList to fetch.</param>
        /// <param name="year">The Year parameter of the FolderList to fetch.</param>
        /// <param name="subject">The Subject parameter of the FolderList to fetch.</param>
        /// <param name="folderStatusID">The FolderStatusID parameter of the FolderList to fetch.</param>
        /// <param name="createDate">The CreateDate parameter of the FolderList to fetch.</param>
        /// <param name="createUserID">The CreateUserID parameter of the FolderList to fetch.</param>
        /// <param name="changeDate">The ChangeDate parameter of the FolderList to fetch.</param>
        /// <param name="changeUserID">The ChangeUserID parameter of the FolderList to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetFolderList(int? folderTypeID, string folderRef, int? year, string subject, int? folderStatusID, SmartDate createDate, int? createUserID, SmartDate changeDate, int? changeUserID, EventHandler<DataPortalResult<FolderList>> callback)
        {
            DataPortal.BeginFetch<FolderList>(new FilteredCriteria(folderTypeID, folderRef, year, subject, folderStatusID, createDate, createUserID, changeDate, changeUserID), callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="FolderList"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public FolderList()
        {
            // Use factory methods and do not use direct creation.

            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AllowNew = false;
            AllowEdit = false;
            AllowRemove = false;
            RaiseListChangedEvents = rlce;
        }

        #endregion

        #region Criteria

        /// <summary>
        /// FilteredCriteria criteria.
        /// </summary>
        [Serializable]
        protected class FilteredCriteria : CriteriaBase<FilteredCriteria>
        {

            /// <summary>
            /// Maintains metadata about <see cref="FolderTypeID"/> property.
            /// </summary>
            public static readonly PropertyInfo<int?> FolderTypeIDProperty = RegisterProperty<int?>(p => p.FolderTypeID);
            /// <summary>
            /// Gets or sets the Folder Type ID.
            /// </summary>
            /// <value>The Folder Type ID.</value>
            public int? FolderTypeID
            {
                get { return ReadProperty(FolderTypeIDProperty); }
                set { LoadProperty(FolderTypeIDProperty, value); }
            }

            /// <summary>
            /// Maintains metadata about <see cref="FolderRef"/> property.
            /// </summary>
            public static readonly PropertyInfo<string> FolderRefProperty = RegisterProperty<string>(p => p.FolderRef);
            /// <summary>
            /// Gets or sets the Folder Ref.
            /// </summary>
            /// <value>The Folder Ref.</value>
            public string FolderRef
            {
                get { return ReadProperty(FolderRefProperty); }
                set { LoadProperty(FolderRefProperty, value); }
            }

            /// <summary>
            /// Maintains metadata about <see cref="Year"/> property.
            /// </summary>
            public static readonly PropertyInfo<int?> YearProperty = RegisterProperty<int?>(p => p.Year);
            /// <summary>
            /// Gets or sets the Year.
            /// </summary>
            /// <value>The Year.</value>
            public int? Year
            {
                get { return ReadProperty(YearProperty); }
                set { LoadProperty(YearProperty, value); }
            }

            /// <summary>
            /// Maintains metadata about <see cref="Subject"/> property.
            /// </summary>
            public static readonly PropertyInfo<string> SubjectProperty = RegisterProperty<string>(p => p.Subject);
            /// <summary>
            /// Gets or sets the Subject.
            /// </summary>
            /// <value>The Subject.</value>
            public string Subject
            {
                get { return ReadProperty(SubjectProperty); }
                set { LoadProperty(SubjectProperty, value); }
            }

            /// <summary>
            /// Maintains metadata about <see cref="FolderStatusID"/> property.
            /// </summary>
            public static readonly PropertyInfo<int?> FolderStatusIDProperty = RegisterProperty<int?>(p => p.FolderStatusID);
            /// <summary>
            /// Gets or sets the Folder Status ID.
            /// </summary>
            /// <value>The Folder Status ID.</value>
            public int? FolderStatusID
            {
                get { return ReadProperty(FolderStatusIDProperty); }
                set { LoadProperty(FolderStatusIDProperty, value); }
            }

            /// <summary>
            /// Maintains metadata about <see cref="CreateDate"/> property.
            /// </summary>
            public static readonly PropertyInfo<SmartDate> CreateDateProperty = RegisterProperty<SmartDate>(p => p.CreateDate);
            /// <summary>
            /// Gets or sets the Create Date.
            /// </summary>
            /// <value>The Create Date.</value>
            public SmartDate CreateDate
            {
                get { return ReadProperty(CreateDateProperty); }
                set { LoadProperty(CreateDateProperty, value); }
            }

            /// <summary>
            /// Maintains metadata about <see cref="CreateUserID"/> property.
            /// </summary>
            public static readonly PropertyInfo<int?> CreateUserIDProperty = RegisterProperty<int?>(p => p.CreateUserID);
            /// <summary>
            /// Gets or sets the Create User ID.
            /// </summary>
            /// <value>The Create User ID.</value>
            public int? CreateUserID
            {
                get { return ReadProperty(CreateUserIDProperty); }
                set { LoadProperty(CreateUserIDProperty, value); }
            }

            /// <summary>
            /// Maintains metadata about <see cref="ChangeDate"/> property.
            /// </summary>
            public static readonly PropertyInfo<SmartDate> ChangeDateProperty = RegisterProperty<SmartDate>(p => p.ChangeDate);
            /// <summary>
            /// Gets or sets the Change Date.
            /// </summary>
            /// <value>The Change Date.</value>
            public SmartDate ChangeDate
            {
                get { return ReadProperty(ChangeDateProperty); }
                set { LoadProperty(ChangeDateProperty, value); }
            }

            /// <summary>
            /// Maintains metadata about <see cref="ChangeUserID"/> property.
            /// </summary>
            public static readonly PropertyInfo<int?> ChangeUserIDProperty = RegisterProperty<int?>(p => p.ChangeUserID);
            /// <summary>
            /// Gets or sets the Change User ID.
            /// </summary>
            /// <value>The Change User ID.</value>
            public int? ChangeUserID
            {
                get { return ReadProperty(ChangeUserIDProperty); }
                set { LoadProperty(ChangeUserIDProperty, value); }
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="FilteredCriteria"/> class.
            /// </summary>
            /// <remarks> A parameterless constructor is required by the MobileFormatter.</remarks>
            [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
            public FilteredCriteria()
            {
            }

            /// <summary>
            /// Initializes a new instance of the <see cref="FilteredCriteria"/> class.
            /// </summary>
            /// <param name="folderTypeID">The FolderTypeID.</param>
            /// <param name="folderRef">The FolderRef.</param>
            /// <param name="year">The Year.</param>
            /// <param name="subject">The Subject.</param>
            /// <param name="folderStatusID">The FolderStatusID.</param>
            /// <param name="createDate">The CreateDate.</param>
            /// <param name="createUserID">The CreateUserID.</param>
            /// <param name="changeDate">The ChangeDate.</param>
            /// <param name="changeUserID">The ChangeUserID.</param>
            public FilteredCriteria(int? folderTypeID, string folderRef, int? year, string subject, int? folderStatusID, SmartDate createDate, int? createUserID, SmartDate changeDate, int? changeUserID)
            {
                FolderTypeID = folderTypeID;
                FolderRef = folderRef;
                Year = year;
                Subject = subject;
                FolderStatusID = folderStatusID;
                CreateDate = createDate;
                CreateUserID = createUserID;
                ChangeDate = changeDate;
                ChangeUserID = changeUserID;
            }

            /// <summary>
            /// Determines whether the specified <see cref="System.Object"/> is equal to this instance.
            /// </summary>
            /// <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
            /// <returns><c>true</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            public override bool Equals(object obj)
            {
                if (obj is FilteredCriteria)
                {
                    var c = (FilteredCriteria) obj;
                    if (!FolderTypeID.Equals(c.FolderTypeID))
                        return false;
                    if (!FolderRef.Equals(c.FolderRef))
                        return false;
                    if (!Year.Equals(c.Year))
                        return false;
                    if (!Subject.Equals(c.Subject))
                        return false;
                    if (!FolderStatusID.Equals(c.FolderStatusID))
                        return false;
                    if (!CreateDate.Equals(c.CreateDate))
                        return false;
                    if (!CreateUserID.Equals(c.CreateUserID))
                        return false;
                    if (!ChangeDate.Equals(c.ChangeDate))
                        return false;
                    if (!ChangeUserID.Equals(c.ChangeUserID))
                        return false;
                    return true;
                }
                return false;
            }

            /// <summary>
            /// Returns a hash code for this instance.
            /// </summary>
            /// <returns>An hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            public override int GetHashCode()
            {
                return string.Concat("FilteredCriteria", FolderTypeID.ToString(), FolderRef.ToString(), Year.ToString(), Subject.ToString(), FolderStatusID.ToString(), CreateDate.ToString(), CreateUserID.ToString(), ChangeDate.ToString(), ChangeUserID.ToString()).GetHashCode();
            }
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="FolderList"/> collection from the database or from the cache.
        /// </summary>
        protected void DataPortal_Fetch()
        {
            if (IsCached)
            {
                LoadCachedList();
                return;
            }

            using (var ctx = ConnectionManager<SqlConnection>.GetManager(Database.DocStoreConnection, false))
            {
                using (var cmd = new SqlCommand("GetFolderList", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    var args = new DataPortalHookArgs(cmd);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
            _list = this;
        }

        private void LoadCachedList()
        {
            IsReadOnly = false;
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AddRange(_list);
            RaiseListChangedEvents = rlce;
            IsReadOnly = true;
        }

        /// <summary>
        /// Loads a <see cref="FolderList"/> collection from the database, based on given criteria.
        /// </summary>
        /// <param name="crit">The fetch criteria.</param>
        protected void DataPortal_Fetch(FilteredCriteria crit)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager(Database.DocStoreConnection, false))
            {
                using (var cmd = new SqlCommand("GetFolderList", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@FolderTypeID", crit.FolderTypeID == null ? (object)DBNull.Value : crit.FolderTypeID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@FolderRef", crit.FolderRef == null ? (object)DBNull.Value : crit.FolderRef).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@Year", crit.Year == null ? (object)DBNull.Value : crit.Year.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@Subject", crit.Subject == null ? (object)DBNull.Value : crit.Subject).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@FolderStatusID", crit.FolderStatusID == null ? (object)DBNull.Value : crit.FolderStatusID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@CreateDate", crit.CreateDate == null ? (object)DBNull.Value : crit.CreateDate.DBValue).DbType = DbType.DateTime2;
                    cmd.Parameters.AddWithValue("@CreateUserID", crit.CreateUserID == null ? (object)DBNull.Value : crit.CreateUserID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ChangeDate", crit.ChangeDate == null ? (object)DBNull.Value : crit.ChangeDate.DBValue).DbType = DbType.DateTime2;
                    cmd.Parameters.AddWithValue("@ChangeUserID", crit.ChangeUserID == null ? (object)DBNull.Value : crit.ChangeUserID.Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, crit);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }

        private void LoadCollection(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                Fetch(dr);
            }
        }

        /// <summary>
        /// Loads all <see cref="FolderList"/> collection items from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            IsReadOnly = false;
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            while (dr.Read())
            {
                Add(FolderInfo.GetFolderInfo(dr));
            }
            RaiseListChangedEvents = rlce;
            IsReadOnly = true;
        }

        #endregion

        #region DataPortal Hooks

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        #endregion

    }
}
