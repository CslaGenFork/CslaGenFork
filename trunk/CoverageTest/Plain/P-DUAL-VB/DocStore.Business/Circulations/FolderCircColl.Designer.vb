'  This file was generated by CSLA Object Generator - CslaGenFork v4.5
'
' Filename:    FolderCircColl
' ObjectType:  FolderCircColl
' CSLAType:    EditableChildCollection

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data
Imports DocStore.Business.Util
Imports Csla.Rules
Imports Csla.Rules.CommonRules

Namespace DocStore.Business.Circulations

    ''' <summary>
    ''' Collection of circulations of this folder (editable child list).<br/>
    ''' This is a generated base class of <see cref="FolderCircColl"/> business object.
    ''' </summary>
    ''' <remarks>
    ''' This class is child of <see cref="Folder"/> editable root object.<br/>
    ''' The items of the collection are <see cref="FolderCirc"/> objects.
    ''' </remarks>
    <Serializable()>
    Partial Public Class FolderCircColl
        Inherits BusinessBindingListBase(Of FolderCircColl, FolderCirc)
    
        #Region " Collection Business Methods "

        ''' <summary>
        ''' Adds a new <see cref="FolderCirc"/> item to the collection.
        ''' </summary>
        ''' <param name="item">The item to add.</param>
        ''' <exception cref="ArgumentException">if the item already exists in the collection.</exception>
        Public Overloads Sub Add(item As FolderCirc)
            If Contains(item.CircID) Then
                Throw New ArgumentException("FolderCirc already exists.")
            End If

            Add(item)
        End Sub

        ''' <summary>
        ''' Adds a new <see cref="FolderCirc"/> item to the collection.
        ''' </summary>
        ''' <returns>The new FolderCirc item added to the collection.</returns>
        Public Overloads Function Add() As FolderCirc
            Dim item = FolderCirc.NewFolderCirc()
            Add(item)
            Return item
        End Function

        ''' <summary>
        ''' Asynchronously adds a new <see cref="FolderCirc"/> item to the collection.
        ''' </summary>
        Public Sub BeginAdd()
            Dim folderCirc As FolderCirc = Nothing
            FolderCirc.NewFolderCirc(Sub(o, e)
                    If e.Error IsNot Nothing Then
                        Throw e.Error
                    Else
                        folderCirc = e.Object
                    End If
                End Sub)
            Add(folderCirc)
        End Sub

        ''' <summary>
        ''' Removes a <see cref="FolderCirc"/> item from the collection.
        ''' </summary>
        ''' <param name="circID">The CircID of the item to be removed.</param>
        Public Overloads Sub Remove(circID As Integer)
            For Each item As FolderCirc In Me
                If item.CircID = circID Then
                    MyBase.Remove(item)
                    Exit For
                End If
            Next
        End Sub

        ''' <summary>
        ''' Determines whether a <see cref="FolderCirc"/> item is in the collection.
        ''' </summary>
        ''' <param name="circID">The CircID of the item to search for.</param>
        ''' <returns><c>True</c> if the FolderCirc is a collection item; otherwise, <c>false</c>.</returns>
        Public Overloads Function Contains(circID As Integer) As Boolean
            For Each item As FolderCirc In Me
                If item.CircID = circID Then
                    Return True
                End If
            Next
            Return False
        End Function

        ''' <summary>
        ''' Determines whether a <see cref="FolderCirc"/> item is in the collection's DeletedList.
        ''' </summary>
        ''' <param name="circID">The CircID of the item to search for.</param>
        ''' <returns><c>True</c> if the FolderCirc is a deleted collection item; otherwise, <c>false</c>.</returns>
        Public Overloads Function ContainsDeleted(circID As Integer) As Boolean
            For Each item As FolderCirc In DeletedList
                If item.CircID = circID Then
                    Return True
                End If
            Next
            Return False
        End Function

        #End Region

        #Region " Factory Methods "

        ''' <summary>
        ''' Factory method. Creates a new <see cref="FolderCircColl"/> collection.
        ''' </summary>
        ''' <returns>A reference to the created <see cref="FolderCircColl"/> collection.</returns>
        Friend Shared Function NewFolderCircColl() As FolderCircColl
            Return DataPortal.CreateChild(Of FolderCircColl)()
        End Function

        ''' <summary>
        ''' Factory method. Loads a <see cref="FolderCircColl"/> object from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        ''' <returns>A reference to the fetched <see cref="FolderCircColl"/> object.</returns>
        Friend Shared Function GetFolderCircColl(dr As SafeDataReader) As FolderCircColl
            If Not CanGetObject()
                Throw New System.Security.SecurityException("User not authorized to load a FolderCircColl.")
        End If

            Dim obj As FolderCircColl = New FolderCircColl()
            ' show the framework that this is a child object
            obj.MarkAsChild()
            obj.Fetch(dr)
            Return obj
        End Function

        ''' <summary>
        ''' Factory method. Asynchronously creates a new <see cref="FolderCircColl"/> collection.
        ''' </summary>
        ''' <param name="callback">The completion callback method.</param>
        Friend Shared Sub NewFolderCircColl(callback As EventHandler(Of DataPortalResult(Of FolderCircColl)))
            DataPortal.BeginCreate(Of FolderCircColl)(callback)
        End Sub

        #End Region

        #Region " Constructor "

        ''' <summary>
        ''' Initializes a new instance of the <see cref="FolderCircColl"/> class.
        ''' </summary>
        ''' <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
        Public Sub New()
            ' Use factory methods and do not use direct creation.

            ' show the framework that this is a child object
            MarkAsChild()

            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            AllowNew = True
            AllowEdit = True
            AllowRemove = True
            RaiseListChangedEvents = rlce
        End Sub

        #End Region

        #Region " Object Authorization "

        ''' <summary>
        ''' Adds the object authorization rules.
        ''' </summary>
        Protected Shared Sub AddObjectAuthorizationRules()
            BusinessRules.AddRule(GetType(FolderCircColl), New IsInRole(AuthorizationActions.GetObject, "User"))

            AddObjectAuthorizationRulesExtend()
        End Sub

        ''' <summary>
        ''' Allows the set up of custom object authorization rules.
        ''' </summary>
        Partial Private Shared Sub AddObjectAuthorizationRulesExtend()
        End Sub

        ''' <summary>
        ''' Checks if the current user can create a new FolderCircColl object.
        ''' </summary>
        ''' <returns><c>True</c> if the user can create a new object; otherwise, <c>false</c>.</returns>
        Public Overloads Shared Function CanAddObject() As Boolean
            Return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.CreateObject, GetType(FolderCircColl))
        End Function

        ''' <summary>
        ''' Checks if the current user can retrieve FolderCircColl's properties.
        ''' </summary>
        ''' <returns><c>True</c> if the user can read the object; otherwise, <c>false</c>.</returns>
        Public Overloads Shared Function CanGetObject() As Boolean
            Return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.GetObject, GetType(FolderCircColl))
        End Function

        ''' <summary>
        ''' Checks if the current user can change FolderCircColl's properties.
        ''' </summary>
        ''' <returns><c>True</c> if the user can update the object; otherwise, <c>false</c>.</returns>
        Public Overloads Shared Function CanEditObject() As Boolean
            Return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.EditObject, GetType(FolderCircColl))
        End Function

        ''' <summary>
        ''' Checks if the current user can delete a FolderCircColl object.
        ''' </summary>
        ''' <returns><c>True</c> if the user can delete the object; otherwise, <c>false</c>.</returns>
        Public Overloads Shared Function CanDeleteObject() As Boolean
            Return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.DeleteObject, GetType(FolderCircColl))
        End Function

        #End Region

        #Region " Data Access "

        ''' <summary>
        ''' Loads all <see cref="FolderCircColl"/> collection items from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        Private Sub Fetch(dr As SafeDataReader)
            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            Dim args As New DataPortalHookArgs(dr)
            OnFetchPre(args)
            While dr.Read()
                Add(FolderCirc.GetFolderCirc(dr))
            End While
            OnFetchPost(args)
            RaiseListChangedEvents = rlce
        End Sub

        #End Region

        #Region " DataPortal Hooks "

        ''' <summary>
        ''' Occurs after setting query parameters and before the fetch operation.
        ''' </summary>
        Partial Private Sub OnFetchPre(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs after the fetch operation (object or collection is fully loaded and set up).
        ''' </summary>
        Partial Private Sub OnFetchPost(args As DataPortalHookArgs)
        End Sub

        #End Region

    End Class

End Namespace
