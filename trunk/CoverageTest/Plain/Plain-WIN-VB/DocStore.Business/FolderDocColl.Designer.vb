'  This file was generated by CSLA Object Generator - CslaGenFork v4.5
'
' Filename:    FolderDocColl
' ObjectType:  FolderDocColl
' CSLAType:    EditableChildCollection

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data
Imports DocStore.Business.Util
Imports Csla.Rules
Imports Csla.Rules.CommonRules

Namespace DocStore.Business

    ''' <summary>
    ''' Collection of documents archived in this folder (editable child list).<br/>
    ''' This is a generated base class of <see cref="FolderDocColl"/> business object.
    ''' </summary>
    ''' <remarks>
    ''' This class is child of <see cref="Folder"/> editable root object.<br/>
    ''' The items of the collection are <see cref="FolderDoc"/> objects.
    ''' </remarks>
    <Serializable>
    Public Partial Class FolderDocColl
#If WINFORMS Then
        Inherits BusinessBindingListBase(Of FolderDocColl, FolderDoc)
#Else
        Inherits BusinessListBase(Of FolderDocColl, FolderDoc)
#End If
    
        #Region " Collection Business Methods "

        ''' <summary>
        ''' Adds a new <see cref="FolderDoc"/> item to the collection.
        ''' </summary>
        ''' <param name="item">The item to add.</param>
        ''' <exception cref="System.Security.SecurityException">if the user isn't authorized to add items to the collection.</exception>
        ''' <exception cref="ArgumentException">if the item already exists in the collection.</exception>
        Public Overloads Sub Add(item As FolderDoc)
            If Not CanAddObject() Then
                Throw New System.Security.SecurityException("User not authorized to create a FolderDoc.")
            End If
            If Contains(item.DocID) Then
                Throw New ArgumentException("FolderDoc already exists.")
            End If

            Add(item)
        End Sub

        ''' <summary>
        ''' Removes a <see cref="FolderDoc"/> item from the collection.
        ''' </summary>
        ''' <param name="item">The item to remove.</param>
        ''' <returns><c>True</c> if the item was removed from the collection, otherwise <c>false</c>.</returns>
        ''' <exception cref="System.Security.SecurityException">if the user isn't authorized to remove items from the collection.</exception>
        Public Overloads Function Remove(item As FolderDoc) As Boolean
            If Not CanDeleteObject() Then
                Throw New System.Security.SecurityException("User not authorized to remove a FolderDoc.")
            End If
            Return MyBase.Remove(item)
        End Function

        ''' <summary>
        ''' Adds a new <see cref="FolderDoc"/> item to the collection.
        ''' </summary>
        ''' <param name="docID">The DocID of the object to be added.</param>
        ''' <returns>The new FolderDoc item added to the collection.</returns>
        Public Overloads Function Add(docID As Integer) As FolderDoc
            Dim item = FolderDoc.NewFolderDoc(docID)
            Add(item)
            Return item
        End Function

        ''' <summary>
        ''' Asynchronously adds a new <see cref="FolderDoc"/> item to the collection.
        ''' </summary>
        ''' <param name="docID">The DocID of the object to be added.</param>
        Public Sub BeginAdd(docID As Integer)
            Dim folderDoc As FolderDoc = Nothing
            FolderDoc.NewFolderDoc(docID, Sub(o, e)
                    If e.Error IsNot Nothing Then
                        Throw e.Error
                    Else
                        folderDoc = e.Object
                    End If
                End Sub)
            Add(folderDoc)
        End Sub

        ''' <summary>
        ''' Removes a <see cref="FolderDoc"/> item from the collection.
        ''' </summary>
        ''' <param name="docID">The DocID of the item to be removed.</param>
        Public Overloads Sub Remove(docID As Integer)
            For Each item As FolderDoc In Me
                If item.DocID = docID Then
                    MyBase.Remove(item)
                    Exit For
                End If
            Next
        End Sub

        ''' <summary>
        ''' Determines whether a <see cref="FolderDoc"/> item is in the collection.
        ''' </summary>
        ''' <param name="docID">The DocID of the item to search for.</param>
        ''' <returns><c>True</c> if the FolderDoc is a collection item; otherwise, <c>false</c>.</returns>
        Public Overloads Function Contains(docID As Integer) As Boolean
            For Each item As FolderDoc In Me
                If item.DocID = docID Then
                    Return True
                End If
            Next
            Return False
        End Function

        ''' <summary>
        ''' Determines whether a <see cref="FolderDoc"/> item is in the collection's DeletedList.
        ''' </summary>
        ''' <param name="docID">The DocID of the item to search for.</param>
        ''' <returns><c>True</c> if the FolderDoc is a deleted collection item; otherwise, <c>false</c>.</returns>
        Public Overloads Function ContainsDeleted(docID As Integer) As Boolean
            For Each item As FolderDoc In DeletedList
                If item.DocID = docID Then
                    Return True
                End If
            Next
            Return False
        End Function

        #End Region

        #Region " Find Methods "

        ''' <summary>
        ''' Finds a <see cref="FolderDoc"/> item of the <see cref="FolderDocColl"/> collection, based on a given DocID.
        ''' </summary>
        ''' <param name="docID">The DocID.</param>
        ''' <returns>A <see cref="FolderDoc"/> object.</returns>
        Public Function FindFolderDocByDocID(docID As Integer) As FolderDoc
            For i As Integer = 0 To Me.Count - 1
                If Me(i).DocID.Equals(docID) Then
                    Return Me(i)
                End If
            Next i

            Return Nothing
        End Function

        #End Region

        #Region " Factory Methods "

        ''' <summary>
        ''' Factory method. Creates a new <see cref="FolderDocColl"/> collection.
        ''' </summary>
        ''' <returns>A reference to the created <see cref="FolderDocColl"/> collection.</returns>
        Friend Shared Function NewFolderDocColl() As FolderDocColl
            Return DataPortal.Create(Of FolderDocColl)()
        End Function

        ''' <summary>
        ''' Factory method. Loads a <see cref="FolderDocColl"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="folderID">The FolderID parameter of the FolderDocColl to fetch.</param>
        ''' <returns>A reference to the fetched <see cref="FolderDocColl"/> collection.</returns>
        Friend Shared Function GetFolderDocColl(folderID As Integer) As FolderDocColl
            Return DataPortal.Fetch(Of FolderDocColl)(folderID)
        End Function

        ''' <summary>
        ''' Factory method. Asynchronously creates a new <see cref="FolderDocColl"/> collection.
        ''' </summary>
        ''' <param name="callback">The completion callback method.</param>
        Friend Shared Sub NewFolderDocColl(callback As EventHandler(Of DataPortalResult(Of FolderDocColl)))
            DataPortal.BeginCreate(Of FolderDocColl)(callback)
        End Sub

        ''' <summary>
        ''' Factory method. Asynchronously loads a <see cref="FolderDocColl"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="folderID">The FolderID parameter of the FolderDocColl to fetch.</param>
        ''' <param name="callback">The completion callback method.</param>
        Friend Shared Sub GetFolderDocColl(folderID As Integer, ByVal callback As EventHandler(Of DataPortalResult(Of FolderDocColl)))
            DataPortal.BeginFetch(Of FolderDocColl)(folderID, callback)
        End Sub

        #End Region

        #Region " Constructor "

        ''' <summary>
        ''' Initializes a new instance of the <see cref="FolderDocColl"/> class.
        ''' </summary>
        ''' <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
        Public Sub New()
            ' Use factory methods and do not use direct creation.

            ' show the framework that this is a child object
            MarkAsChild()

            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            AllowNew = FolderDocColl.CanAddObject()
            AllowEdit = FolderDocColl.CanEditObject()
            AllowRemove = FolderDocColl.CanDeleteObject()
            RaiseListChangedEvents = rlce
        End Sub

        #End Region

        #Region " Object Authorization "

        ''' <summary>
        ''' Adds the object authorization rules.
        ''' </summary>
        Protected Shared Sub AddObjectAuthorizationRules()
            BusinessRules.AddRule(GetType(FolderDocColl), New IsInRole(AuthorizationActions.CreateObject, "Archivist"))
            BusinessRules.AddRule(GetType(FolderDocColl), New IsInRole(AuthorizationActions.GetObject, "User"))
            BusinessRules.AddRule(GetType(FolderDocColl), New IsInRole(AuthorizationActions.EditObject, "Author"))
            BusinessRules.AddRule(GetType(FolderDocColl), New IsInRole(AuthorizationActions.DeleteObject, "Admin", "Manager"))

            AddObjectAuthorizationRulesExtend()
        End Sub

        ''' <summary>
        ''' Allows the set up of custom object authorization rules.
        ''' </summary>
        Partial Private Shared Sub AddObjectAuthorizationRulesExtend()
        End Sub

        ''' <summary>
        ''' Checks if the current user can create a new FolderDocColl object.
        ''' </summary>
        ''' <returns><c>True</c> if the user can create a new object; otherwise, <c>false</c>.</returns>
        Public Overloads Shared Function CanAddObject() As Boolean
            Return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.CreateObject, GetType(FolderDocColl))
        End Function

        ''' <summary>
        ''' Checks if the current user can retrieve FolderDocColl's properties.
        ''' </summary>
        ''' <returns><c>True</c> if the user can read the object; otherwise, <c>false</c>.</returns>
        Public Overloads Shared Function CanGetObject() As Boolean
            Return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.GetObject, GetType(FolderDocColl))
        End Function

        ''' <summary>
        ''' Checks if the current user can change FolderDocColl's properties.
        ''' </summary>
        ''' <returns><c>True</c> if the user can update the object; otherwise, <c>false</c>.</returns>
        Public Overloads Shared Function CanEditObject() As Boolean
            Return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.EditObject, GetType(FolderDocColl))
        End Function

        ''' <summary>
        ''' Checks if the current user can delete a FolderDocColl object.
        ''' </summary>
        ''' <returns><c>True</c> if the user can delete the object; otherwise, <c>false</c>.</returns>
        Public Overloads Shared Function CanDeleteObject() As Boolean
            Return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.DeleteObject, GetType(FolderDocColl))
        End Function

        #End Region

        #Region " Data Access "

        ''' <summary>
        ''' Loads a <see cref="FolderDocColl"/> collection from the database, based on given criteria.
        ''' </summary>
        ''' <param name="folderID">The Folder ID.</param>
        Protected Overloads Sub DataPortal_Fetch(folderID As Integer)
            Using ctx = ConnectionManager(Of SqlConnection).GetManager(Database.DocStoreConnection, False)
                Using cmd = New SqlCommand("GetFolderDocColl", ctx.Connection)
                    cmd.CommandType = CommandType.StoredProcedure
                    cmd.Parameters.AddWithValue("@FolderID", folderID).DbType = DbType.Int32
                    Dim args As New DataPortalHookArgs(cmd, folderID)
                    OnFetchPre(args)
                    LoadCollection(cmd)
                    OnFetchPost(args)
                End Using
            End Using
        End Sub

        Private Sub LoadCollection(cmd As SqlCommand)
            Using dr As New SafeDataReader(cmd.ExecuteReader())
                Fetch(dr)
            End Using
        End Sub

        ''' <summary>
        ''' Loads all <see cref="FolderDocColl"/> collection items from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        Private Sub Fetch(dr As SafeDataReader)
            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            While dr.Read()
                Add(FolderDoc.GetFolderDoc(dr))
            End While
            RaiseListChangedEvents = rlce
        End Sub

        #End Region

        #Region " DataPortal Hooks "

        ''' <summary>
        ''' Occurs after setting query parameters and before the fetch operation.
        ''' </summary>
        Partial Private Sub OnFetchPre(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs after the fetch operation (object or collection is fully loaded and set up).
        ''' </summary>
        Partial Private Sub OnFetchPost(args As DataPortalHookArgs)
        End Sub

        #End Region

    End Class

End Namespace
