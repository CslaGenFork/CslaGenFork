'  This file was generated by CSLA Object Generator - CslaGenFork v4.5
'
' Filename:    DocInfo
' ObjectType:  DocInfo
' CSLAType:    ReadOnlyObject

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data
Imports DocStore.Business.Util
Imports DocStore.Business.Admin

Namespace DocStore.Business

    ''' <summary>
    ''' Document basic information (read only object).<br/>
    ''' This is a generated base class of <see cref="DocInfo"/> business object.
    ''' </summary>
    ''' <remarks>
    ''' This class is an item of <see cref="DocList"/> collection.
    ''' </remarks>
    <Serializable>
    Public Partial Class DocInfo
        Inherits ReadOnlyBase(Of DocInfo)

        #Region " Business Properties "

        ''' <summary>
        ''' Maintains metadata about <see cref="DocID"/> property.
        ''' </summary>
        Public Shared ReadOnly DocIDProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p) p.DocID, "Doc ID", -1)
        ''' <summary>
        ''' Gets the Doc ID.
        ''' </summary>
        ''' <value>The Doc ID.</value>
        Public ReadOnly Property DocID As Integer
            Get
                Return GetProperty(DocIDProperty)
            End Get
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="DocClassID"/> property.
        ''' </summary>
        Public Shared ReadOnly DocClassIDProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p) p.DocClassID, "Doc Class ID")
        ''' <summary>
        ''' Gets the Doc Class ID.
        ''' </summary>
        ''' <value>The Doc Class ID.</value>
        Protected ReadOnly Property DocClassID As Integer
            Get
                Return GetProperty(DocClassIDProperty)
            End Get
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="DocTypeID"/> property.
        ''' </summary>
        Public Shared ReadOnly DocTypeIDProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p) p.DocTypeID, "Doc Type ID")
        ''' <summary>
        ''' Gets the Doc Type ID.
        ''' </summary>
        ''' <value>The Doc Type ID.</value>
        Protected ReadOnly Property DocTypeID As Integer
            Get
                Return GetProperty(DocTypeIDProperty)
            End Get
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="SenderID"/> property.
        ''' </summary>
        Public Shared ReadOnly SenderIDProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p) p.SenderID, "Sender ID")
        ''' <summary>
        ''' Gets the Sender ID.
        ''' </summary>
        ''' <value>The Sender ID.</value>
        Protected ReadOnly Property SenderID As Integer
            Get
                Return GetProperty(SenderIDProperty)
            End Get
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="RecipientID"/> property.
        ''' </summary>
        Public Shared ReadOnly RecipientIDProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p) p.RecipientID, "Recipient ID")
        ''' <summary>
        ''' Gets the Recipient ID.
        ''' </summary>
        ''' <value>The Recipient ID.</value>
        Protected ReadOnly Property RecipientID As Integer
            Get
                Return GetProperty(RecipientIDProperty)
            End Get
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="DocRef"/> property.
        ''' </summary>
        Public Shared ReadOnly DocRefProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.DocRef, "Doc Ref")
        ''' <summary>
        ''' Gets the Doc Ref.
        ''' </summary>
        ''' <value>The Doc Ref.</value>
        Public ReadOnly Property DocRef As String
            Get
                Return GetProperty(DocRefProperty)
            End Get
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="DocDate"/> property.
        ''' </summary>
        Public Shared ReadOnly DocDateProperty As PropertyInfo(Of SmartDate) = RegisterProperty(Of SmartDate)(Function(p) p.DocDate, "Doc Date")
        ''' <summary>
        ''' Gets the Doc Date.
        ''' </summary>
        ''' <value>The Doc Date.</value>
        Public ReadOnly Property DocDate As String
            Get
                Return GetPropertyConvert(Of SmartDate, String)(DocDateProperty)
            End Get
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="Subject"/> property.
        ''' </summary>
        Public Shared ReadOnly SubjectProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.Subject, "Subject")
        ''' <summary>
        ''' Gets the Subject.
        ''' </summary>
        ''' <value>The Subject.</value>
        Public ReadOnly Property Subject As String
            Get
                Return GetProperty(SubjectProperty)
            End Get
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="DocStatusID"/> property.
        ''' </summary>
        Public Shared ReadOnly DocStatusIDProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p) p.DocStatusID, "Doc Status ID")
        ''' <summary>
        ''' Gets the Doc Status ID.
        ''' </summary>
        ''' <value>The Doc Status ID.</value>
        Protected ReadOnly Property DocStatusID As Integer
            Get
                Return GetProperty(DocStatusIDProperty)
            End Get
        End Property

        ''' <summary>
        ''' Gets the Doc Class Name.
        ''' </summary>
        ''' <value>The Doc Class Name.</value>
        Public ReadOnly Property DocClassName As String
            Get
                Dim result = String.Empty
                If DocClassNVL.GetDocClassNVL().ContainsKey(DocClassID) Then
                    result = DocClassNVL.GetDocClassNVL().GetItemByKey(DocClassID).Value
                End If
                Return result
            End Get
        End Property

        ''' <summary>
        ''' Gets the Doc Type Name.
        ''' </summary>
        ''' <value>The Doc Type Name.</value>
        Public ReadOnly Property DocTypeName As String
            Get
                Dim result = String.Empty
                If DocTypeNVL.GetDocTypeNVL().ContainsKey(DocTypeID) Then
                    result = DocTypeNVL.GetDocTypeNVL().GetItemByKey(DocTypeID).Value
                End If
                Return result
            End Get
        End Property

        ''' <summary>
        ''' Gets the Sender Name.
        ''' </summary>
        ''' <value>The Sender Name.</value>
        Public ReadOnly Property SenderName As String
            Get
                Dim result = String.Empty
                If UserNVL.GetUserNVL().ContainsKey(SenderID) Then
                    result = UserNVL.GetUserNVL().GetItemByKey(SenderID).Value
                End If
                Return result
            End Get
        End Property

        ''' <summary>
        ''' Gets the Recipient Name.
        ''' </summary>
        ''' <value>The Recipient Name.</value>
        Public ReadOnly Property RecipientName As String
            Get
                Dim result = String.Empty
                If UserNVL.GetUserNVL().ContainsKey(RecipientID) Then
                    result = UserNVL.GetUserNVL().GetItemByKey(RecipientID).Value
                End If
                Return result
            End Get
        End Property

        ''' <summary>
        ''' Gets the Doc Status Name.
        ''' </summary>
        ''' <value>The Doc Status Name.</value>
        Public ReadOnly Property DocStatusName As String
            Get
                Dim result = String.Empty
                If DocStatusNVL.GetDocStatusNVL().ContainsKey(DocStatusID) Then
                    result = DocStatusNVL.GetDocStatusNVL().GetItemByKey(DocStatusID).Value
                End If
                Return result
            End Get
        End Property

        #End Region

        #Region " Factory Methods "

        ''' <summary>
        ''' Factory method. Loads a <see cref="DocInfo"/> object from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        ''' <returns>A reference to the fetched <see cref="DocInfo"/> object.</returns>
        Friend Shared Function GetDocInfo(dr As SafeDataReader) As DocInfo
            Dim obj As DocInfo = New DocInfo()
            obj.Fetch(dr)
            Return obj
        End Function

        #End Region

        #Region " Constructor "

        ''' <summary>
        ''' Initializes a new instance of the <see cref="DocInfo"/> class.
        ''' </summary>
        ''' <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
        Public Sub New()
            ' Use factory methods and do not use direct creation.
        End Sub

        #End Region

        #Region " Update properties on saved object event "

        ''' <summary>
        ''' Existing <see cref="DocInfo"/> object is updated by <see cref="Doc"/> Saved event.
        ''' </summary>
        Friend Shared Function LoadInfo(doc As Doc) As DocInfo
            Dim info As New DocInfo()
            info.UpdatePropertiesOnSaved(doc)
            Return info
        End Function

        ''' <summary>
        ''' Properties on <see cref="DocInfo"/> object are updated by <see cref="Doc"/> Saved event.
        ''' </summary>
        Friend Sub UpdatePropertiesOnSaved(doc As Doc)
            LoadProperty(DocClassIDProperty, doc.DocClassID)
            LoadProperty(DocTypeIDProperty, doc.DocTypeID)
            LoadProperty(SenderIDProperty, doc.SenderID)
            LoadProperty(RecipientIDProperty, doc.RecipientID)
            LoadProperty(DocRefProperty, doc.DocRef)
            LoadProperty(DocDateProperty, CType(doc.DocDate, SmartDate))
            LoadProperty(SubjectProperty, doc.Subject)
            LoadProperty(DocStatusIDProperty, doc.DocStatusID)
        End Sub

        #End Region

        #Region " Data Access "

        ''' <summary>
        ''' Loads a <see cref="DocInfo"/> object from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        Private Sub Fetch(dr As SafeDataReader)
            ' Value properties
            LoadProperty(DocIDProperty, dr.GetInt32("DocID"))
            LoadProperty(DocClassIDProperty, dr.GetInt32("DocClassID"))
            LoadProperty(DocTypeIDProperty, dr.GetInt32("DocTypeID"))
            LoadProperty(SenderIDProperty, dr.GetInt32("SenderID"))
            LoadProperty(RecipientIDProperty, dr.GetInt32("RecipientID"))
            LoadProperty(DocRefProperty, dr.GetString("DocRef"))
            LoadProperty(DocDateProperty, dr.GetSmartDate("DocDate", True))
            LoadProperty(SubjectProperty, dr.GetString("Subject"))
            LoadProperty(DocStatusIDProperty, dr.GetInt32("DocStatusID"))
            Dim args As New DataPortalHookArgs(dr)
            OnFetchRead(args)
        End Sub

        #End Region

        #Region " DataPortal Hooks "

        ''' <summary>
        ''' Occurs after the low level fetch operation, before the data reader is destroyed.
        ''' </summary>
        Partial Private Sub OnFetchRead(args As DataPortalHookArgs)
        End Sub

        #End Region

    End Class
End Namespace
