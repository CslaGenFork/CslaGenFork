'  This file was generated by CSLA Object Generator - CslaGenFork v4.5
'
' Filename:    FolderList
' ObjectType:  FolderList
' CSLAType:    ReadOnlyCollection

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data
Imports DocStore.Business.Util

Namespace DocStore.Business

    ''' <summary>
    ''' Collection of folder's basic information (read only list).<br/>
    ''' This is a generated base class of <see cref="FolderList"/> business object.
    ''' This class is a root collection.
    ''' </summary>
    ''' <remarks>
    ''' The items of the collection are <see cref="FolderInfo"/> objects.
    ''' </remarks>
    <Serializable()>
    Partial Public Class FolderList
        Inherits ReadOnlyListBase(Of FolderList, FolderInfo)
    
        #Region " Collection Business Methods "

        ''' <summary>
        ''' Determines whether a <see cref="FolderInfo"/> item is in the collection.
        ''' </summary>
        ''' <param name="folderID">The FolderID of the item to search for.</param>
        ''' <returns><c>True</c> if the FolderInfo is a collection item; otherwise, <c>false</c>.</returns>
        Public Overloads Function Contains(folderID As Integer) As Boolean
            For Each item As FolderInfo In Me
                If item.FolderID = folderID Then
                    Return True
                End If
            Next
            Return False
        End Function

        #End Region

        #Region " Find Methods "

        ''' <summary>
        ''' Finds a <see cref="FolderInfo"/> item of the <see cref="FolderList"/> collection, based on a given FolderID.
        ''' </summary>
        ''' <param name="folderID">The FolderID.</param>
        ''' <returns>A <see cref="FolderInfo"/> object.</returns>
        Public Function FindFolderInfoByFolderID(folderID As Integer) As FolderInfo
            For i As Integer = 0 To Me.Count - 1
                If Me(i).FolderID.Equals(folderID) Then
                    Return Me(i)
                End If
            Next i

            Return Nothing
        End Function

        #End Region

        #Region " Private Fields "

        Private Shared _list As FolderList

        #End Region

        #Region " Cache Management Methods "

        ''' <summary>
        ''' Clears the in-memory FolderList cache so it is reloaded on the next request.
        ''' </summary>
        Public Shared Sub InvalidateCache()
            _list = Nothing
        End Sub

        ''' <summary>
        ''' Used by async loaders to load the cache.
        ''' </summary>
        ''' <param name="lst">The list to cache.</param>
        Friend Shared Sub SetCache(lst As FolderList)
            _list = lst
        End Sub

        Friend Shared ReadOnly Property IsCached As Boolean
            Get
                Return _list IsNot Nothing
            End Get
        End Property

        #End Region

        #Region " Factory Methods "

        ''' <summary>
        ''' Factory method. Loads a <see cref="FolderList"/> collection.
        ''' </summary>
        ''' <returns>A reference to the fetched <see cref="FolderList"/> collection.</returns>
        Public Shared Function GetFolderList() As FolderList
            If _list Is Nothing Then
                _list = DataPortal.Fetch(Of FolderList)()
            End If

            Return _list
        End Function

        ''' <summary>
        ''' Factory method. Loads a <see cref="FolderList"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="folderTypeID">The FolderTypeID parameter of the FolderList to fetch.</param>
        ''' <param name="folderRef">The FolderRef parameter of the FolderList to fetch.</param>
        ''' <param name="year">The Year parameter of the FolderList to fetch.</param>
        ''' <param name="subject">The Subject parameter of the FolderList to fetch.</param>
        ''' <param name="folderStatusID">The FolderStatusID parameter of the FolderList to fetch.</param>
        ''' <param name="createDate">The CreateDate parameter of the FolderList to fetch.</param>
        ''' <param name="createUserID">The CreateUserID parameter of the FolderList to fetch.</param>
        ''' <param name="changeDate">The ChangeDate parameter of the FolderList to fetch.</param>
        ''' <param name="changeUserID">The ChangeUserID parameter of the FolderList to fetch.</param>
        ''' <returns>A reference to the fetched <see cref="FolderList"/> collection.</returns>
        Public Shared Function GetFolderList(folderTypeID As Integer?, folderRef As String, year As Integer?, subject As String, folderStatusID As Integer?, createDate As SmartDate, createUserID As Integer?, changeDate As SmartDate, changeUserID As Integer?) As FolderList
            Return DataPortal.Fetch(Of FolderList)(New FilteredCriteria(folderTypeID, folderRef, year, subject, folderStatusID, createDate, createUserID, changeDate, changeUserID))
        End Function

        ''' <summary>
        ''' Factory method. Asynchronously loads a <see cref="FolderList"/> collection.
        ''' </summary>
        ''' <param name="callback">The completion callback method.</param>
        Public Shared Sub GetFolderList(ByVal callback As EventHandler(Of DataPortalResult(Of FolderList)))
            If _list Is Nothing Then
                DataPortal.BeginFetch(Of FolderList)(Sub(o, e)
                        _list = e.Object
                        callback(o, e)
                    End Sub)
            Else
                callback(Nothing, New DataPortalResult(Of FolderList)(_list, Nothing, Nothing))
            End If
        End Sub

        ''' <summary>
        ''' Factory method. Asynchronously loads a <see cref="FolderList"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="folderTypeID">The FolderTypeID parameter of the FolderList to fetch.</param>
        ''' <param name="folderRef">The FolderRef parameter of the FolderList to fetch.</param>
        ''' <param name="year">The Year parameter of the FolderList to fetch.</param>
        ''' <param name="subject">The Subject parameter of the FolderList to fetch.</param>
        ''' <param name="folderStatusID">The FolderStatusID parameter of the FolderList to fetch.</param>
        ''' <param name="createDate">The CreateDate parameter of the FolderList to fetch.</param>
        ''' <param name="createUserID">The CreateUserID parameter of the FolderList to fetch.</param>
        ''' <param name="changeDate">The ChangeDate parameter of the FolderList to fetch.</param>
        ''' <param name="changeUserID">The ChangeUserID parameter of the FolderList to fetch.</param>
        ''' <param name="callback">The completion callback method.</param>
        Public Shared Sub GetFolderList(folderTypeID As Integer?, folderRef As String, year As Integer?, subject As String, folderStatusID As Integer?, createDate As SmartDate, createUserID As Integer?, changeDate As SmartDate, changeUserID As Integer?, ByVal callback As EventHandler(Of DataPortalResult(Of FolderList)))
            DataPortal.BeginFetch(Of FolderList)(New FilteredCriteria(folderTypeID, folderRef, year, subject, folderStatusID, createDate, createUserID, changeDate, changeUserID), callback)
        End Sub

        #End Region

        #Region " Constructor "

        ''' <summary>
        ''' Initializes a new instance of the <see cref="FolderList"/> class.
        ''' </summary>
        ''' <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
        Public Sub New()
            ' Use factory methods and do not use direct creation.

            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            AllowNew = False
            AllowEdit = False
            AllowRemove = False
            RaiseListChangedEvents = rlce
        End Sub

        #End Region

        #Region " Criteria "

        ''' <summary>
        ''' FilteredCriteria criteria.
        ''' </summary>
        <Serializable()>
        Protected Class FilteredCriteria
            Inherits CriteriaBase(Of FilteredCriteria)

            ''' <summary>
            ''' Maintains metadata about <see cref="FolderTypeID"/> property.
            ''' </summary>
            Public Shared ReadOnly FolderTypeIDProperty As PropertyInfo(Of Integer?) = RegisterProperty(Of Integer?)(Function(p) p.FolderTypeID)
            ''' <summary>
            ''' Gets or sets the Folder Type ID.
            ''' </summary>
            ''' <value>The Folder Type ID.</value>
            Public Property FolderTypeID As Integer?
                Get
                    Return ReadProperty(FolderTypeIDProperty)
                End Get
                Set
                    LoadProperty(FolderTypeIDProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="FolderRef"/> property.
            ''' </summary>
            Public Shared ReadOnly FolderRefProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.FolderRef)
            ''' <summary>
            ''' Gets or sets the Folder Ref.
            ''' </summary>
            ''' <value>The Folder Ref.</value>
            Public Property FolderRef As String
                Get
                    Return ReadProperty(FolderRefProperty)
                End Get
                Set
                    LoadProperty(FolderRefProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="Year"/> property.
            ''' </summary>
            Public Shared ReadOnly YearProperty As PropertyInfo(Of Integer?) = RegisterProperty(Of Integer?)(Function(p) p.Year)
            ''' <summary>
            ''' Gets or sets the Year.
            ''' </summary>
            ''' <value>The Year.</value>
            Public Property Year As Integer?
                Get
                    Return ReadProperty(YearProperty)
                End Get
                Set
                    LoadProperty(YearProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="Subject"/> property.
            ''' </summary>
            Public Shared ReadOnly SubjectProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.Subject)
            ''' <summary>
            ''' Gets or sets the Subject.
            ''' </summary>
            ''' <value>The Subject.</value>
            Public Property Subject As String
                Get
                    Return ReadProperty(SubjectProperty)
                End Get
                Set
                    LoadProperty(SubjectProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="FolderStatusID"/> property.
            ''' </summary>
            Public Shared ReadOnly FolderStatusIDProperty As PropertyInfo(Of Integer?) = RegisterProperty(Of Integer?)(Function(p) p.FolderStatusID)
            ''' <summary>
            ''' Gets or sets the Folder Status ID.
            ''' </summary>
            ''' <value>The Folder Status ID.</value>
            Public Property FolderStatusID As Integer?
                Get
                    Return ReadProperty(FolderStatusIDProperty)
                End Get
                Set
                    LoadProperty(FolderStatusIDProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="CreateDate"/> property.
            ''' </summary>
            Public Shared ReadOnly CreateDateProperty As PropertyInfo(Of SmartDate) = RegisterProperty(Of SmartDate)(Function(p) p.CreateDate)
            ''' <summary>
            ''' Gets or sets the Create Date.
            ''' </summary>
            ''' <value>The Create Date.</value>
            Public Property CreateDate As SmartDate
                Get
                    Return ReadProperty(CreateDateProperty)
                End Get
                Set
                    LoadProperty(CreateDateProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="CreateUserID"/> property.
            ''' </summary>
            Public Shared ReadOnly CreateUserIDProperty As PropertyInfo(Of Integer?) = RegisterProperty(Of Integer?)(Function(p) p.CreateUserID)
            ''' <summary>
            ''' Gets or sets the Create User ID.
            ''' </summary>
            ''' <value>The Create User ID.</value>
            Public Property CreateUserID As Integer?
                Get
                    Return ReadProperty(CreateUserIDProperty)
                End Get
                Set
                    LoadProperty(CreateUserIDProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="ChangeDate"/> property.
            ''' </summary>
            Public Shared ReadOnly ChangeDateProperty As PropertyInfo(Of SmartDate) = RegisterProperty(Of SmartDate)(Function(p) p.ChangeDate)
            ''' <summary>
            ''' Gets or sets the Change Date.
            ''' </summary>
            ''' <value>The Change Date.</value>
            Public Property ChangeDate As SmartDate
                Get
                    Return ReadProperty(ChangeDateProperty)
                End Get
                Set
                    LoadProperty(ChangeDateProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="ChangeUserID"/> property.
            ''' </summary>
            Public Shared ReadOnly ChangeUserIDProperty As PropertyInfo(Of Integer?) = RegisterProperty(Of Integer?)(Function(p) p.ChangeUserID)
            ''' <summary>
            ''' Gets or sets the Change User ID.
            ''' </summary>
            ''' <value>The Change User ID.</value>
            Public Property ChangeUserID As Integer?
                Get
                    Return ReadProperty(ChangeUserIDProperty)
                End Get
                Set
                    LoadProperty(ChangeUserIDProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Initializes a new instance of the <see cref="FilteredCriteria"/> class.
            ''' </summary>
            ''' <remarks> A parameterless constructor is required by the MobileFormatter.</remarks>
            <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
            Public Sub New()
            End Sub

            ''' <summary>
            ''' Initializes a new instance of the <see cref="FilteredCriteria"/> class.
            ''' </summary>
            ''' <param name="p_folderTypeID">The FolderTypeID.</param>
            ''' <param name="p_folderRef">The FolderRef.</param>
            ''' <param name="p_year">The Year.</param>
            ''' <param name="p_subject">The Subject.</param>
            ''' <param name="p_folderStatusID">The FolderStatusID.</param>
            ''' <param name="p_createDate">The CreateDate.</param>
            ''' <param name="p_createUserID">The CreateUserID.</param>
            ''' <param name="p_changeDate">The ChangeDate.</param>
            ''' <param name="p_changeUserID">The ChangeUserID.</param>
            Public Sub New(p_folderTypeID As Integer?, p_folderRef As String, p_year As Integer?, p_subject As String, p_folderStatusID As Integer?, p_createDate As SmartDate, p_createUserID As Integer?, p_changeDate As SmartDate, p_changeUserID As Integer?)
                FolderTypeID = p_folderTypeID
                FolderRef = p_folderRef
                Year = p_year
                Subject = p_subject
                FolderStatusID = p_folderStatusID
                CreateDate = p_createDate
                CreateUserID = p_createUserID
                ChangeDate = p_changeDate
                ChangeUserID = p_changeUserID
            End Sub

            ''' <summary>
            ''' Determines whether the specified <see cref="System.Object"/> is equal to this instance.
            ''' </summary>
            ''' <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
            ''' <returns><c>True</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            Public Overrides Function Equals(obj As Object) As Boolean
                If TypeOf obj Is FilteredCriteria Then
                    Dim c As FilteredCriteria = obj
                    If Not FolderTypeID.Equals(c.FolderTypeID) Then
                        Return False
                    End If
                    If Not FolderRef.Equals(c.FolderRef) Then
                        Return False
                    End If
                    If Not Year.Equals(c.Year) Then
                        Return False
                    End If
                    If Not Subject.Equals(c.Subject) Then
                        Return False
                    End If
                    If Not FolderStatusID.Equals(c.FolderStatusID) Then
                        Return False
                    End If
                    If Not CreateDate.Equals(c.CreateDate) Then
                        Return False
                    End If
                    If Not CreateUserID.Equals(c.CreateUserID) Then
                        Return False
                    End If
                    If Not ChangeDate.Equals(c.ChangeDate) Then
                        Return False
                    End If
                    If Not ChangeUserID.Equals(c.ChangeUserID) Then
                        Return False
                    End If
                    Return True
                End If
                Return False
            End Function

            ''' <summary>
            ''' Returns a hash code for this instance.
            ''' </summary>
            ''' <returns>An hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            Public Overrides Function GetHashCode() As Integer
                Return String.Concat("FilteredCriteria", FolderTypeID.ToString(), FolderRef.ToString(), Year.ToString(), Subject.ToString(), FolderStatusID.ToString(), CreateDate.ToString(), CreateUserID.ToString(), ChangeDate.ToString(), ChangeUserID.ToString()).GetHashCode()
            End Function
        End Class

        #End Region

        #Region " Data Access "

        ''' <summary>
        ''' Loads a <see cref="FolderList"/> collection from the database or from the cache.
        ''' </summary>
        Protected Overloads Sub DataPortal_Fetch()
            If IsCached Then
                LoadCachedList()
                Exit Sub
            End If

            Using ctx = ConnectionManager(Of SqlConnection).GetManager(Database.DocStoreConnection, False)
                Using cmd = New SqlCommand("GetFolderList", ctx.Connection)
                    cmd.CommandType = CommandType.StoredProcedure
                    Dim args As New DataPortalHookArgs(cmd)
                    OnFetchPre(args)
                    LoadCollection(cmd)
                    OnFetchPost(args)
                End Using
            End Using
            _list = Me
        End Sub

        Private Sub LoadCachedList()
            IsReadOnly = False
            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            AddRange(_list)
            RaiseListChangedEvents = rlce
            IsReadOnly = True
        End Sub

        ''' <summary>
        ''' Loads a <see cref="FolderList"/> collection from the database, based on given criteria.
        ''' </summary>
        ''' <param name="crit">The fetch criteria.</param>
        Protected Overloads Sub DataPortal_Fetch(crit As FilteredCriteria)
            Using ctx = ConnectionManager(Of SqlConnection).GetManager(Database.DocStoreConnection, False)
                Using cmd = New SqlCommand("GetFolderList", ctx.Connection)
                    cmd.CommandType = CommandType.StoredProcedure
                    cmd.Parameters.AddWithValue("@FolderTypeID", If(crit.FolderTypeID Is Nothing, DBNull.Value, crit.FolderTypeID.Value)).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@FolderRef", If(crit.FolderRef Is Nothing, DBNull.Value, crit.FolderRef)).DbType = DbType.String
                    cmd.Parameters.AddWithValue("@Year", If(crit.Year Is Nothing, DBNull.Value, crit.Year.Value)).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@Subject", If(crit.Subject Is Nothing, DBNull.Value, crit.Subject)).DbType = DbType.String
                    cmd.Parameters.AddWithValue("@FolderStatusID", If(crit.FolderStatusID Is Nothing, DBNull.Value, crit.FolderStatusID.Value)).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@CreateDate", If(crit.CreateDate.IsEmpty, DBNull.Value, crit.CreateDate).DBValue).DbType = DbType.DateTime2
                    cmd.Parameters.AddWithValue("@CreateUserID", If(crit.CreateUserID Is Nothing, DBNull.Value, crit.CreateUserID.Value)).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@ChangeDate", If(crit.ChangeDate.IsEmpty, DBNull.Value, crit.ChangeDate).DBValue).DbType = DbType.DateTime2
                    cmd.Parameters.AddWithValue("@ChangeUserID", If(crit.ChangeUserID Is Nothing, DBNull.Value, crit.ChangeUserID.Value)).DbType = DbType.Int32
                    Dim args As New DataPortalHookArgs(cmd, crit)
                    OnFetchPre(args)
                    LoadCollection(cmd)
                    OnFetchPost(args)
                End Using
            End Using
        End Sub

        Private Sub LoadCollection(cmd As SqlCommand)
            Using dr As New SafeDataReader(cmd.ExecuteReader())
                Fetch(dr)
            End Using
        End Sub

        ''' <summary>
        ''' Loads all <see cref="FolderList"/> collection items from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        Private Sub Fetch(dr As SafeDataReader)
            IsReadOnly = False
            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            While dr.Read()
                Add(FolderInfo.GetFolderInfo(dr))
            End While
            RaiseListChangedEvents = rlce
            IsReadOnly = True
        End Sub

        #End Region

        #Region " DataPortal Hooks "

        ''' <summary>
        ''' Occurs after setting query parameters and before the fetch operation.
        ''' </summary>
        Partial Private Sub OnFetchPre(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs after the fetch operation (object or collection is fully loaded and set up).
        ''' </summary>
        Partial Private Sub OnFetchPost(args As DataPortalHookArgs)
        End Sub

        #End Region

    End Class
End Namespace
