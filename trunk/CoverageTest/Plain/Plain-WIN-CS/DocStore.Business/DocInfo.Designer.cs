//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    DocInfo
// ObjectType:  DocInfo
// CSLAType:    ReadOnlyObject

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using DocStore.Business.Util;
using DocStore.Business.Admin;

namespace DocStore.Business
{

    /// <summary>
    /// Document basic information (read only object).<br/>
    /// This is a generated <see cref="DocInfo"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="DocList"/> collection.
    /// </remarks>
    [Serializable]
    public partial class DocInfo : ReadOnlyBase<DocInfo>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="DocID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> DocIDProperty = RegisterProperty<int>(p => p.DocID, "Doc ID", -1);
        /// <summary>
        /// Gets the Doc ID.
        /// </summary>
        /// <value>The Doc ID.</value>
        public int DocID
        {
            get { return GetProperty(DocIDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocClassID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> DocClassIDProperty = RegisterProperty<int>(p => p.DocClassID, "Doc Class ID");
        /// <summary>
        /// Gets the Doc Class ID.
        /// </summary>
        /// <value>The Doc Class ID.</value>
        protected int DocClassID
        {
            get { return GetProperty(DocClassIDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocTypeID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> DocTypeIDProperty = RegisterProperty<int>(p => p.DocTypeID, "Doc Type ID");
        /// <summary>
        /// Gets the Doc Type ID.
        /// </summary>
        /// <value>The Doc Type ID.</value>
        protected int DocTypeID
        {
            get { return GetProperty(DocTypeIDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SenderID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> SenderIDProperty = RegisterProperty<int>(p => p.SenderID, "Sender ID");
        /// <summary>
        /// Gets the Sender ID.
        /// </summary>
        /// <value>The Sender ID.</value>
        protected int SenderID
        {
            get { return GetProperty(SenderIDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="RecipientID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> RecipientIDProperty = RegisterProperty<int>(p => p.RecipientID, "Recipient ID");
        /// <summary>
        /// Gets the Recipient ID.
        /// </summary>
        /// <value>The Recipient ID.</value>
        protected int RecipientID
        {
            get { return GetProperty(RecipientIDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocRef"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DocRefProperty = RegisterProperty<string>(p => p.DocRef, "Doc Ref", null);
        /// <summary>
        /// Gets the Doc Ref.
        /// </summary>
        /// <value>The Doc Ref.</value>
        public string DocRef
        {
            get { return GetProperty(DocRefProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocDate"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> DocDateProperty = RegisterProperty<SmartDate>(p => p.DocDate, "Doc Date");
        /// <summary>
        /// Gets the Doc Date.
        /// </summary>
        /// <value>The Doc Date.</value>
        public string DocDate
        {
            get { return GetPropertyConvert<SmartDate, string>(DocDateProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Subject"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SubjectProperty = RegisterProperty<string>(p => p.Subject, "Subject");
        /// <summary>
        /// Gets the Subject.
        /// </summary>
        /// <value>The Subject.</value>
        public string Subject
        {
            get { return GetProperty(SubjectProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocStatusID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> DocStatusIDProperty = RegisterProperty<int>(p => p.DocStatusID, "Doc Status ID");
        /// <summary>
        /// Gets the Doc Status ID.
        /// </summary>
        /// <value>The Doc Status ID.</value>
        protected int DocStatusID
        {
            get { return GetProperty(DocStatusIDProperty); }
        }

        /// <summary>
        /// Gets the Doc Class Name.
        /// </summary>
        /// <value>The Doc Class Name.</value>
        public string DocClassName
        {
            get
            {
                var result = string.Empty;
                if (DocClassNVL.GetDocClassNVL().ContainsKey(DocClassID))
                    result = DocClassNVL.GetDocClassNVL().GetItemByKey(DocClassID).Value;
                return result;
            }
        }

        /// <summary>
        /// Gets the Doc Type Name.
        /// </summary>
        /// <value>The Doc Type Name.</value>
        public string DocTypeName
        {
            get
            {
                var result = string.Empty;
                if (DocTypeNVL.GetDocTypeNVL().ContainsKey(DocTypeID))
                    result = DocTypeNVL.GetDocTypeNVL().GetItemByKey(DocTypeID).Value;
                return result;
            }
        }

        /// <summary>
        /// Gets the Sender Name.
        /// </summary>
        /// <value>The Sender Name.</value>
        public string SenderName
        {
            get
            {
                var result = string.Empty;
                if (UserNVL.GetUserNVL().ContainsKey(SenderID))
                    result = UserNVL.GetUserNVL().GetItemByKey(SenderID).Value;
                return result;
            }
        }

        /// <summary>
        /// Gets the Recipient Name.
        /// </summary>
        /// <value>The Recipient Name.</value>
        public string RecipientName
        {
            get
            {
                var result = string.Empty;
                if (UserNVL.GetUserNVL().ContainsKey(RecipientID))
                    result = UserNVL.GetUserNVL().GetItemByKey(RecipientID).Value;
                return result;
            }
        }

        /// <summary>
        /// Gets the Doc Status Name.
        /// </summary>
        /// <value>The Doc Status Name.</value>
        public string DocStatusName
        {
            get
            {
                var result = string.Empty;
                if (DocStatusNVL.GetDocStatusNVL().ContainsKey(DocStatusID))
                    result = DocStatusNVL.GetDocStatusNVL().GetItemByKey(DocStatusID).Value;
                return result;
            }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="DocInfo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="DocInfo"/> object.</returns>
        internal static DocInfo GetDocInfo(SafeDataReader dr)
        {
            DocInfo obj = new DocInfo();
            obj.Fetch(dr);
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DocInfo"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public DocInfo()
        {
            // Use factory methods and do not use direct creation.
        }

        #endregion

        #region Update properties on saved object event

        /// <summary>
        /// Existing <see cref="DocInfo"/> object is updated by <see cref="Doc"/> Saved event.
        /// </summary>
        internal static DocInfo LoadInfo(Doc doc)
        {
            var info = new DocInfo();
            info.UpdatePropertiesOnSaved(doc);
            return info;
        }

        /// <summary>
        /// Properties on <see cref="DocInfo"/> object are updated by <see cref="Doc"/> Saved event.
        /// </summary>
        internal void UpdatePropertiesOnSaved(Doc doc)
        {
            LoadProperty(DocIDProperty, doc.DocID);
            LoadProperty(DocClassIDProperty, doc.DocClassID);
            LoadProperty(DocTypeIDProperty, doc.DocTypeID);
            LoadProperty(SenderIDProperty, doc.SenderID);
            LoadProperty(RecipientIDProperty, doc.RecipientID);
            LoadProperty(DocRefProperty, doc.DocRef);
            LoadProperty(DocDateProperty, (SmartDate)doc.DocDate);
            LoadProperty(SubjectProperty, doc.Subject);
            LoadProperty(DocStatusIDProperty, doc.DocStatusID);
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="DocInfo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(DocIDProperty, dr.GetInt32("DocID"));
            LoadProperty(DocClassIDProperty, dr.GetInt32("DocClassID"));
            LoadProperty(DocTypeIDProperty, dr.GetInt32("DocTypeID"));
            LoadProperty(SenderIDProperty, dr.GetInt32("SenderID"));
            LoadProperty(RecipientIDProperty, dr.GetInt32("RecipientID"));
            LoadProperty(DocRefProperty, dr.IsDBNull("DocRef") ? null : dr.GetString("DocRef"));
            LoadProperty(DocDateProperty, dr.GetSmartDate("DocDate", true));
            LoadProperty(SubjectProperty, dr.GetString("Subject"));
            LoadProperty(DocStatusIDProperty, dr.GetInt32("DocStatusID"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        #endregion

        #region DataPortal Hooks

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        #endregion

    }
}
