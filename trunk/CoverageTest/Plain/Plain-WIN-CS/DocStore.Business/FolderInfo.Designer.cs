//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    FolderInfo
// ObjectType:  FolderInfo
// CSLAType:    ReadOnlyObject

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using DocStore.Business.Util;

namespace DocStore.Business
{

    /// <summary>
    /// Folder basic information (read only object).<br/>
    /// This is a generated <see cref="FolderInfo"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="FolderList"/> collection.
    /// </remarks>
    [Serializable]
    public partial class FolderInfo : ReadOnlyBase<FolderInfo>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="FolderID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> FolderIDProperty = RegisterProperty<int>(p => p.FolderID, "Folder ID", -1);
        /// <summary>
        /// Gets the Folder ID.
        /// </summary>
        /// <value>The Folder ID.</value>
        public int FolderID
        {
            get { return GetProperty(FolderIDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="FolderTypeID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> FolderTypeIDProperty = RegisterProperty<int>(p => p.FolderTypeID, "Folder Type ID");
        /// <summary>
        /// Gets the Folder Type ID.
        /// </summary>
        /// <value>The Folder Type ID.</value>
        public int FolderTypeID
        {
            get { return GetProperty(FolderTypeIDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="FolderRef"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> FolderRefProperty = RegisterProperty<string>(p => p.FolderRef, "FolderRef");
        /// <summary>
        /// Gets the FolderRef.
        /// </summary>
        /// <value>The FolderRef.</value>
        public string FolderRef
        {
            get { return GetProperty(FolderRefProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Year"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> YearProperty = RegisterProperty<int>(p => p.Year, "Folder Year");
        /// <summary>
        /// Gets the Folder Year.
        /// </summary>
        /// <value>The Folder Year.</value>
        public int Year
        {
            get { return GetProperty(YearProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Subject"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SubjectProperty = RegisterProperty<string>(p => p.Subject, "Subject");
        /// <summary>
        /// Gets the Subject.
        /// </summary>
        /// <value>The Subject.</value>
        public string Subject
        {
            get { return GetProperty(SubjectProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="FolderStatusID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> FolderStatusIDProperty = RegisterProperty<int>(p => p.FolderStatusID, "Folder Status ID");
        /// <summary>
        /// Gets the Folder Status ID.
        /// </summary>
        /// <value>The Folder Status ID.</value>
        public int FolderStatusID
        {
            get { return GetProperty(FolderStatusIDProperty); }
        }

        /// <summary>
        /// Gets the Folder Type Name.
        /// </summary>
        /// <value>The Folder Type Name.</value>
        public string FolderTypeName
        {
            get
            {
                var result = string.Empty;
                if (FolderTypeNVL.GetFolderTypeNVL().ContainsKey(FolderTypeID))
                    result = FolderTypeNVL.GetFolderTypeNVL().GetItemByKey(FolderTypeID).Value;
                return result;
            }
        }

        /// <summary>
        /// Gets the Folder Status Name.
        /// </summary>
        /// <value>The Folder Status Name.</value>
        public string FolderStatusName
        {
            get
            {
                var result = string.Empty;
                if (FolderStatusNVL.GetFolderStatusNVL().ContainsKey(FolderStatusID))
                    result = FolderStatusNVL.GetFolderStatusNVL().GetItemByKey(FolderStatusID).Value;
                return result;
            }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="FolderInfo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="FolderInfo"/> object.</returns>
        internal static FolderInfo GetFolderInfo(SafeDataReader dr)
        {
            FolderInfo obj = new FolderInfo();
            obj.Fetch(dr);
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="FolderInfo"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public FolderInfo()
        {
            // Use factory methods and do not use direct creation.
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="FolderInfo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(FolderIDProperty, dr.GetInt32("FolderID"));
            LoadProperty(FolderTypeIDProperty, dr.GetInt32("FolderTypeID"));
            LoadProperty(FolderRefProperty, dr.GetString("FolderRef"));
            LoadProperty(YearProperty, dr.GetInt32("Year"));
            LoadProperty(SubjectProperty, dr.GetString("Subject"));
            LoadProperty(FolderStatusIDProperty, dr.GetInt32("FolderStatusID"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        #endregion

        #region DataPortal Hooks

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        #endregion

    }
}
