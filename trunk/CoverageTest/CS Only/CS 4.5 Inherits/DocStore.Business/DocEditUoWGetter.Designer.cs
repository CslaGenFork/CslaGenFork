//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    DocEditUoWGetter
// ObjectType:  DocEditUoWGetter
// CSLAType:    UnitOfWork

using System;
using Csla;
using DocStore.Business.Admin;

namespace DocStore.Business
{

    /// <summary>
    /// DocEditUoWGetter (getter unit of work pattern).<br/>
    /// This is a generated base class of <see cref="DocEditUoWGetter"/> business object.
    /// This class is a root object that implements the Unit of Work pattern.
    /// </summary>
    [Serializable]
    public partial class DocEditUoWGetter : ReadOnlyBase<DocEditUoWGetter>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about unit of work (child) <see cref="Doc"/> property.
        /// </summary>
        public static readonly PropertyInfo<Doc> DocProperty = RegisterProperty<Doc>(p => p.Doc, "Doc");
        /// <summary>
        /// Gets the Doc object (unit of work child property).
        /// </summary>
        /// <value>The Doc.</value>
        public Doc Doc
        {
            get { return GetProperty(DocProperty); }
            private set { LoadProperty(DocProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about unit of work (child) <see cref="DocClassNVL"/> property.
        /// </summary>
        public static readonly PropertyInfo<DocClassNVL> DocClassNVLProperty = RegisterProperty<DocClassNVL>(p => p.DocClassNVL, "Doc Class NVL");
        /// <summary>
        /// Gets the Doc Class NVL object (unit of work child property).
        /// </summary>
        /// <value>The Doc Class NVL.</value>
        public DocClassNVL DocClassNVL
        {
            get { return GetProperty(DocClassNVLProperty); }
            private set { LoadProperty(DocClassNVLProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about unit of work (child) <see cref="DocTypeNVL"/> property.
        /// </summary>
        public static readonly PropertyInfo<DocTypeNVL> DocTypeNVLProperty = RegisterProperty<DocTypeNVL>(p => p.DocTypeNVL, "Doc Type NVL");
        /// <summary>
        /// Gets the Doc Type NVL object (unit of work child property).
        /// </summary>
        /// <value>The Doc Type NVL.</value>
        public DocTypeNVL DocTypeNVL
        {
            get { return GetProperty(DocTypeNVLProperty); }
            private set { LoadProperty(DocTypeNVLProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about unit of work (child) <see cref="DocStatusNVL"/> property.
        /// </summary>
        public static readonly PropertyInfo<DocStatusNVL> DocStatusNVLProperty = RegisterProperty<DocStatusNVL>(p => p.DocStatusNVL, "Doc Status NVL");
        /// <summary>
        /// Gets the Doc Status NVL object (unit of work child property).
        /// </summary>
        /// <value>The Doc Status NVL.</value>
        public DocStatusNVL DocStatusNVL
        {
            get { return GetProperty(DocStatusNVLProperty); }
            private set { LoadProperty(DocStatusNVLProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about unit of work (child) <see cref="UserNVL"/> property.
        /// </summary>
        public static readonly PropertyInfo<UserNVL> UserNVLProperty = RegisterProperty<UserNVL>(p => p.UserNVL, "User NVL");
        /// <summary>
        /// Gets the User NVL object (unit of work child property).
        /// </summary>
        /// <value>The User NVL.</value>
        public UserNVL UserNVL
        {
            get { return GetProperty(UserNVLProperty); }
            private set { LoadProperty(UserNVLProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="DocEditUoWGetter"/> unit of objects, based on given parameters.
        /// </summary>
        /// <param name="docID">The DocID parameter of the DocEditUoWGetter to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DocEditUoWGetter"/> unit of objects.</returns>
        public static DocEditUoWGetter GetDocEditUoWGetter(int docID)
        {
            return DataPortal.Fetch<DocEditUoWGetter>(docID);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DocEditUoWGetter"/> unit of objects, based on given parameters.
        /// </summary>
        /// <param name="docID">The DocID parameter of the DocEditUoWGetter to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDocEditUoWGetter(int docID, EventHandler<DataPortalResult<DocEditUoWGetter>> callback)
        {
            DataPortal.BeginFetch<DocEditUoWGetter>(docID, (o, e) =>
            {
                if (e.Error != null)
                    throw e.Error;
                if (!DocClassNVL.IsCached)
                    DocClassNVL.SetCache(e.Object.DocClassNVL);
                if (!DocTypeNVL.IsCached)
                    DocTypeNVL.SetCache(e.Object.DocTypeNVL);
                if (!DocStatusNVL.IsCached)
                    DocStatusNVL.SetCache(e.Object.DocStatusNVL);
                if (!UserNVL.IsCached)
                    UserNVL.SetCache(e.Object.UserNVL);
                callback(o, e);
            });
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DocEditUoWGetter"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Unit of Work. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public DocEditUoWGetter()
        {
            // Use factory methods and do not use direct creation.
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="DocEditUoWGetter"/> unit of objects, based on given criteria.
        /// </summary>
        /// <param name="docID">The fetch criteria.</param>
        protected void DataPortal_Fetch(int docID)
        {
            LoadProperty(DocProperty, Doc.GetDoc(docID));
            LoadProperty(DocClassNVLProperty, DocClassNVL.GetDocClassNVL());
            LoadProperty(DocTypeNVLProperty, DocTypeNVL.GetDocTypeNVL());
            LoadProperty(DocStatusNVLProperty, DocStatusNVL.GetDocStatusNVL());
            LoadProperty(UserNVLProperty, UserNVL.GetUserNVL());
        }

        #endregion

    }
}
