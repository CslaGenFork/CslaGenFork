'  This file was generated by CSLA Object Generator - CslaGenFork v4.5
'
' Filename:    DocContent
' ObjectType:  DocContent
' CSLAType:    EditableChild

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data
Imports DocStore.Business.Util
Imports DocStore.Business.Security
Imports UsingClass

Namespace DocStore.Business

    ''' <summary>
    ''' Document files (editable child object).<br/>
    ''' This is a generated base class of <see cref="DocContent"/> business object.
    ''' </summary>
    ''' <remarks>
    ''' This class is an item of <see cref="Doc"/> collection.
    ''' </remarks>
    <Serializable()>
    Partial Public Class DocContent
        Inherits BusinessBase(Of DocContent)
        Implements IHaveInterface, IHaveGenericInterface(Of DocContent)

        #Region " Static Fields "

            Private Shared _lastID As Integer

        #End Region

        #Region " Business Properties "

        ''' <summary>
        ''' Maintains metadata about <see cref="DocContentID"/> property.
        ''' </summary>
        <NotUndoable>
        Public Shared ReadOnly DocContentIDProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p) p.DocContentID, "Doc Content ID")
        ''' <summary>
        ''' Gets the Doc Content ID.
        ''' </summary>
        ''' <value>The Doc Content ID.</value>
        Public ReadOnly Property DocContentID As Integer
            Get
                Return GetProperty(DocContentIDProperty)
            End Get
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="Version"/> property.
        ''' </summary>
        Public Shared ReadOnly VersionProperty As PropertyInfo(Of Short) = RegisterProperty(Of Short)(Function(p) p.Version, "Version")
        ''' <summary>
        ''' Gets or sets the Version.
        ''' </summary>
        ''' <value>The Version.</value>
        Public Property Version As Short
            Get
                Return GetProperty(VersionProperty)
            End Get
            Set(ByVal value As Short)
                SetProperty(VersionProperty, value)
            End Set
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="FileContent"/> property.
        ''' </summary>
        Public Shared ReadOnly FileContentProperty As PropertyInfo(Of Byte()) = RegisterProperty(Of Byte())(Function(p) p.FileContent, "File Content")
        ''' <summary>
        ''' Gets or sets the File Content.
        ''' </summary>
        ''' <value>The File Content.</value>
        Public Property FileContent As Byte()
            Get
                Return GetProperty(FileContentProperty)
            End Get
            Set(ByVal value As Byte())
                SetProperty(FileContentProperty, value)
            End Set
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="FileSize"/> property.
        ''' </summary>
        Public Shared ReadOnly FileSizeProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p) p.FileSize, "File Size")
        ''' <summary>
        ''' Gets or sets the File Size.
        ''' </summary>
        ''' <value>The File Size.</value>
        Public Property FileSize As Integer
            Get
                Return GetProperty(FileSizeProperty)
            End Get
            Set(ByVal value As Integer)
                SetProperty(FileSizeProperty, value)
            End Set
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="FileType"/> property.
        ''' </summary>
        Public Shared ReadOnly FileTypeProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.FileType, "File Type")
        ''' <summary>
        ''' Gets or sets the File Type.
        ''' </summary>
        ''' <value>The File Type.</value>
        Public Property FileType As String
            Get
                Return GetProperty(FileTypeProperty)
            End Get
            Set(ByVal value As String)
                SetProperty(FileTypeProperty, value)
            End Set
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="CheckInDate"/> property.
        ''' </summary>
        Public Shared ReadOnly CheckInDateProperty As PropertyInfo(Of SmartDate) = RegisterProperty(Of SmartDate)(Function(p) p.CheckInDate, "Check In Date")
        ''' <summary>
        ''' Check-in date
        ''' </summary>
        ''' <value>The Check In Date.</value>
        Public Property CheckInDate As String
            Get
                Return GetPropertyConvert(Of SmartDate, String)(CheckInDateProperty)
            End Get
            Set(ByVal value As String)
                SetPropertyConvert(Of SmartDate, String)(CheckInDateProperty, value)
            End Set
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="CheckInUserID"/> property.
        ''' </summary>
        Public Shared ReadOnly CheckInUserIDProperty As PropertyInfo(Of Integer) = RegisterProperty(Of Integer)(Function(p) p.CheckInUserID, "Check In User ID")
        ''' <summary>
        ''' Check-in user ID
        ''' </summary>
        ''' <value>The Check In User ID.</value>
        Public Property CheckInUserID As Integer
            Get
                Return GetProperty(CheckInUserIDProperty)
            End Get
            Set(ByVal value As Integer)
                SetProperty(CheckInUserIDProperty, value)
                OnPropertyChanged("CheckInUserName")
            End Set
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="CheckInComment"/> property.
        ''' </summary>
        Public Shared ReadOnly CheckInCommentProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.CheckInComment, "Check In Comment")
        ''' <summary>
        ''' Check-in comment
        ''' </summary>
        ''' <value>The Check In Comment.</value>
        Public Property CheckInComment As String
            Get
                Return GetProperty(CheckInCommentProperty)
            End Get
            Set(ByVal value As String)
                SetProperty(CheckInCommentProperty, value)
            End Set
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="CheckOutDate"/> property.
        ''' </summary>
        Public Shared ReadOnly CheckOutDateProperty As PropertyInfo(Of SmartDate) = RegisterProperty(Of SmartDate)(Function(p) p.CheckOutDate, "Check Out Date")
        ''' <summary>
        ''' Check-out date
        ''' </summary>
        ''' <value>The Check Out Date.</value>
        Public Property CheckOutDate As String
            Get
                Return GetPropertyConvert(Of SmartDate, String)(CheckOutDateProperty)
            End Get
            Set(ByVal value As String)
                SetPropertyConvert(Of SmartDate, String)(CheckOutDateProperty, value)
            End Set
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="CheckOutUserID"/> property.
        ''' </summary>
        Public Shared ReadOnly CheckOutUserIDProperty As PropertyInfo(Of Integer?) = RegisterProperty(Of Integer?)(Function(p) p.CheckOutUserID, "Check Out User ID")
        ''' <summary>
        ''' Check-out user ID
        ''' </summary>
        ''' <value>The Check Out User ID.</value>
        Public Property CheckOutUserID As Integer?
            Get
                Return GetProperty(CheckOutUserIDProperty)
            End Get
            Set(ByVal value As Integer?)
                SetProperty(CheckOutUserIDProperty, value)
                OnPropertyChanged("CheckOutUserName")
            End Set
        End Property

        ''' <summary>
        ''' Maintains metadata about <see cref="RowVersion"/> property.
        ''' </summary>
        <NotUndoable>
        Public Shared ReadOnly RowVersionProperty As PropertyInfo(Of Byte()) = RegisterProperty(Of Byte())(Function(p) p.RowVersion, "Row Version")
        ''' <summary>
        ''' Gets the Row Version.
        ''' </summary>
        ''' <value>The Row Version.</value>
        Public ReadOnly Property RowVersion As Byte()
            Get
                Return GetProperty(RowVersionProperty)
            End Get
        End Property

        ''' <summary>
        ''' Gets the Check In User Name.
        ''' </summary>
        ''' <value>The Check In User Name.</value>
        Public ReadOnly Property CheckInUserName As String
            Get
                Dim result = String.Empty
                If Admin.UserNVL.GetUserNVL().ContainsKey(CheckInUserID) Then
                    result = Admin.UserNVL.GetUserNVL().GetItemByKey(CheckInUserID).Value
                End If
                Return result
            End Get
        End Property

        ''' <summary>
        ''' Gets the Check Out User Name.
        ''' </summary>
        ''' <value>The Check Out User Name.</value>
        Public ReadOnly Property CheckOutUserName As String
            Get
                Dim result = String.Empty
                If CheckOutUserID.HasValue AndAlso Admin.UserNVL.GetUserNVL().ContainsKey(CheckOutUserID.Value) Then
                    result = Admin.UserNVL.GetUserNVL().GetItemByKey(CheckOutUserID.Value).Value
                End If
                Return result
            End Get
        End Property

        #End Region

        #Region " Factory Methods "

        ''' <summary>
        ''' Factory method. Creates a new <see cref="DocContent"/> object.
        ''' </summary>
        ''' <returns>A reference to the created <see cref="DocContent"/> object.</returns>
        Friend Shared Function NewDocContent() As DocContent
            Return DataPortal.CreateChild(Of DocContent)()
        End Function

        ''' <summary>
        ''' Factory method. Loads a <see cref="DocContent"/> object from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        ''' <returns>A reference to the fetched <see cref="DocContent"/> object.</returns>
        Friend Shared Function GetDocContent(dr As SafeDataReader) As DocContent
            Dim obj As DocContent = New DocContent()
            ' show the framework that this is a child object
            obj.MarkAsChild()
            obj.Fetch(dr)
            obj.MarkOld()
            ' check all object rules and property rules
            obj.BusinessRules.CheckRules()
            Return obj
        End Function

        ''' <summary>
        ''' Factory method. Asynchronously creates a new <see cref="DocContent"/> object.
        ''' </summary>
        ''' <param name="callback">The completion callback method.</param>
        Friend Shared Sub NewDocContent(callback As EventHandler(Of DataPortalResult(Of DocContent)))
            DataPortal.BeginCreate(Of DocContent)(callback)
        End Sub

        #End Region

        #Region " Constructor "

        ''' <summary>
        ''' Initializes a new instance of the <see cref="DocContent"/> class.
        ''' </summary>
        ''' <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
        Public Sub New()
            ' Use factory methods and do not use direct creation.

            ' show the framework that this is a child object
            MarkAsChild()
        End Sub

        #End Region

        #Region " Data Access "

        ''' <summary>
        ''' Loads default values for the <see cref="DocContent"/> object properties.
        ''' </summary>
        <Csla.RunLocal()>
        Protected Overrides Sub Child_Create()
            LoadProperty(DocContentIDProperty, System.Threading.Interlocked.Decrement(_lastID))
            LoadProperty(VersionProperty, CShort(Fix(1)))
            LoadProperty(FileContentProperty, New Byte() {})
            LoadProperty(FileSizeProperty, 0)
            LoadProperty(FileTypeProperty, "")
            LoadProperty(CheckInDateProperty, new SmartDate(Date.Now))
            LoadProperty(CheckInUserIDProperty, UserInformation.UserId)
            LoadProperty(CheckInCommentProperty, "Main content")
            LoadProperty(CheckOutDateProperty, Nothing)
            Dim args As New DataPortalHookArgs()
            OnCreate(args)
            MyBase.Child_Create()
        End Sub

        ''' <summary>
        ''' Loads a <see cref="DocContent"/> object from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        Private Sub Fetch(dr As SafeDataReader)
            ' Value properties
            LoadProperty(DocContentIDProperty, dr.GetInt32("DocContentID"))
            LoadProperty(VersionProperty, dr.GetInt16("Version"))
            LoadProperty(FileSizeProperty, dr.GetInt32("FileSize"))
            LoadProperty(FileTypeProperty, dr.GetString("FileType"))
            LoadProperty(CheckInDateProperty, dr.GetSmartDate("CheckInDate", True))
            LoadProperty(CheckInUserIDProperty, dr.GetInt32("CheckInUserID"))
            LoadProperty(CheckInCommentProperty, dr.GetString("CheckInComment"))
            LoadProperty(CheckOutDateProperty, If(dr.IsDBNull("CheckOutDate"), Nothing, dr.GetSmartDate("CheckOutDate", True)))
            LoadProperty(CheckOutUserIDProperty, DirectCast(dr.GetValue("CheckOutUserID"), Integer?))
            LoadProperty(RowVersionProperty, TryCast(dr.GetValue("RowVersion"), Byte()))
            Dim args As New DataPortalHookArgs(dr)
            OnFetchRead(args)
        End Sub

        ''' <summary>
        ''' Inserts a new <see cref="DocContent"/> object in the database.
        ''' </summary>
        ''' <param name="parent">The parent object.</param>
        Private Sub Child_Insert(parent As Doc)
            Using ctx = TransactionManager(Of SqlConnection, SqlTransaction).GetManager(Database.DocStoreConnection, False)
                Using cmd = New SqlCommand("AddDocContent", ctx.Connection)
                    cmd.Transaction = ctx.Transaction
                    cmd.CommandType = CommandType.StoredProcedure
                    cmd.Parameters.AddWithValue("@DocID", parent.DocID).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@DocContentID", ReadProperty(DocContentIDProperty)).Direction = ParameterDirection.Output
                    cmd.Parameters.AddWithValue("@FileSize", ReadProperty(FileSizeProperty)).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@FileType", ReadProperty(FileTypeProperty)).DbType = DbType.String
                    cmd.Parameters.AddWithValue("@CheckInDate", ReadProperty(CheckInDateProperty).DBValue).DbType = DbType.DateTime2
                    cmd.Parameters.AddWithValue("@CheckInUserID", ReadProperty(CheckInUserIDProperty)).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@CheckInComment", ReadProperty(CheckInCommentProperty)).DbType = DbType.String
                    cmd.Parameters.Add("@NewRowVersion", SqlDbType.Timestamp).Direction = ParameterDirection.Output
                    Dim args As New DataPortalHookArgs(cmd)
                    OnInsertPre(args)
                    cmd.ExecuteNonQuery()
                    OnInsertPost(args)
                    LoadProperty(DocContentIDProperty, DirectCast(cmd.Parameters("@DocContentID").Value, Integer))
                    LoadProperty(RowVersionProperty, DirectCast(cmd.Parameters("@NewRowVersion").Value, Byte()))
                End Using
            End Using
        End Sub

        ''' <summary>
        ''' Updates in the database all changes made to the <see cref="DocContent"/> object.
        ''' </summary>
        Private Sub Child_Update()
            If Not IsDirty
                return
            End If

            Using ctx = TransactionManager(Of SqlConnection, SqlTransaction).GetManager(Database.DocStoreConnection, False)
                Using cmd = New SqlCommand("UpdateDocContent", ctx.Connection)
                    cmd.Transaction = ctx.Transaction
                    cmd.CommandType = CommandType.StoredProcedure
                    cmd.Parameters.AddWithValue("@DocContentID", ReadProperty(DocContentIDProperty)).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@CheckOutDate", ReadProperty(CheckOutDateProperty).DBValue).DbType = DbType.DateTime2
                    cmd.Parameters.AddWithValue("@CheckOutUserID", If(ReadProperty(CheckOutUserIDProperty) Is Nothing, DBNull.Value, ReadProperty(CheckOutUserIDProperty).Value)).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@RowVersion", ReadProperty(RowVersionProperty)).DbType = DbType.Binary
                    cmd.Parameters.Add("@NewRowVersion", SqlDbType.Timestamp).Direction = ParameterDirection.Output
                    Dim args As New DataPortalHookArgs(cmd)
                    OnUpdatePre(args)
                    cmd.ExecuteNonQuery()
                    OnUpdatePost(args)
                    LoadProperty(RowVersionProperty, DirectCast(cmd.Parameters("@NewRowVersion").Value, Byte()))
                End Using
            End Using
        End Sub

        #End Region

        #Region " DataPortal Hooks "

        ''' <summary>
        ''' Occurs after setting all defaults for object creation.
        ''' </summary>
        Partial Private Sub OnCreate(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs after setting query parameters and before the fetch operation.
        ''' </summary>
        Partial Private Sub OnFetchPre(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs after the fetch operation (object or collection is fully loaded and set up).
        ''' </summary>
        Partial Private Sub OnFetchPost(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs after the low level fetch operation, before the data reader is destroyed.
        ''' </summary>
        Partial Private Sub OnFetchRead(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs after setting query parameters and before the update operation.
        ''' </summary>
        Partial Private Sub OnUpdatePre(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs in DataPortal_Insert, after the update operation, before setting back row identifiers (RowVersion) and Commit().
        ''' </summary>
        Partial Private Sub OnUpdatePost(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs in DataPortal_Insert, after setting query parameters and before the insert operation.
        ''' </summary>
        Partial Private Sub OnInsertPre(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs in DataPortal_Insert, after the insert operation, before setting back row identifiers (ID and RowVersion) and Commit().
        ''' </summary>
        Partial Private Sub OnInsertPost(args As DataPortalHookArgs)
        End Sub

        #End Region

    End Class
End Namespace
