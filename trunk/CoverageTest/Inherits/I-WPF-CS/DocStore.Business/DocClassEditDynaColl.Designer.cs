//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    DocClassEditDynaColl
// ObjectType:  DocClassEditDynaColl
// CSLAType:    DynamicEditableRootCollection

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using DocStore.Business.Util;
using Csla.Rules;
using Csla.Rules.CommonRules;
using UsingLibrary;

namespace DocStore.Business
{

    /// <summary>
    /// DocClassEditDynaColl (dynamic root list).<br/>
    /// This is a generated base class of <see cref="DocClassEditDynaColl"/> business object.
    /// </summary>
    /// <remarks>
    /// The items of the collection are <see cref="DocClassEditDyna"/> objects.
    /// </remarks>
    [Serializable]
    public partial class DocClassEditDynaColl : MyDynamicListBase<DocClassEditDyna>, IHaveInterface, IHaveGenericInterface<DocClassEditDynaColl>
    {

        #region Collection Business Methods

        /// <summary>
        /// Adds a new <see cref="DocClassEditDyna"/> item to the collection.
        /// </summary>
        /// <param name="item">The item to add.</param>
        /// <exception cref="System.Security.SecurityException">if the user isn't authorized to add items to the collection.</exception>
        /// <exception cref="ArgumentException">if the item already exists in the collection.</exception>
        public new void Add(DocClassEditDyna item)
        {
            if (!CanAddObject())
                throw new System.Security.SecurityException("User not authorized to create a DocClassEditDyna.");

            if (Contains(item.DocClassID))
                throw new ArgumentException("DocClassEditDyna already exists.");

            base.Add(item);
        }

        /// <summary>
        /// Removes a <see cref="DocClassEditDyna"/> item from the collection.
        /// </summary>
        /// <param name="item">The item to remove.</param>
        /// <returns><c>true</c> if the item was removed from the collection, otherwise <c>false</c>.</returns>
        /// <exception cref="System.Security.SecurityException">if the user isn't authorized to remove items from the collection.</exception>
        public new bool Remove(DocClassEditDyna item)
        {
            if (!CanDeleteObject())
                throw new System.Security.SecurityException("User not authorized to remove a DocClassEditDyna.");

            return base.Remove(item);
        }

        /// <summary>
        /// Adds a new <see cref="DocClassEditDyna"/> item to the collection.
        /// </summary>
        /// <returns>The new DocClassEditDyna item added to the collection.</returns>
        public DocClassEditDyna Add()
        {
            var item = DocClassEditDyna.NewDocClassEditDyna();
            Add(item);
            return item;
        }

        /// <summary>
        /// Asynchronously adds a new <see cref="DocClassEditDyna"/> item to the collection.
        /// </summary>
        public void BeginAdd()
        {
            DocClassEditDyna docClassEditDyna = null;
            DocClassEditDyna.NewDocClassEditDyna((o, e) =>
                {
                    if (e.Error != null)
                        throw e.Error;
                    else
                        docClassEditDyna = e.Object;
                });
            Add(docClassEditDyna);
        }

        /// <summary>
        /// Removes a <see cref="DocClassEditDyna"/> item from the collection.
        /// </summary>
        /// <param name="docClassID">The DocClassID of the item to be removed.</param>
        public void Remove(int docClassID)
        {
            foreach (var docClassEditDyna in this)
            {
                if (docClassEditDyna.DocClassID == docClassID)
                {
                    Remove(docClassEditDyna);
                    break;
                }
            }
        }

        /// <summary>
        /// Determines whether a <see cref="DocClassEditDyna"/> item is in the collection.
        /// </summary>
        /// <param name="docClassID">The DocClassID of the item to search for.</param>
        /// <returns><c>true</c> if the DocClassEditDyna is a collection item; otherwise, <c>false</c>.</returns>
        public bool Contains(int docClassID)
        {
            foreach (var docClassEditDyna in this)
            {
                if (docClassEditDyna.DocClassID == docClassID)
                {
                    return true;
                }
            }
            return false;
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DocClassEditDynaColl"/> collection.
        /// </summary>
        /// <returns>A reference to the created <see cref="DocClassEditDynaColl"/> collection.</returns>
        public static DocClassEditDynaColl NewDocClassEditDynaColl()
        {
            return DataPortal.Create<DocClassEditDynaColl>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DocClassEditDynaColl"/> collection.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="DocClassEditDynaColl"/> collection.</returns>
        public static DocClassEditDynaColl GetDocClassEditDynaColl()
        {
            return DataPortal.Fetch<DocClassEditDynaColl>();
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DocClassEditDynaColl"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDocClassEditDynaColl(EventHandler<DataPortalResult<DocClassEditDynaColl>> callback)
        {
            DataPortal.BeginCreate<DocClassEditDynaColl>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DocClassEditDynaColl"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDocClassEditDynaColl(EventHandler<DataPortalResult<DocClassEditDynaColl>> callback)
        {
            DataPortal.BeginFetch<DocClassEditDynaColl>(callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DocClassEditDynaColl"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public DocClassEditDynaColl()
        {
            // Use factory methods and do not use direct creation.

            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AllowNew = DocClassEditDynaColl.CanAddObject();
            AllowEdit = DocClassEditDynaColl.CanEditObject();
            AllowRemove = DocClassEditDynaColl.CanDeleteObject();
            RaiseListChangedEvents = rlce;
        }

        #endregion

        #region Object Authorization

        /// <summary>
        /// Adds the object authorization rules.
        /// </summary>
        protected static void AddObjectAuthorizationRules()
        {
            BusinessRules.AddRule(typeof (DocClassEditDynaColl), new IsInRole(AuthorizationActions.CreateObject, "Admin"));
            BusinessRules.AddRule(typeof (DocClassEditDynaColl), new IsInRole(AuthorizationActions.GetObject, "User"));
            BusinessRules.AddRule(typeof (DocClassEditDynaColl), new IsInRole(AuthorizationActions.EditObject, "Admin"));
            BusinessRules.AddRule(typeof (DocClassEditDynaColl), new IsInRole(AuthorizationActions.DeleteObject, "Admin"));

            AddObjectAuthorizationRulesExtend();
        }

        /// <summary>
        /// Allows the set up of custom object authorization rules.
        /// </summary>
        static partial void AddObjectAuthorizationRulesExtend();

        /// <summary>
        /// Checks if the current user can create a new DocClassEditDynaColl object.
        /// </summary>
        /// <returns><c>true</c> if the user can create a new object; otherwise, <c>false</c>.</returns>
        public static bool CanAddObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.CreateObject, typeof(DocClassEditDynaColl));
        }

        /// <summary>
        /// Checks if the current user can retrieve DocClassEditDynaColl's properties.
        /// </summary>
        /// <returns><c>true</c> if the user can read the object; otherwise, <c>false</c>.</returns>
        public static bool CanGetObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.GetObject, typeof(DocClassEditDynaColl));
        }

        /// <summary>
        /// Checks if the current user can change DocClassEditDynaColl's properties.
        /// </summary>
        /// <returns><c>true</c> if the user can update the object; otherwise, <c>false</c>.</returns>
        public static bool CanEditObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.EditObject, typeof(DocClassEditDynaColl));
        }

        /// <summary>
        /// Checks if the current user can delete a DocClassEditDynaColl object.
        /// </summary>
        /// <returns><c>true</c> if the user can delete the object; otherwise, <c>false</c>.</returns>
        public static bool CanDeleteObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.DeleteObject, typeof(DocClassEditDynaColl));
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="DocClassEditDynaColl"/> collection from the database.
        /// </summary>
        protected void DataPortal_Fetch()
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager(Database.DocStoreConnection, false))
            {
                using (var cmd = new SqlCommand("GetDocClassEditDynaColl", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    var args = new DataPortalHookArgs(cmd);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }

        private void LoadCollection(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                Fetch(dr);
            }
        }

        /// <summary>
        /// Loads all <see cref="DocClassEditDynaColl"/> collection items from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            while (dr.Read())
            {
                Add(DocClassEditDyna.GetDocClassEditDyna(dr));
            }
            RaiseListChangedEvents = rlce;
        }

        #endregion

        #region DataPortal Hooks

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        #endregion

    }
}
