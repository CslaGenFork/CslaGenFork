'  This file was generated by CSLA Object Generator - CslaGenFork v4.5
'
' Filename:    CircList
' ObjectType:  CircList
' CSLAType:    ReadOnlyCollection

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data
Imports DocStore.Business.Util
Imports UsingLibrary

Namespace DocStore.Business.Circulations

    ''' <summary>
    ''' Collection of circulations of documents and folders (read only list).<br/>
    ''' This is a generated base class of <see cref="CircList"/> business object.
    ''' This class is a root collection.
    ''' </summary>
    ''' <remarks>
    ''' The items of the collection are <see cref="CircInfo"/> objects.
    ''' </remarks>
    <Serializable()>
    Public Partial Class CircList
#If WINFORMS Then
        Inherits MyReadOnlyBindingListBase(Of CircList, CircInfo)
        Implements IHaveInterface, IHaveGenericInterface(Of CircList)
#Else
        Inherits MyReadOnlyListBase(Of CircList, CircInfo)
        Implements IHaveInterface, IHaveGenericInterface(Of CircList)
#End If
    
        #Region " Collection Business Methods "

        ''' <summary>
        ''' Determines whether a <see cref="CircInfo"/> item is in the collection.
        ''' </summary>
        ''' <param name="circID">The CircID of the item to search for.</param>
        ''' <returns><c>True</c> if the CircInfo is a collection item; otherwise, <c>false</c>.</returns>
        Public Overloads Function Contains(circID As Integer) As Boolean
            For Each item As CircInfo In Me
                If item.CircID = circID Then
                    Return True
                End If
            Next
            Return False
        End Function

        #End Region

        #Region " Factory Methods "

        ''' <summary>
        ''' Factory method. Loads a <see cref="CircList"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="docID">The DocID parameter of the CircList to fetch.</param>
        ''' <param name="folderID">The FolderID parameter of the CircList to fetch.</param>
        ''' <returns>A reference to the fetched <see cref="CircList"/> collection.</returns>
        Public Shared Function GetCircList(docID As Integer?, folderID As Integer?) As CircList
            Return DataPortal.Fetch(Of CircList)(New CriteriaGetByObject(docID, folderID))
        End Function

        ''' <summary>
        ''' Factory method. Asynchronously loads a <see cref="CircList"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="docID">The DocID parameter of the CircList to fetch.</param>
        ''' <param name="folderID">The FolderID parameter of the CircList to fetch.</param>
        ''' <param name="callback">The completion callback method.</param>
        Public Shared Sub GetCircList(docID As Integer?, folderID As Integer?, ByVal callback As EventHandler(Of DataPortalResult(Of CircList)))
            DataPortal.BeginFetch(Of CircList)(New CriteriaGetByObject(docID, folderID), callback)
        End Sub

        #End Region

        #Region " Constructor "

        ''' <summary>
        ''' Initializes a new instance of the <see cref="CircList"/> class.
        ''' </summary>
        ''' <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
        Public Sub New()
            ' Use factory methods and do not use direct creation.

            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            AllowNew = False
            AllowEdit = False
            AllowRemove = False
            RaiseListChangedEvents = rlce
        End Sub

        #End Region

        #Region " Criteria "

        ''' <summary>
        ''' CriteriaGetByObject criteria.
        ''' </summary>
        <Serializable()>
        Protected Class CriteriaGetByObject
            Inherits CriteriaBase(Of CriteriaGetByObject)

            ''' <summary>
            ''' Maintains metadata about <see cref="DocID"/> property.
            ''' </summary>
            Public Shared ReadOnly DocIDProperty As PropertyInfo(Of Integer?) = RegisterProperty(Of Integer?)(Function(p) p.DocID)
            ''' <summary>
            ''' Gets or sets the Doc ID.
            ''' </summary>
            ''' <value>The Doc ID.</value>
            Public Property DocID As Integer?
                Get
                    Return ReadProperty(DocIDProperty)
                End Get
                Set
                    LoadProperty(DocIDProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="FolderID"/> property.
            ''' </summary>
            Public Shared ReadOnly FolderIDProperty As PropertyInfo(Of Integer?) = RegisterProperty(Of Integer?)(Function(p) p.FolderID)
            ''' <summary>
            ''' Gets or sets the Folder ID.
            ''' </summary>
            ''' <value>The Folder ID.</value>
            Public Property FolderID As Integer?
                Get
                    Return ReadProperty(FolderIDProperty)
                End Get
                Set
                    LoadProperty(FolderIDProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Initializes a new instance of the <see cref="CriteriaGetByObject"/> class.
            ''' </summary>
            ''' <remarks> A parameterless constructor is required by the MobileFormatter.</remarks>
            <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
            Public Sub New()
            End Sub

            ''' <summary>
            ''' Initializes a new instance of the <see cref="CriteriaGetByObject"/> class.
            ''' </summary>
            ''' <param name="p_docID">The DocID.</param>
            ''' <param name="p_folderID">The FolderID.</param>
            Public Sub New(p_docID As Integer?, p_folderID As Integer?)
                DocID = p_docID
                FolderID = p_folderID
            End Sub

            ''' <summary>
            ''' Determines whether the specified <see cref="System.Object"/> is equal to this instance.
            ''' </summary>
            ''' <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
            ''' <returns><c>True</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            Public Overrides Function Equals(obj As Object) As Boolean
                If TypeOf obj Is CriteriaGetByObject Then
                    Dim c As CriteriaGetByObject = obj
                    If Not DocID.Equals(c.DocID) Then
                        Return False
                    End If
                    If Not FolderID.Equals(c.FolderID) Then
                        Return False
                    End If
                    Return True
                End If
                Return False
            End Function

            ''' <summary>
            ''' Returns a hash code for this instance.
            ''' </summary>
            ''' <returns>An hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            Public Overrides Function GetHashCode() As Integer
                Return String.Concat("CriteriaGetByObject", DocID.ToString(), FolderID.ToString()).GetHashCode()
            End Function
        End Class

        #End Region

        #Region " Data Access "

        ''' <summary>
        ''' Loads a <see cref="CircList"/> collection from the database, based on given criteria.
        ''' </summary>
        ''' <param name="crit">The fetch criteria.</param>
        Protected Overloads Sub DataPortal_Fetch(crit As CriteriaGetByObject)
            Using ctx = ConnectionManager(Of SqlConnection).GetManager(Database.DocStoreConnection, False)
                Using cmd = New SqlCommand("GetCircList", ctx.Connection)
                    cmd.CommandType = CommandType.StoredProcedure
                    cmd.Parameters.AddWithValue("@DocID", If(crit.DocID Is Nothing, DBNull.Value, crit.DocID.Value)).DbType = DbType.Int32
                    cmd.Parameters.AddWithValue("@FolderID", If(crit.FolderID Is Nothing, DBNull.Value, crit.FolderID.Value)).DbType = DbType.Int32
                    Dim args As New DataPortalHookArgs(cmd, crit)
                    OnFetchPre(args)
                    LoadCollection(cmd)
                    OnFetchPost(args)
                End Using
            End Using
        End Sub

        Private Sub LoadCollection(cmd As SqlCommand)
            Using dr As New SafeDataReader(cmd.ExecuteReader())
                Fetch(dr)
            End Using
        End Sub

        ''' <summary>
        ''' Loads all <see cref="CircList"/> collection items from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        Private Sub Fetch(dr As SafeDataReader)
            IsReadOnly = False
            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            While dr.Read()
                Add(CircInfo.GetCircInfo(dr))
            End While
            RaiseListChangedEvents = rlce
            IsReadOnly = True
        End Sub

        #End Region

        #Region " DataPortal Hooks "

        ''' <summary>
        ''' Occurs after setting query parameters and before the fetch operation.
        ''' </summary>
        Partial Private Sub OnFetchPre(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs after the fetch operation (object or collection is fully loaded and set up).
        ''' </summary>
        Partial Private Sub OnFetchPost(args As DataPortalHookArgs)
        End Sub

        #End Region

    End Class
End Namespace
