'  This file was generated by CSLA Object Generator - CslaGenFork v4.5
'
' Filename:    UserList
' ObjectType:  UserList
' CSLAType:    ReadOnlyCollection

Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports Csla
Imports Csla.Data
Imports DocStore.Business.Util
Imports Csla.Rules
Imports Csla.Rules.CommonRules

Namespace DocStore.Business.Admin

    ''' <summary>
    ''' Collection of user's basic information (read only list).<br/>
    ''' This is a generated base class of <see cref="UserList"/> business object.
    ''' This class is a root collection.
    ''' </summary>
    ''' <remarks>
    ''' The items of the collection are <see cref="UserInfo"/> objects.
    ''' </remarks>
    <Serializable>
    Public Partial Class UserList
#If WINFORMS Then
        Inherits ReadOnlyBindingListBase(Of UserList, UserInfo)
#Else
        Inherits ReadOnlyListBase(Of UserList, UserInfo)
#End If

        #Region " Collection Business Methods "

        ''' <summary>
        ''' Determines whether a <see cref="UserInfo"/> item is in the collection.
        ''' </summary>
        ''' <param name="userID">The UserID of the item to search for.</param>
        ''' <returns><c>True</c> if the UserInfo is a collection item; otherwise, <c>false</c>.</returns>
        Public Overloads Function Contains(userID As Integer) As Boolean
            For Each item As UserInfo In Me
                If item.UserID = userID Then
                    Return True
                End If
            Next
            Return False
        End Function

        #End Region

        #Region " Find Methods "

        ''' <summary>
        ''' Finds a <see cref="UserInfo"/> item of the <see cref="UserList"/> collection, based on a given UserID.
        ''' </summary>
        ''' <param name="userID">The UserID.</param>
        ''' <returns>A <see cref="UserInfo"/> object.</returns>
        Public Function FindUserInfoByUserID(userID As Integer) As UserInfo
            For i As Integer = 0 To Me.Count - 1
                If Me(i).UserID.Equals(userID) Then
                    Return Me(i)
                End If
            Next i

            Return Nothing
        End Function

        #End Region

        #Region " Private Fields "

        Private Shared _list As UserList

        #End Region

        #Region " Cache Management Methods "

        ''' <summary>
        ''' Clears the in-memory UserList cache so it is reloaded on the next request.
        ''' </summary>
        Public Shared Sub InvalidateCache()
            _list = Nothing
        End Sub

        ''' <summary>
        ''' Used by async loaders to load the cache.
        ''' </summary>
        ''' <param name="lst">The list to cache.</param>
        Friend Shared Sub SetCache(lst As UserList)
            _list = lst
        End Sub

        Friend Shared ReadOnly Property IsCached As Boolean
            Get
                Return _list IsNot Nothing
            End Get
        End Property

        #End Region

        #Region " Factory Methods "

        ''' <summary>
        ''' Factory method. Loads a <see cref="UserList"/> collection.
        ''' </summary>
        ''' <returns>A reference to the fetched <see cref="UserList"/> collection.</returns>
        Public Shared Function GetUserList() As UserList
            If _list Is Nothing Then
                _list = DataPortal.Fetch(Of UserList)()
            End If

            Return _list
        End Function

        ''' <summary>
        ''' Factory method. Loads a <see cref="UserList"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="name">The Name parameter of the UserList to fetch.</param>
        ''' <param name="login">The Login parameter of the UserList to fetch.</param>
        ''' <param name="email">The Email parameter of the UserList to fetch.</param>
        ''' <param name="isActive">The IsActive parameter of the UserList to fetch.</param>
        ''' <returns>A reference to the fetched <see cref="UserList"/> collection.</returns>
        Public Shared Function GetUserList(name As String, login As String, email As String, isActive As Boolean?) As UserList
            Return DataPortal.Fetch(Of UserList)(New FilteredCriteria(name, login, email, isActive))
        End Function

        ''' <summary>
        ''' Factory method. Loads a <see cref="UserList"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="name">The Name parameter of the UserList to fetch.</param>
        ''' <returns>A reference to the fetched <see cref="UserList"/> collection.</returns>
        Public Shared Function GetUserList(name As String) As UserList
            Return DataPortal.Fetch(Of UserList)(New CriteriaInactive(name))
        End Function

        ''' <summary>
        ''' Factory method. Asynchronously loads a <see cref="UserList"/> collection.
        ''' </summary>
        ''' <param name="callback">The completion callback method.</param>
        Public Shared Sub GetUserList(ByVal callback As EventHandler(Of DataPortalResult(Of UserList)))
            If _list Is Nothing Then
                DataPortal.BeginFetch(Of UserList)(Sub(o, e)
                        _list = e.Object
                        callback(o, e)
                    End Sub)
            Else
                callback(Nothing, New DataPortalResult(Of UserList)(_list, Nothing, Nothing))
            End If
        End Sub

        ''' <summary>
        ''' Factory method. Asynchronously loads a <see cref="UserList"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="name">The Name parameter of the UserList to fetch.</param>
        ''' <param name="login">The Login parameter of the UserList to fetch.</param>
        ''' <param name="email">The Email parameter of the UserList to fetch.</param>
        ''' <param name="isActive">The IsActive parameter of the UserList to fetch.</param>
        ''' <param name="callback">The completion callback method.</param>
        Public Shared Sub GetUserList(name As String, login As String, email As String, isActive As Boolean?, ByVal callback As EventHandler(Of DataPortalResult(Of UserList)))
            DataPortal.BeginFetch(Of UserList)(New FilteredCriteria(name, login, email, isActive), callback)
        End Sub

        ''' <summary>
        ''' Factory method. Asynchronously loads a <see cref="UserList"/> collection, based on given parameters.
        ''' </summary>
        ''' <param name="name">The Name parameter of the UserList to fetch.</param>
        ''' <param name="callback">The completion callback method.</param>
        Public Shared Sub GetUserList(name As String, ByVal callback As EventHandler(Of DataPortalResult(Of UserList)))
            DataPortal.BeginFetch(Of UserList)(New CriteriaInactive(name), callback)
        End Sub

        #End Region

        #Region " Constructor "

        ''' <summary>
        ''' Initializes a new instance of the <see cref="UserList"/> class.
        ''' </summary>
        ''' <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
        Public Sub New()
            ' Use factory methods and do not use direct creation.

            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            AllowNew = False
            AllowEdit = False
            AllowRemove = False
            RaiseListChangedEvents = rlce
        End Sub

        #End Region

        #Region " Criteria "

        ''' <summary>
        ''' FilteredCriteria criteria.
        ''' </summary>
        <Serializable>
        Protected Class FilteredCriteria
            Inherits CriteriaBase(Of FilteredCriteria)

            ''' <summary>
            ''' Maintains metadata about <see cref="Name"/> property.
            ''' </summary>
            Public Shared ReadOnly NameProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.Name)
            ''' <summary>
            ''' Gets or sets the Name.
            ''' </summary>
            ''' <value>The Name.</value>
            Public Property Name As String
                Get
                    Return ReadProperty(NameProperty)
                End Get
                Set
                    LoadProperty(NameProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="Login"/> property.
            ''' </summary>
            Public Shared ReadOnly LoginProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.Login)
            ''' <summary>
            ''' Gets or sets the Login.
            ''' </summary>
            ''' <value>The Login.</value>
            Public Property Login As String
                Get
                    Return ReadProperty(LoginProperty)
                End Get
                Set
                    LoadProperty(LoginProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="Email"/> property.
            ''' </summary>
            Public Shared ReadOnly EmailProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.Email)
            ''' <summary>
            ''' Gets or sets the Email.
            ''' </summary>
            ''' <value>The Email.</value>
            Public Property Email As String
                Get
                    Return ReadProperty(EmailProperty)
                End Get
                Set
                    LoadProperty(EmailProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="IsActive"/> property.
            ''' </summary>
            Public Shared ReadOnly IsActiveProperty As PropertyInfo(Of Boolean?) = RegisterProperty(Of Boolean?)(Function(p) p.IsActive)
            ''' <summary>
            ''' Gets or sets the active or deleted state.
            ''' </summary>
            ''' <value><c>True</c> if Is Active; <c>false</c> if not Is Active; otherwise, <c>null</c>.</value>
            Public Property IsActive As Boolean?
                Get
                    Return ReadProperty(IsActiveProperty)
                End Get
                Set
                    LoadProperty(IsActiveProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Initializes a new instance of the <see cref="FilteredCriteria"/> class.
            ''' </summary>
            ''' <remarks> A parameterless constructor is required by the MobileFormatter.</remarks>
            <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
            Public Sub New()
            End Sub

            ''' <summary>
            ''' Initializes a new instance of the <see cref="FilteredCriteria"/> class.
            ''' </summary>
            ''' <param name="p_name">The Name.</param>
            ''' <param name="p_login">The Login.</param>
            ''' <param name="p_email">The Email.</param>
            ''' <param name="p_isActive">The IsActive.</param>
            Public Sub New(p_name As String, p_login As String, p_email As String, p_isActive As Boolean?)
                Name = p_name
                Login = p_login
                Email = p_email
                IsActive = p_isActive
            End Sub

            ''' <summary>
            ''' Determines whether the specified <see cref="System.Object"/> is equal to this instance.
            ''' </summary>
            ''' <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
            ''' <returns><c>True</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            Public Overrides Function Equals(obj As Object) As Boolean
                If TypeOf obj Is FilteredCriteria Then
                    Dim c As FilteredCriteria = obj
                    If Not Name.Equals(c.Name) Then
                        Return False
                    End If
                    If Not Login.Equals(c.Login) Then
                        Return False
                    End If
                    If Not Email.Equals(c.Email) Then
                        Return False
                    End If
                    If Not IsActive.Equals(c.IsActive) Then
                        Return False
                    End If
                    Return True
                End If
                Return False
            End Function

            ''' <summary>
            ''' Returns a hash code for this instance.
            ''' </summary>
            ''' <returns>An hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            Public Overrides Function GetHashCode() As Integer
                Return String.Concat("FilteredCriteria", Name.ToString(), Login.ToString(), Email.ToString(), IsActive.ToString()).GetHashCode()
            End Function
        End Class

        ''' <summary>
        ''' CriteriaInactive criteria.
        ''' </summary>
        <Serializable>
        Protected Class CriteriaInactive
            Inherits CriteriaBase(Of CriteriaInactive)

            ''' <summary>
            ''' Maintains metadata about <see cref="Name"/> property.
            ''' </summary>
            Public Shared ReadOnly NameProperty As PropertyInfo(Of String) = RegisterProperty(Of String)(Function(p) p.Name)
            ''' <summary>
            ''' Gets or sets the Name.
            ''' </summary>
            ''' <value>The Name.</value>
            Public Property Name As String
                Get
                    Return ReadProperty(NameProperty)
                End Get
                Set
                    LoadProperty(NameProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Maintains metadata about <see cref="IsActive"/> property.
            ''' </summary>
            Public Shared ReadOnly IsActiveProperty As PropertyInfo(Of Boolean) = RegisterProperty(Of Boolean)(Function(p) p.IsActive)
            ''' <summary>
            ''' Gets the active or deleted state.
            ''' </summary>
            ''' <value><c>True</c> if Is Active; otherwise, <c>false</c>.</value>
            Public Property IsActive As Boolean
                Get
                    Return ReadProperty(IsActiveProperty)
                End Get
                Private Set
                    LoadProperty(IsActiveProperty, value)
                End Set
            End Property

            ''' <summary>
            ''' Initializes a new instance of the <see cref="CriteriaInactive"/> class.
            ''' </summary>
            ''' <remarks> A parameterless constructor is required by the MobileFormatter.</remarks>
            <System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)>
            Public Sub New()
            End Sub

            ''' <summary>
            ''' Initializes a new instance of the <see cref="CriteriaInactive"/> class.
            ''' </summary>
            ''' <param name="p_name">The Name.</param>
            Public Sub New(p_name As String)
                Name = p_name
                IsActive = false
            End Sub

            ''' <summary>
            ''' Determines whether the specified <see cref="System.Object"/> is equal to this instance.
            ''' </summary>
            ''' <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
            ''' <returns><c>True</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
            Public Overrides Function Equals(obj As Object) As Boolean
                If TypeOf obj Is CriteriaInactive Then
                    Dim c As CriteriaInactive = obj
                    If Not Name.Equals(c.Name) Then
                        Return False
                    End If
                    If Not IsActive.Equals(c.IsActive) Then
                        Return False
                    End If
                    Return True
                End If
                Return False
            End Function

            ''' <summary>
            ''' Returns a hash code for this instance.
            ''' </summary>
            ''' <returns>An hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
            Public Overrides Function GetHashCode() As Integer
                Return String.Concat("CriteriaInactive", Name.ToString(), IsActive.ToString()).GetHashCode()
            End Function
        End Class

        #End Region

        #Region " Object Authorization "

        ''' <summary>
        ''' Adds the object authorization rules.
        ''' </summary>
        Protected Shared Sub AddObjectAuthorizationRules()
            BusinessRules.AddRule(GetType(UserList), New IsInRole(AuthorizationActions.GetObject, "User"))

            AddObjectAuthorizationRulesExtend()
        End Sub

        ''' <summary>
        ''' Allows the set up of custom object authorization rules.
        ''' </summary>
        Partial Private Shared Sub AddObjectAuthorizationRulesExtend()
        End Sub

        ''' <summary>
        ''' Checks if the current user can retrieve UserList's properties.
        ''' </summary>
        ''' <returns><c>True</c> if the user can read the object; otherwise, <c>false</c>.</returns>
        Public Overloads Shared Function CanGetObject() As Boolean
            Return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.GetObject, GetType(UserList))
        End Function

        #End Region

        #Region " Data Access "

        ''' <summary>
        ''' Loads a <see cref="UserList"/> collection from the database or from the cache.
        ''' </summary>
        Protected Overloads Sub DataPortal_Fetch()
            If IsCached Then
                LoadCachedList()
                Exit Sub
            End If

            Using ctx = ConnectionManager(Of SqlConnection).GetManager(Database.DocStoreConnection, False)
                Using cmd = New SqlCommand("GetUserList", ctx.Connection)
                    cmd.CommandType = CommandType.StoredProcedure
                    Dim args As New DataPortalHookArgs(cmd)
                    OnFetchPre(args)
                    LoadCollection(cmd)
                    OnFetchPost(args)
                End Using
            End Using
            _list = Me
        End Sub

        Private Sub LoadCachedList()
            IsReadOnly = False
            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            AddRange(_list)
            RaiseListChangedEvents = rlce
            IsReadOnly = True
        End Sub

        ''' <summary>
        ''' Loads a <see cref="UserList"/> collection from the database, based on given criteria.
        ''' </summary>
        ''' <param name="crit">The fetch criteria.</param>
        Protected Overloads Sub DataPortal_Fetch(crit As FilteredCriteria)
            Using ctx = ConnectionManager(Of SqlConnection).GetManager(Database.DocStoreConnection, False)
                Using cmd = New SqlCommand("GetUserList", ctx.Connection)
                    cmd.CommandType = CommandType.StoredProcedure
                    cmd.Parameters.AddWithValue("@Name", If(crit.Name Is Nothing, DBNull.Value, crit.Name)).DbType = DbType.String
                    cmd.Parameters.AddWithValue("@Login", If(crit.Login Is Nothing, DBNull.Value, crit.Login)).DbType = DbType.String
                    cmd.Parameters.AddWithValue("@Email", If(crit.Email Is Nothing, DBNull.Value, crit.Email)).DbType = DbType.String
                    cmd.Parameters.AddWithValue("@IsActive", If(crit.IsActive Is Nothing, DBNull.Value, crit.IsActive.Value)).DbType = DbType.Boolean
                    Dim args As New DataPortalHookArgs(cmd, crit)
                    OnFetchPre(args)
                    LoadCollection(cmd)
                    OnFetchPost(args)
                End Using
            End Using
        End Sub

        ''' <summary>
        ''' Loads a <see cref="UserList"/> collection from the database, based on given criteria.
        ''' </summary>
        ''' <param name="crit">The fetch criteria.</param>
        Protected Overloads Sub DataPortal_Fetch(crit As CriteriaInactive)
            Using ctx = ConnectionManager(Of SqlConnection).GetManager(Database.DocStoreConnection, False)
                Using cmd = New SqlCommand("GetUserList", ctx.Connection)
                    cmd.CommandType = CommandType.StoredProcedure
                    cmd.Parameters.AddWithValue("@Name", crit.Name).DbType = DbType.String
                    cmd.Parameters.AddWithValue("@IsActive", crit.IsActive).DbType = DbType.Boolean
                    Dim args As New DataPortalHookArgs(cmd, crit)
                    OnFetchPre(args)
                    LoadCollection(cmd)
                    OnFetchPost(args)
                End Using
            End Using
        End Sub

        Private Sub LoadCollection(cmd As SqlCommand)
            Using dr As New SafeDataReader(cmd.ExecuteReader())
                Fetch(dr)
            End Using
        End Sub

        ''' <summary>
        ''' Loads all <see cref="UserList"/> collection items from the given SafeDataReader.
        ''' </summary>
        ''' <param name="dr">The SafeDataReader to use.</param>
        Private Sub Fetch(dr As SafeDataReader)
            IsReadOnly = False
            Dim rlce = RaiseListChangedEvents
            RaiseListChangedEvents = False
            While dr.Read()
                Add(UserInfo.GetUserInfo(dr))
            End While
            RaiseListChangedEvents = rlce
            IsReadOnly = True
        End Sub

        #End Region

        #Region " DataPortal Hooks "

        ''' <summary>
        ''' Occurs after setting query parameters and before the fetch operation.
        ''' </summary>
        Partial Private Sub OnFetchPre(args As DataPortalHookArgs)
        End Sub

        ''' <summary>
        ''' Occurs after the fetch operation (object or collection is fully loaded and set up).
        ''' </summary>
        Partial Private Sub OnFetchPost(args As DataPortalHookArgs)
        End Sub

        #End Region

    End Class
End Namespace
