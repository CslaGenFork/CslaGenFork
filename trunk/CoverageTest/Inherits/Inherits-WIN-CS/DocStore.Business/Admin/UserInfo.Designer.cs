//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    UserInfo
// ObjectType:  UserInfo
// CSLAType:    ReadOnlyObject

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using DocStore.Business.Util;
using Csla.Rules;
using Csla.Rules.CommonRules;

namespace DocStore.Business.Admin
{

    /// <summary>
    /// User basic information (read only object).<br/>
    /// This is a generated <see cref="UserInfo"/> business object.
    /// </summary>
    /// <remarks>
    /// This class is an item of <see cref="UserList"/> collection.
    /// </remarks>
    [Serializable]
    public partial class UserInfo : ReadOnlyBase<UserInfo>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about <see cref="UserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int> UserIDProperty = RegisterProperty<int>(p => p.UserID, "User ID", -1);
        /// <summary>
        /// Gets the User ID.
        /// </summary>
        /// <value>The User ID.</value>
        public int UserID
        {
            get { return GetProperty(UserIDProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Name"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> NameProperty = RegisterProperty<string>(p => p.Name, "Name");
        /// <summary>
        /// Gets the Name.
        /// </summary>
        /// <value>The Name.</value>
        public string Name
        {
            get { return GetProperty(NameProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Login"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> LoginProperty = RegisterProperty<string>(p => p.Login, "Login");
        /// <summary>
        /// Gets the Login.
        /// </summary>
        /// <value>The Login.</value>
        public string Login
        {
            get { return GetProperty(LoginProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Email"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> EmailProperty = RegisterProperty<string>(p => p.Email, "Email");
        /// <summary>
        /// Gets the Email.
        /// </summary>
        /// <value>The Email.</value>
        public string Email
        {
            get { return GetProperty(EmailProperty); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="IsActive"/> property.
        /// </summary>
        public static readonly PropertyInfo<bool> IsActiveProperty = RegisterProperty<bool>(p => p.IsActive, "IsActive");
        /// <summary>
        /// Gets the active or deleted state.
        /// </summary>
        /// <value><c>true</c> if IsActive; otherwise, <c>false</c>.</value>
        public bool IsActive
        {
            get { return GetProperty(IsActiveProperty); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="UserInfo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        /// <returns>A reference to the fetched <see cref="UserInfo"/> object.</returns>
        internal static UserInfo GetUserInfo(SafeDataReader dr)
        {
            UserInfo obj = new UserInfo();
            obj.Fetch(dr);
            return obj;
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="UserInfo"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public UserInfo()
        {
            // Use factory methods and do not use direct creation.
        }

        #endregion

        #region Object Authorization

        /// <summary>
        /// Adds the object authorization rules.
        /// </summary>
        protected static void AddObjectAuthorizationRules()
        {
            BusinessRules.AddRule(typeof (UserInfo), new IsInRole(AuthorizationActions.GetObject, "User"));

            AddObjectAuthorizationRulesExtend();
        }

        /// <summary>
        /// Allows the set up of custom object authorization rules.
        /// </summary>
        static partial void AddObjectAuthorizationRulesExtend();

        /// <summary>
        /// Checks if the current user can retrieve UserInfo's properties.
        /// </summary>
        /// <returns><c>true</c> if the user can read the object; otherwise, <c>false</c>.</returns>
        public static bool CanGetObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.GetObject, typeof(UserInfo));
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="UserInfo"/> object from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            // Value properties
            LoadProperty(UserIDProperty, dr.GetInt32("UserID"));
            LoadProperty(NameProperty, dr.GetString("Name"));
            LoadProperty(LoginProperty, dr.GetString("Login"));
            LoadProperty(EmailProperty, dr.GetString("Email"));
            LoadProperty(IsActiveProperty, dr.GetBoolean("IsActive"));
            var args = new DataPortalHookArgs(dr);
            OnFetchRead(args);
        }

        #endregion

        #region DataPortal Hooks

        /// <summary>
        /// Occurs after the low level fetch operation, before the data reader is destroyed.
        /// </summary>
        partial void OnFetchRead(DataPortalHookArgs args);

        #endregion

    }
}
