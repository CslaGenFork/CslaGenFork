//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    DocClassEditCollGetter
// ObjectType:  DocClassEditCollGetter
// CSLAType:    UnitOfWork

using System;
using Csla;
using DocStore.Business.Admin;

namespace DocStore.Business
{

    /// <summary>
    /// DocClassEditCollGetter (creator and getter unit of work pattern).<br/>
    /// This is a generated <see cref="DocClassEditCollGetter"/> business object.
    /// This class is a root object that implements the Unit of Work pattern.
    /// </summary>
    [Serializable]
    public partial class DocClassEditCollGetter : ReadOnlyBase<DocClassEditCollGetter>
    {

        #region Business Properties

        /// <summary>
        /// Maintains metadata about unit of work (child) <see cref="DocClassEditColl"/> property.
        /// </summary>
        public static readonly PropertyInfo<DocClassEditColl> DocClassEditCollProperty = RegisterProperty<DocClassEditColl>(p => p.DocClassEditColl, "Doc Class Edit Coll");
        /// <summary>
        /// Gets the Doc Class Edit Coll object (unit of work child property).
        /// </summary>
        /// <value>The Doc Class Edit Coll.</value>
        public DocClassEditColl DocClassEditColl
        {
            get { return GetProperty(DocClassEditCollProperty); }
            private set { LoadProperty(DocClassEditCollProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about unit of work (child) <see cref="UserNVL"/> property.
        /// </summary>
        public static readonly PropertyInfo<UserNVL> UserNVLProperty = RegisterProperty<UserNVL>(p => p.UserNVL, "User NVL");
        /// <summary>
        /// Gets the User NVL object (unit of work child property).
        /// </summary>
        /// <value>The User NVL.</value>
        public UserNVL UserNVL
        {
            get { return GetProperty(UserNVLProperty); }
            private set { LoadProperty(UserNVLProperty, value); }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Creates a new <see cref="DocClassEditCollGetter"/> unit of objects.
        /// </summary>
        /// <returns>A reference to the created <see cref="DocClassEditCollGetter"/> unit of objects.</returns>
        public static DocClassEditCollGetter NewDocClassEditCollGetter()
        {
            // DataPortal_Fetch is used as ReadOnlyBase<T> doesn't allow the use of DataPortal_Create.
            return DataPortal.Fetch<DocClassEditCollGetter>(true);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DocClassEditCollGetter"/> unit of objects.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="DocClassEditCollGetter"/> unit of objects.</returns>
        public static DocClassEditCollGetter GetDocClassEditCollGetter()
        {
            return DataPortal.Fetch<DocClassEditCollGetter>(false);
        }

        /// <summary>
        /// Factory method. Asynchronously creates a new <see cref="DocClassEditCollGetter"/> unit of objects.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void NewDocClassEditCollGetter(EventHandler<DataPortalResult<DocClassEditCollGetter>> callback)
        {
            // DataPortal_Fetch is used as ReadOnlyBase<T> doesn't allow the use of DataPortal_Create.
            DataPortal.BeginFetch<DocClassEditCollGetter>(true, (o, e) =>
            {
                if (e.Error != null)
                    throw e.Error;
                if (!UserNVL.IsCached)
                    UserNVL.SetCache(e.Object.UserNVL);
                callback(o, e);
            });
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DocClassEditCollGetter"/> unit of objects.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDocClassEditCollGetter(EventHandler<DataPortalResult<DocClassEditCollGetter>> callback)
        {
            DataPortal.BeginFetch<DocClassEditCollGetter>(false, (o, e) =>
            {
                if (e.Error != null)
                    throw e.Error;
                if (!UserNVL.IsCached)
                    UserNVL.SetCache(e.Object.UserNVL);
                callback(o, e);
            });
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DocClassEditCollGetter"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Unit of Work. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public DocClassEditCollGetter()
        {
            // Use factory methods and do not use direct creation.
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Creates or loads a <see cref="DocClassEditCollGetter"/> unit of objects.
        /// </summary>
        /// <param name="createDocClassEditColl">if set to <c>true</c> creates a DocClassEditColl; otherwise fetches a DocClassEditColl.</param>
        protected void DataPortal_Fetch(bool createDocClassEditColl)
        {
            if (createDocClassEditColl)
                LoadProperty(DocClassEditCollProperty, DocClassEditColl.NewDocClassEditColl());
            else
                LoadProperty(DocClassEditCollProperty, DocClassEditColl.GetDocClassEditColl());
            LoadProperty(UserNVLProperty, UserNVL.GetUserNVL());
        }

        #endregion

    }
}
