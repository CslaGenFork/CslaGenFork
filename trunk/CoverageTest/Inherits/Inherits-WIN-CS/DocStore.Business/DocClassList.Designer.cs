//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    DocClassList
// ObjectType:  DocClassList
// CSLAType:    ReadOnlyCollection

using System;
using System.Data;
using System.Data.SqlClient;
using Csla;
using Csla.Data;
using DocStore.Business.Util;
using Csla.Rules;
using Csla.Rules.CommonRules;

namespace DocStore.Business
{

    /// <summary>
    /// Collection of document class's basic information (read only list).<br/>
    /// This is a generated <see cref="DocClassList"/> business object.
    /// This class is a root collection.
    /// </summary>
    /// <remarks>
    /// The items of the collection are <see cref="DocClassInfo"/> objects.
    /// </remarks>
    [Serializable]
#if WINFORMS
    public partial class DocClassList : ReadOnlyBindingListBase<DocClassList, DocClassInfo>
#else
    public partial class DocClassList : ReadOnlyListBase<DocClassList, DocClassInfo>
#endif
    {

        #region Collection Business Methods

        /// <summary>
        /// Determines whether a <see cref="DocClassInfo"/> item is in the collection.
        /// </summary>
        /// <param name="docClassID">The DocClassID of the item to search for.</param>
        /// <returns><c>true</c> if the DocClassInfo is a collection item; otherwise, <c>false</c>.</returns>
        public bool Contains(int docClassID)
        {
            foreach (var docClassInfo in this)
            {
                if (docClassInfo.DocClassID == docClassID)
                {
                    return true;
                }
            }
            return false;
        }

        #endregion

        #region Find Methods

        /// <summary>
        /// Finds a <see cref="DocClassInfo"/> item of the <see cref="DocClassList"/> collection, based on a given DocClassID.
        /// </summary>
        /// <param name="docClassID">The DocClassID.</param>
        /// <returns>A <see cref="DocClassInfo"/> object.</returns>
        public DocClassInfo FindDocClassInfoByDocClassID(int docClassID)
        {
            for (var i = 0; i < this.Count; i++)
            {
                if (this[i].DocClassID.Equals(docClassID))
                {
                    return this[i];
                }
            }

            return null;
        }

        #endregion

        #region Private Fields

        private static DocClassList _list;

        #endregion

        #region Cache Management Methods

        /// <summary>
        /// Clears the in-memory DocClassList cache so it is reloaded on the next request.
        /// </summary>
        public static void InvalidateCache()
        {
            _list = null;
        }

        /// <summary>
        /// Used by async loaders to load the cache.
        /// </summary>
        /// <param name="list">The list to cache.</param>
        internal static void SetCache(DocClassList list)
        {
            _list = list;
        }

        internal static bool IsCached
        {
            get { return _list != null; }
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="DocClassList"/> collection.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="DocClassList"/> collection.</returns>
        public static DocClassList GetDocClassList()
        {
            if (_list == null)
                _list = DataPortal.Fetch<DocClassList>();

            return _list;
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DocClassList"/> collection, based on given parameters.
        /// </summary>
        /// <param name="docClassName">The DocClassName parameter of the DocClassList to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DocClassList"/> collection.</returns>
        public static DocClassList GetDocClassList(string docClassName)
        {
            return DataPortal.Fetch<DocClassList>(docClassName);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DocClassList"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDocClassList(EventHandler<DataPortalResult<DocClassList>> callback)
        {
            if (_list == null)
                DataPortal.BeginFetch<DocClassList>((o, e) =>
                    {
                        _list = e.Object;
                        callback(o, e);
                    });
            else
                callback(null, new DataPortalResult<DocClassList>(_list, null, null));
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DocClassList"/> collection, based on given parameters.
        /// </summary>
        /// <param name="docClassName">The DocClassName parameter of the DocClassList to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDocClassList(string docClassName, EventHandler<DataPortalResult<DocClassList>> callback)
        {
            DataPortal.BeginFetch<DocClassList>(docClassName, callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DocClassList"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public DocClassList()
        {
            // Use factory methods and do not use direct creation.

            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AllowNew = false;
            AllowEdit = false;
            AllowRemove = false;
            RaiseListChangedEvents = rlce;
        }

        #endregion

        #region Object Authorization

        /// <summary>
        /// Adds the object authorization rules.
        /// </summary>
        protected static void AddObjectAuthorizationRules()
        {
            BusinessRules.AddRule(typeof (DocClassList), new IsInRole(AuthorizationActions.GetObject, "User"));

            AddObjectAuthorizationRulesExtend();
        }

        /// <summary>
        /// Allows the set up of custom object authorization rules.
        /// </summary>
        static partial void AddObjectAuthorizationRulesExtend();

        /// <summary>
        /// Checks if the current user can retrieve DocClassList's properties.
        /// </summary>
        /// <returns><c>true</c> if the user can read the object; otherwise, <c>false</c>.</returns>
        public static bool CanGetObject()
        {
            return BusinessRules.HasPermission(Csla.Rules.AuthorizationActions.GetObject, typeof(DocClassList));
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="DocClassList"/> collection from the database or from the cache.
        /// </summary>
        protected void DataPortal_Fetch()
        {
            if (IsCached)
            {
                LoadCachedList();
                return;
            }

            using (var ctx = ConnectionManager<SqlConnection>.GetManager(Database.DocStoreConnection, false))
            {
                using (var cmd = new SqlCommand("GetDocClassList", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    var args = new DataPortalHookArgs(cmd);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
            _list = this;
        }

        private void LoadCachedList()
        {
            IsReadOnly = false;
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AddRange(_list);
            RaiseListChangedEvents = rlce;
            IsReadOnly = true;
        }

        /// <summary>
        /// Loads a <see cref="DocClassList"/> collection from the database, based on given criteria.
        /// </summary>
        /// <param name="docClassName">The Doc Class Name.</param>
        protected void DataPortal_Fetch(string docClassName)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager(Database.DocStoreConnection, false))
            {
                using (var cmd = new SqlCommand("GetDocClassList", ctx.Connection))
                {
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@DocClassName", docClassName).DbType = DbType.String;
                    var args = new DataPortalHookArgs(cmd, docClassName);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }

        private void LoadCollection(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                Fetch(dr);
            }
        }

        /// <summary>
        /// Loads all <see cref="DocClassList"/> collection items from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            IsReadOnly = false;
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            while (dr.Read())
            {
                Add(DocClassInfo.GetDocClassInfo(dr));
            }
            RaiseListChangedEvents = rlce;
            IsReadOnly = true;
        }

        #endregion

        #region DataPortal Hooks

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        #endregion

    }
}
