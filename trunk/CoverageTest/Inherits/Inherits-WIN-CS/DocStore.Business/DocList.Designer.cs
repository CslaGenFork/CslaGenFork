//  This file was generated by CSLA Object Generator - CslaGenFork v4.5
//
// Filename:    DocList
// ObjectType:  DocList
// CSLAType:    ReadOnlyCollection

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using Csla;
using Csla.Data;
using DocStore.Business.Util;
using UsingLibrary;

namespace DocStore.Business
{

    /// <summary>
    /// Collection of document's basic information (read only list).<br/>
    /// This is a generated <see cref="DocList"/> business object.
    /// This class is a root collection.
    /// </summary>
    /// <remarks>
    /// The items of the collection are <see cref="DocInfo"/> objects.
    /// </remarks>
    [Serializable]
#if WINFORMS
    public partial class DocList : MyReadOnlyBindingListBase<DocList, DocInfo>, IHaveInterface, IHaveGenericInterface<DocList>
#else
    public partial class DocList : MyReadOnlyListBase<DocList, DocInfo>, IHaveInterface, IHaveGenericInterface<DocList>
#endif
    {

        #region Event handler properties

        [NotUndoable]
        private static bool _singleInstanceSavedHandler = true;

        /// <summary>
        /// Gets or sets a value indicating whether only a single instance should handle the Saved event.
        /// </summary>
        /// <value>
        /// <c>true</c> if only a single instance should handle the Saved event; otherwise, <c>false</c>.
        /// </value>
        public static bool SingleInstanceSavedHandler
        {
            get { return _singleInstanceSavedHandler; }
            set { _singleInstanceSavedHandler = value; }
        }

        #endregion

        #region Collection Business Methods

        /// <summary>
        /// Determines whether a <see cref="DocInfo"/> item is in the collection.
        /// </summary>
        /// <param name="docID">The DocID of the item to search for.</param>
        /// <returns><c>true</c> if the DocInfo is a collection item; otherwise, <c>false</c>.</returns>
        public bool Contains(int docID)
        {
            foreach (var docInfo in this)
            {
                if (docInfo.DocID == docID)
                {
                    return true;
                }
            }
            return false;
        }

        #endregion

        #region Find Methods

        /// <summary>
        /// Finds a <see cref="DocInfo"/> item of the <see cref="DocList"/> collection, based on a given DocID.
        /// </summary>
        /// <param name="docID">The DocID.</param>
        /// <returns>A <see cref="DocInfo"/> object.</returns>
        public DocInfo FindDocInfoByDocID(int docID)
        {
            for (var i = 0; i < this.Count; i++)
            {
                if (this[i].DocID.Equals(docID))
                {
                    return this[i];
                }
            }

            return null;
        }

        #endregion

        #region Factory Methods

        /// <summary>
        /// Factory method. Loads a <see cref="DocList"/> collection.
        /// </summary>
        /// <returns>A reference to the fetched <see cref="DocList"/> collection.</returns>
        public static DocList GetDocList()
        {
            return DataPortal.Fetch<DocList>();
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DocList"/> collection, based on given parameters.
        /// </summary>
        /// <param name="crit">The fetch criteria.</param>
        /// <returns>A reference to the fetched <see cref="DocList"/> collection.</returns>
        public static DocList GetDocList(DocListFilteredCriteria crit)
        {
            return DataPortal.Fetch<DocList>(crit);
        }

        /// <summary>
        /// Factory method. Loads a <see cref="DocList"/> collection, based on given parameters.
        /// </summary>
        /// <param name="docID">The DocID parameter of the DocList to fetch.</param>
        /// <param name="docClassID">The DocClassID parameter of the DocList to fetch.</param>
        /// <param name="docTypeID">The DocTypeID parameter of the DocList to fetch.</param>
        /// <param name="senderID">The SenderID parameter of the DocList to fetch.</param>
        /// <param name="recipientID">The RecipientID parameter of the DocList to fetch.</param>
        /// <param name="docRef">The DocRef parameter of the DocList to fetch.</param>
        /// <param name="docDate">The DocDate parameter of the DocList to fetch.</param>
        /// <param name="subject">The Subject parameter of the DocList to fetch.</param>
        /// <param name="docStatusID">The DocStatusID parameter of the DocList to fetch.</param>
        /// <param name="createDate">The CreateDate parameter of the DocList to fetch.</param>
        /// <param name="createUserID">The CreateUserID parameter of the DocList to fetch.</param>
        /// <param name="changeDate">The ChangeDate parameter of the DocList to fetch.</param>
        /// <param name="changeUserID">The ChangeUserID parameter of the DocList to fetch.</param>
        /// <returns>A reference to the fetched <see cref="DocList"/> collection.</returns>
        public static DocList GetDocList(int? docID, int? docClassID, int? docTypeID, int? senderID, int? recipientID, string docRef, SmartDate docDate, string subject, int? docStatusID, SmartDate createDate, int? createUserID, SmartDate changeDate, int? changeUserID)
        {
            return DataPortal.Fetch<DocList>(new DocListFilteredCriteria(docID, docClassID, docTypeID, senderID, recipientID, docRef, docDate, subject, docStatusID, createDate, createUserID, changeDate, changeUserID));
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DocList"/> collection.
        /// </summary>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDocList(EventHandler<DataPortalResult<DocList>> callback)
        {
            DataPortal.BeginFetch<DocList>(callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DocList"/> collection, based on given parameters.
        /// </summary>
        /// <param name="crit">The fetch criteria.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDocList(DocListFilteredCriteria crit, EventHandler<DataPortalResult<DocList>> callback)
        {
            DataPortal.BeginFetch<DocList>(crit, callback);
        }

        /// <summary>
        /// Factory method. Asynchronously loads a <see cref="DocList"/> collection, based on given parameters.
        /// </summary>
        /// <param name="docID">The DocID parameter of the DocList to fetch.</param>
        /// <param name="docClassID">The DocClassID parameter of the DocList to fetch.</param>
        /// <param name="docTypeID">The DocTypeID parameter of the DocList to fetch.</param>
        /// <param name="senderID">The SenderID parameter of the DocList to fetch.</param>
        /// <param name="recipientID">The RecipientID parameter of the DocList to fetch.</param>
        /// <param name="docRef">The DocRef parameter of the DocList to fetch.</param>
        /// <param name="docDate">The DocDate parameter of the DocList to fetch.</param>
        /// <param name="subject">The Subject parameter of the DocList to fetch.</param>
        /// <param name="docStatusID">The DocStatusID parameter of the DocList to fetch.</param>
        /// <param name="createDate">The CreateDate parameter of the DocList to fetch.</param>
        /// <param name="createUserID">The CreateUserID parameter of the DocList to fetch.</param>
        /// <param name="changeDate">The ChangeDate parameter of the DocList to fetch.</param>
        /// <param name="changeUserID">The ChangeUserID parameter of the DocList to fetch.</param>
        /// <param name="callback">The completion callback method.</param>
        public static void GetDocList(int? docID, int? docClassID, int? docTypeID, int? senderID, int? recipientID, string docRef, SmartDate docDate, string subject, int? docStatusID, SmartDate createDate, int? createUserID, SmartDate changeDate, int? changeUserID, EventHandler<DataPortalResult<DocList>> callback)
        {
            DataPortal.BeginFetch<DocList>(new DocListFilteredCriteria(docID, docClassID, docTypeID, senderID, recipientID, docRef, docDate, subject, docStatusID, createDate, createUserID, changeDate, changeUserID), callback);
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DocList"/> class.
        /// </summary>
        /// <remarks> Do not use to create a Csla object. Use factory methods instead.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public DocList()
        {
            // Use factory methods and do not use direct creation.
            DocSaved.Register(this);

            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            AllowNew = false;
            AllowEdit = false;
            AllowRemove = false;
            RaiseListChangedEvents = rlce;
        }

        #endregion

        #region Saved Event Handler

        /// <summary>
        /// Handle Saved events of <see cref="Doc"/> to update the list of <see cref="DocInfo"/> objects.
        /// </summary>
        /// <param name="sender">The sender of the event.</param>
        /// <param name="e">The <see cref="Csla.Core.SavedEventArgs"/> instance containing the event data.</param>
        internal void DocSavedHandler(object sender, Csla.Core.SavedEventArgs e)
        {
            var obj = (Doc)e.NewObject;
            if (((Doc)sender).IsNew)
            {
                IsReadOnly = false;
                var rlce = RaiseListChangedEvents;
                RaiseListChangedEvents = true;
                Add(DocInfo.LoadInfo(obj));
                RaiseListChangedEvents = rlce;
                IsReadOnly = true;
            }
            else if (((Doc)sender).IsDeleted)
            {
                for (int index = 0; index < this.Count; index++)
                {
                    var child = this[index];
                    if (child.DocID == obj.DocID)
                    {
                        IsReadOnly = false;
                        var rlce = RaiseListChangedEvents;
                        RaiseListChangedEvents = true;
                        this.RemoveItem(index);
                        RaiseListChangedEvents = rlce;
                        IsReadOnly = true;
                        break;
                    }
                }
            }
            else
            {
                for (int index = 0; index < this.Count; index++)
                {
                    var child = this[index];
                    if (child.DocID == obj.DocID)
                    {
                        child.UpdatePropertiesOnSaved(obj);
#if !WINFORMS
                        var notifyCollectionChangedEventArgs =
                            new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Replace, child, child, index);
                        OnCollectionChanged(notifyCollectionChangedEventArgs);
#else
                        var listChangedEventArgs = new ListChangedEventArgs(ListChangedType.ItemChanged, index);
                        OnListChanged(listChangedEventArgs);
#endif
                        break;
                    }
                }
            }
        }

        #endregion

        #region Data Access

        /// <summary>
        /// Loads a <see cref="DocList"/> collection from the database.
        /// </summary>
        protected void DataPortal_Fetch()
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager(Database.DocStoreConnection, false))
            {
                GetQueryGetDocList();
                using (var cmd = new SqlCommand(getDocListInlineQuery, ctx.Connection))
                {
                    cmd.CommandType = CommandType.Text;
                    var args = new DataPortalHookArgs(cmd);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }

        /// <summary>
        /// Loads a <see cref="DocList"/> collection from the database, based on given criteria.
        /// </summary>
        /// <param name="crit">The fetch criteria.</param>
        protected void DataPortal_Fetch(DocListFilteredCriteria crit)
        {
            using (var ctx = ConnectionManager<SqlConnection>.GetManager(Database.DocStoreConnection, false))
            {
                GetQueryGetDocList(crit);
                using (var cmd = new SqlCommand(getDocListInlineQuery, ctx.Connection))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.Parameters.AddWithValue("@DocID", crit.DocID == null ? (object)DBNull.Value : crit.DocID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DocClassID", crit.DocClassID == null ? (object)DBNull.Value : crit.DocClassID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DocTypeID", crit.DocTypeID == null ? (object)DBNull.Value : crit.DocTypeID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@SenderID", crit.SenderID == null ? (object)DBNull.Value : crit.SenderID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@RecipientID", crit.RecipientID == null ? (object)DBNull.Value : crit.RecipientID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@DocRef", crit.DocRef == null ? (object)DBNull.Value : crit.DocRef).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DocDate", crit.DocDate == null ? (object)DBNull.Value : crit.DocDate.DBValue).DbType = DbType.Date;
                    cmd.Parameters.AddWithValue("@Subject", crit.Subject == null ? (object)DBNull.Value : crit.Subject).DbType = DbType.String;
                    cmd.Parameters.AddWithValue("@DocStatusID", crit.DocStatusID == null ? (object)DBNull.Value : crit.DocStatusID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@CreateDate", crit.CreateDate == null ? (object)DBNull.Value : crit.CreateDate.DBValue).DbType = DbType.DateTime2;
                    cmd.Parameters.AddWithValue("@CreateUserID", crit.CreateUserID == null ? (object)DBNull.Value : crit.CreateUserID.Value).DbType = DbType.Int32;
                    cmd.Parameters.AddWithValue("@ChangeDate", crit.ChangeDate == null ? (object)DBNull.Value : crit.ChangeDate.DBValue).DbType = DbType.DateTime2;
                    cmd.Parameters.AddWithValue("@ChangeUserID", crit.ChangeUserID == null ? (object)DBNull.Value : crit.ChangeUserID.Value).DbType = DbType.Int32;
                    var args = new DataPortalHookArgs(cmd, crit);
                    OnFetchPre(args);
                    LoadCollection(cmd);
                    OnFetchPost(args);
                }
            }
        }

        private void LoadCollection(SqlCommand cmd)
        {
            using (var dr = new SafeDataReader(cmd.ExecuteReader()))
            {
                Fetch(dr);
            }
        }

        /// <summary>
        /// Loads all <see cref="DocList"/> collection items from the given SafeDataReader.
        /// </summary>
        /// <param name="dr">The SafeDataReader to use.</param>
        private void Fetch(SafeDataReader dr)
        {
            IsReadOnly = false;
            var rlce = RaiseListChangedEvents;
            RaiseListChangedEvents = false;
            while (dr.Read())
            {
                Add(DocInfo.GetDocInfo(dr));
            }
            RaiseListChangedEvents = rlce;
            IsReadOnly = true;
        }

        #endregion

        #region Inline queries fields and partial methods

        [NotUndoable, NonSerialized]
        private string getDocListInlineQuery;

        partial void GetQueryGetDocList();

        partial void GetQueryGetDocList(DocListFilteredCriteria crit);

        #endregion

        #region DataPortal Hooks

        /// <summary>
        /// Occurs after setting query parameters and before the fetch operation.
        /// </summary>
        partial void OnFetchPre(DataPortalHookArgs args);

        /// <summary>
        /// Occurs after the fetch operation (object or collection is fully loaded and set up).
        /// </summary>
        partial void OnFetchPost(DataPortalHookArgs args);

        #endregion

        #region DocSaved nested class

        /// <summary>
        /// Nested class to manage the Saved events of <see cref="Doc"/>
        /// to update the list of <see cref="DocInfo"/> objects.
        /// </summary>
        private static class DocSaved
        {
            private static List<WeakReference> _references;

            private static bool Found(object obj)
            {
                return _references.Any(reference => Equals(reference.Target, obj));
            }

            /// <summary>
            /// Registers a DocList instance to handle Saved events.
            /// to update the list of <see cref="DocInfo"/> objects.
            /// </summary>
            /// <param name="obj">The DocList instance.</param>
            public static void Register(DocList obj)
            {
                var mustRegister = _references == null;

                if (mustRegister)
                    _references = new List<WeakReference>();

                if (DocList.SingleInstanceSavedHandler)
                    _references.Clear();

                if (!Found(obj))
                    _references.Add(new WeakReference(obj));

                if (mustRegister)
                    Doc.DocSaved += DocSavedHandler;
            }

            /// <summary>
            /// Handles Saved events of <see cref="Doc"/>.
            /// </summary>
            /// <param name="sender">The sender of the event.</param>
            /// <param name="e">The <see cref="Csla.Core.SavedEventArgs"/> instance containing the event data.</param>
            public static void DocSavedHandler(object sender, Csla.Core.SavedEventArgs e)
            {
                foreach (var reference in _references)
                {
                    if (reference.IsAlive)
                        ((DocList) reference.Target).DocSavedHandler(sender, e);
                }
            }

            /// <summary>
            /// Removes event handling and clears all registered DocList instances.
            /// </summary>
            public static void Unregister()
            {
                Doc.DocSaved -= DocSavedHandler;
                _references = null;
            }
        }

        #endregion

    }

    #region Criteria

    /// <summary>
    /// DocListFilteredCriteria criteria.
    /// </summary>
    [Serializable]
    public class DocListFilteredCriteria : CriteriaBase<DocListFilteredCriteria>
    {

        /// <summary>
        /// Maintains metadata about <see cref="DocID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> DocIDProperty = RegisterProperty<int?>(p => p.DocID);
        /// <summary>
        /// Gets or sets the Doc ID.
        /// </summary>
        /// <value>The Doc ID.</value>
        public int? DocID
        {
            get { return ReadProperty(DocIDProperty); }
            set { LoadProperty(DocIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocClassID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> DocClassIDProperty = RegisterProperty<int?>(p => p.DocClassID);
        /// <summary>
        /// Gets or sets the Doc Class ID.
        /// </summary>
        /// <value>The Doc Class ID.</value>
        public int? DocClassID
        {
            get { return ReadProperty(DocClassIDProperty); }
            set { LoadProperty(DocClassIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocTypeID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> DocTypeIDProperty = RegisterProperty<int?>(p => p.DocTypeID);
        /// <summary>
        /// Gets or sets the Doc Type ID.
        /// </summary>
        /// <value>The Doc Type ID.</value>
        public int? DocTypeID
        {
            get { return ReadProperty(DocTypeIDProperty); }
            set { LoadProperty(DocTypeIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="SenderID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> SenderIDProperty = RegisterProperty<int?>(p => p.SenderID);
        /// <summary>
        /// Gets or sets the Sender ID.
        /// </summary>
        /// <value>The Sender ID.</value>
        public int? SenderID
        {
            get { return ReadProperty(SenderIDProperty); }
            set { LoadProperty(SenderIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="RecipientID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> RecipientIDProperty = RegisterProperty<int?>(p => p.RecipientID);
        /// <summary>
        /// Gets or sets the Recipient ID.
        /// </summary>
        /// <value>The Recipient ID.</value>
        public int? RecipientID
        {
            get { return ReadProperty(RecipientIDProperty); }
            set { LoadProperty(RecipientIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocRef"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> DocRefProperty = RegisterProperty<string>(p => p.DocRef);
        /// <summary>
        /// Gets or sets the Doc Ref.
        /// </summary>
        /// <value>The Doc Ref.</value>
        public string DocRef
        {
            get { return ReadProperty(DocRefProperty); }
            set { LoadProperty(DocRefProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocDate"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> DocDateProperty = RegisterProperty<SmartDate>(p => p.DocDate);
        /// <summary>
        /// Gets or sets the Doc Date.
        /// </summary>
        /// <value>The Doc Date.</value>
        public SmartDate DocDate
        {
            get { return ReadProperty(DocDateProperty); }
            set { LoadProperty(DocDateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="Subject"/> property.
        /// </summary>
        public static readonly PropertyInfo<string> SubjectProperty = RegisterProperty<string>(p => p.Subject);
        /// <summary>
        /// Gets or sets the Subject.
        /// </summary>
        /// <value>The Subject.</value>
        public string Subject
        {
            get { return ReadProperty(SubjectProperty); }
            set { LoadProperty(SubjectProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="DocStatusID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> DocStatusIDProperty = RegisterProperty<int?>(p => p.DocStatusID);
        /// <summary>
        /// Gets or sets the Doc Status ID.
        /// </summary>
        /// <value>The Doc Status ID.</value>
        public int? DocStatusID
        {
            get { return ReadProperty(DocStatusIDProperty); }
            set { LoadProperty(DocStatusIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CreateDate"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> CreateDateProperty = RegisterProperty<SmartDate>(p => p.CreateDate);
        /// <summary>
        /// Gets or sets the Create Date.
        /// </summary>
        /// <value>The Create Date.</value>
        public SmartDate CreateDate
        {
            get { return ReadProperty(CreateDateProperty); }
            set { LoadProperty(CreateDateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="CreateUserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> CreateUserIDProperty = RegisterProperty<int?>(p => p.CreateUserID);
        /// <summary>
        /// Gets or sets the Create User ID.
        /// </summary>
        /// <value>The Create User ID.</value>
        public int? CreateUserID
        {
            get { return ReadProperty(CreateUserIDProperty); }
            set { LoadProperty(CreateUserIDProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ChangeDate"/> property.
        /// </summary>
        public static readonly PropertyInfo<SmartDate> ChangeDateProperty = RegisterProperty<SmartDate>(p => p.ChangeDate);
        /// <summary>
        /// Gets or sets the Change Date.
        /// </summary>
        /// <value>The Change Date.</value>
        public SmartDate ChangeDate
        {
            get { return ReadProperty(ChangeDateProperty); }
            set { LoadProperty(ChangeDateProperty, value); }
        }

        /// <summary>
        /// Maintains metadata about <see cref="ChangeUserID"/> property.
        /// </summary>
        public static readonly PropertyInfo<int?> ChangeUserIDProperty = RegisterProperty<int?>(p => p.ChangeUserID);
        /// <summary>
        /// Gets or sets the Change User ID.
        /// </summary>
        /// <value>The Change User ID.</value>
        public int? ChangeUserID
        {
            get { return ReadProperty(ChangeUserIDProperty); }
            set { LoadProperty(ChangeUserIDProperty, value); }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocListFilteredCriteria"/> class.
        /// </summary>
        /// <remarks> A parameterless constructor is required by the MobileFormatter.</remarks>
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public DocListFilteredCriteria()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocListFilteredCriteria"/> class.
        /// </summary>
        /// <param name="docID">The DocID.</param>
        /// <param name="docClassID">The DocClassID.</param>
        /// <param name="docTypeID">The DocTypeID.</param>
        /// <param name="senderID">The SenderID.</param>
        /// <param name="recipientID">The RecipientID.</param>
        /// <param name="docRef">The DocRef.</param>
        /// <param name="docDate">The DocDate.</param>
        /// <param name="subject">The Subject.</param>
        /// <param name="docStatusID">The DocStatusID.</param>
        /// <param name="createDate">The CreateDate.</param>
        /// <param name="createUserID">The CreateUserID.</param>
        /// <param name="changeDate">The ChangeDate.</param>
        /// <param name="changeUserID">The ChangeUserID.</param>
        public DocListFilteredCriteria(int? docID, int? docClassID, int? docTypeID, int? senderID, int? recipientID, string docRef, SmartDate docDate, string subject, int? docStatusID, SmartDate createDate, int? createUserID, SmartDate changeDate, int? changeUserID)
        {
            DocID = docID;
            DocClassID = docClassID;
            DocTypeID = docTypeID;
            SenderID = senderID;
            RecipientID = recipientID;
            DocRef = docRef;
            DocDate = docDate;
            Subject = subject;
            DocStatusID = docStatusID;
            CreateDate = createDate;
            CreateUserID = createUserID;
            ChangeDate = changeDate;
            ChangeUserID = changeUserID;
        }

        /// <summary>
        /// Determines whether the specified <see cref="System.Object"/> is equal to this instance.
        /// </summary>
        /// <param name="obj">The <see cref="System.Object"/> to compare with this instance.</param>
        /// <returns><c>true</c> if the specified <see cref="System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        public override bool Equals(object obj)
        {
            if (obj is DocListFilteredCriteria)
            {
                var c = (DocListFilteredCriteria) obj;
                if (!DocID.Equals(c.DocID))
                    return false;
                if (!DocClassID.Equals(c.DocClassID))
                    return false;
                if (!DocTypeID.Equals(c.DocTypeID))
                    return false;
                if (!SenderID.Equals(c.SenderID))
                    return false;
                if (!RecipientID.Equals(c.RecipientID))
                    return false;
                if (!DocRef.Equals(c.DocRef))
                    return false;
                if (!DocDate.Equals(c.DocDate))
                    return false;
                if (!Subject.Equals(c.Subject))
                    return false;
                if (!DocStatusID.Equals(c.DocStatusID))
                    return false;
                if (!CreateDate.Equals(c.CreateDate))
                    return false;
                if (!CreateUserID.Equals(c.CreateUserID))
                    return false;
                if (!ChangeDate.Equals(c.ChangeDate))
                    return false;
                if (!ChangeUserID.Equals(c.ChangeUserID))
                    return false;
                return true;
            }
            return false;
        }

        /// <summary>
        /// Returns a hash code for this instance.
        /// </summary>
        /// <returns>An hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        public override int GetHashCode()
        {
            return string.Concat("DocListFilteredCriteria", DocID.ToString(), DocClassID.ToString(), DocTypeID.ToString(), SenderID.ToString(), RecipientID.ToString(), DocRef.ToString(), DocDate.ToString(), Subject.ToString(), DocStatusID.ToString(), CreateDate.ToString(), CreateUserID.ToString(), ChangeDate.ToString(), ChangeUserID.ToString()).GetHashCode();
        }
    }

    #endregion

}
