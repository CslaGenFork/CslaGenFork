<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA ReadOnly Object." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the ReadOnly Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="Infos" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return infos to master.cst" %>
<%@ Property Name="MethodList" Type="System.Collections.Generic.List<AdvancedGenerator.ServiceMethod>" Optional="false" Category="Options" Description="Allows the template to return a list a partial methods to master.cst (for Silverlight using services)" %>

<%@ Assembly Name="DBSchemaInfo" %>
<%@ Import Namespace="DBSchemaInfo.Base" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Reflection" %>

<!-- #include file="ObjectValidate.asp" -->
<!-- #include file="ReadOnlyObject_Validate.asp" -->
<%
if (Errors.Length == 0)
{
    bool isUndeletable = false;
    string softDeleteProperty = string.Empty;
    bool isItem = false;
    bool isParentRootCollection = false;
    bool useIsLoadedProperty = false;
    CslaObjectInfo grandParentInfo = null;
    if (parentInfo != null)
    {
        isItem = TypeHelper.IsCollectionType(parentInfo.ObjectType);
        grandParentInfo = Info.Parent.CslaObjects.Find(parentInfo.ParentType);
        isParentRootCollection = (parentInfo.IsEditableRootCollection()) ||
            (parentInfo.IsReadOnlyCollection() && parentInfo.ParentType == String.Empty);
    }
    if (!isItem)
        useIsLoadedProperty = CurrentUnit.GenerationParams.ReportObjectNotFound == ReportObjectNotFound.IsLoadedProperty;
    bool isSwitchable = false;
    bool isCollection = false;
    bool useBypassPropertyChecks = CurrentUnit.GenerationParams.UseBypassPropertyChecks;
    string bpcSpacer = useBypassPropertyChecks ? bpcSpacer = new string(' ', 4) : string.Empty;
    bool ancestorIsCollection = false;
    int ancestorLoaderLevel = AncestorLoaderLevel(Info, out ancestorIsCollection);
    GenerationStep genStep = GenerationStep.Business;
    bool usesDTO = CurrentUnit.GenerationParams.GenerateDTO;
    int silverlightLevel = 0;
    bool genOptional = false;
    bool useItem = false;
    bool? firstComment = null;
    bool internalNewObjectUsed = false;
    Criteria critCGF = new Criteria(Info);
    if (parentInfo != null)
        internalNewObjectUsed = ancestorLoaderLevel > 0 && parentInfo.IsNotReadOnlyCollection();
    if (internalNewObjectUsed)
    {
        critCGF.Name = "CreatedByCslaGenFork";// this name is hard coded
        critCGF.CreateOptions.Factory = true;
        critCGF.CreateOptions.DataPortal = true;
        critCGF.CreateOptions.RunLocal = true;
        Info.CriteriaObjects.Add(critCGF);
    }

    %><!-- #include file="Header.asp" -->
<%= GetUsingStatementsStringBusiness(Info, CurrentUnit) %>
namespace <%= GetContextObjectNamespace(Info, CurrentUnit, genStep) %>
{

    <!-- #include file="XmlComment.asp" -->
    <%
    if (GetAttributesString(Info.Attributes) != string.Empty)
    {
        %>
    <%= GetAttributesString(Info.Attributes) %>
    <%
    }
    %>
    [Serializable]
    <%= Info.ClassVisibility == ClassVisibility.Public ? "public" : "internal" %> partial class <%= Info.ObjectName %> : <%
    if (Info.InheritedType.Type != string.Empty || Info.InheritedType.ObjectName != string.Empty)
    {
        %><!-- #include file="Inherits.asp" --><%
    }
    else
    {
        %>ReadOnlyBase<<%= Info.ObjectName %>><!-- #include file="Interfaces.asp" --><%
    }
    %>
    {
<!-- #include file="StaticFields.asp" -->
<!-- #include file="StateFields.asp" -->
<!-- #include file="BusinessProps.asp" -->
<!-- #include file="ObjectOverrides.asp" -->
    <%
    if (Info.GenerateFactoryMethods && (UseChildFactoryHelper || Info.ParentType == string.Empty))
    {
        Response.Write(Environment.NewLine);
        if (CurrentUnit.GenerationParams.TargetIsCsla40)
        {
            %>
<!-- #include file="ReadOnlyObject_Factory.asp" -->
<%
        }
        else
        {
            %>
<!-- #include file="ReadOnlyObject_Factory-45.asp" -->
<%
        }
    }
    Response.Write(Environment.NewLine);
    %>
<!-- #include file="Constructor.asp" -->
<!-- #include file="Criteria.asp" -->
<!-- #include file="ObjectAuthorizationMethods.asp" -->
<!-- #include file="BusinessRules.asp" -->
<!-- #include file="UpdateProperties.asp" -->
<%
    if (Info.GenerateDataAccessRegion)
    {
        if (!genOptional && !Info.UseCustomLoading)
        {
            Response.Write(Environment.NewLine);
        }
        if (!Info.UseCustomLoading)
        {
            %>
<!-- #include file="ReadOnlyObject_DataPortal.asp" -->
<%
        }
        %>

<!-- #include file="DataPortalHooks.asp" -->

<%
    }
    else
    {
        Response.Write(Environment.NewLine);
    }
    %>
    }
<!-- #include file="CriteriaObject.asp" -->
}
<%
    if (internalNewObjectUsed)
    {
        Info.CriteriaObjects.Remove(critCGF);
    }
}
%>
