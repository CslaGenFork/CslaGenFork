<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA ReadOnly Collection." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="'DBSchemaInfo" %>
<%@ Import Namespace="DBSchemaInfo" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Reflection" %>
<%@ Assembly Name="System.Core" %>
<%@ Import Namespace="System.Linq" %>
<%
/*
ERRORS
1. database bound Value Property must have valid column
2. child properties must have an existing type of the correct stereotype
3. parent type must exists when class is not root
4. item type must exists when class is collection
5. parent properties must match a parent value property
6. suffix for base and extended must be different
7. suffix for base and comment must be different, except if both are empty
8. suffix for extended and comment must be different, except if both are empty
9. Base namespace can not be empty
10. Utilities namespace can not be empty
11. Utilities namespace must be under Base namespace
12. Connection name can not be empty
13. Object namespace must be under base namespace
14. Generate child factory requires synchronous.
WARNINGS
15. When separate namespaces in folders, Utility classes folder is ignored
16. Check no repeated object names
17. Check no repeated file names
18. Check no repeated criteria names for non nested class (classes with more than one property)
*/

// do not validate objects that aren't generated
var list = CurrentUnit.CslaObjects.Where(t => t.Generate).ToList();
foreach (CslaObjectInfo objectInfo in list)
{
    if (objectInfo.ObjectName == String.Empty)
    {
        objectInfo.ObjectName = "__EMPTY__";
        Errors.Append("Unnamed object was renamed to \"__EMPTY__\"." + Environment.NewLine);
        return;
    }

    foreach (ValueProperty valProp in objectInfo.GetDatabaseBoundValueProperties())
    {
        if (valProp.Name == String.Empty)
        {
            valProp.Name = "__EMPTY__";
            Errors.Append("Object " + objectInfo.ObjectName + ": unnamed Value Property was renamed to \"__EMPTY__\"." + Environment.NewLine);
            return;
        }

        if (!parentProp.IsDatabaseBound)
            continue;
        if (valProp.DbBindColumn == null)
            continue;
        if (valProp.DbBindColumn.ColumnOriginType == ColumnOriginType.None)
            continue;
        if (valProp.DbBindColumn.Column == null)
            Errors.Append("Object " + objectInfo.ObjectName + " Value Property " + valProp.Name + ": DB Bind Column not found." + Environment.NewLine);
    }

    foreach (ChildProperty childProp in objectInfo.GetAllChildProperties())
    {
        if (childProp.Name == String.Empty)
        {
            childProp.Name = "__EMPTY__";
            Errors.Append("Object " + objectInfo.ObjectName + ": unnamed Child Property was renamed to \"__EMPTY__\"." + Environment.NewLine);
            return;
        }
        CslaObjectInfo child = objectInfo.Parent.CslaObjects.Find(childProp.TypeName);
        if (child == null)
            Errors.Append("Object " + objectInfo.ObjectName + " Child Property " + childProp.Name + ": Type " + childProp.TypeName + " not found." + Environment.NewLine);
        else
        {
            if (child.ParentType != objectInfo.ObjectName)
                Errors.Append("Object " + objectInfo.ObjectName + " Child Property " + childProp.Name + " Type " + childProp.TypeName + ": Parent Type " + child.ParentType + " doesn't match." + Environment.NewLine);
            if (!TypeHelper.IsChildType(child))
                Errors.Append("Object " + objectInfo.ObjectName + " Child Property " + childProp.Name + ": Type " + childProp.TypeName + " must be a child stereotype." + Environment.NewLine);
            CslaObjectInfo childParent = objectInfo.Parent.CslaObjects.Find(child.ParentType);
            if (childParent == null)
                Errors.Append("Object " + objectInfo.ObjectName + " Child Property " + childProp.Name + " Type " + childProp.TypeName + ": Parent Type " + child.ParentType + " not found." + Environment.NewLine);
        }
    }

    foreach (Criteria crit in objectInfo.CriteriaObjects)
    {
        if (crit.Name == String.Empty)
        {
            crit.Name = "__EMPTY__";
            Errors.Append("Object " + objectInfo.ObjectName + ": unnamed Criteria was renamed to \"__EMPTY__\"." + Environment.NewLine);
        }
    }

    // investigate parent type matching child and item
    if (TypeHelper.IsRootType(objectInfo) ||
        objectInfo.IsNameValueList() ||
        objectInfo.IsUnitOfWork() ||
        objectInfo.IsBaseClass() ||
        objectInfo.IsCriteriaClass())
        continue;

    if (objectInfo.ParentType.Equals(String.Empty))
    {
        Errors.Append("Object " + objectInfo.ObjectName + ": Parent Type is missing." + Environment.NewLine);
        continue;
    }

    CslaObjectInfo parent = objectInfo.Parent.CslaObjects.Find(objectInfo.ParentType);// explicit parent
    if (parent != null)
    {
        if (TypeHelper.IsRootType(parent))
            continue;
        else
        {
            if (TypeHelper.IsCollectionType(parent.ObjectType))
            {
                if (parent.IsPolymorphic && parent.ItemType != objectInfo.ObjectName)
                {
                    bool interfaceFound = false;
                    foreach (string implement in objectInfo.Interfaces)
                    {
                        if (implement.Trim() == parent.ItemType)
                        {
                            interfaceFound = true;
                            break;
                        }
                    }
                    if (!interfaceFound)
                    {
                        Errors.Append("The polymorphic item '" + objectInfo.ObjectName + "' of '" + parent.ObjectName + "' must implement '" + parent.ItemType + "'." + Environment.NewLine);
                        return;
                    }
                }
                else
                {
                    if (parent.ItemType != objectInfo.ObjectName)
                    {
                        Errors.Append("Object " + objectInfo.ObjectName + ": Item Type of parent " + parent.ObjectName + " doesn't match this child." + Environment.NewLine);
                        //continue;
                    }
                }
                string grandParentType = parent.ParentType;
                parent = objectInfo.Parent.CslaObjects.Find(parent.ParentType);// object parent
                if (parent == null)
                {
                    Errors.Append("Object " + objectInfo.ObjectName + ": Grand Parent Type " + grandParentType + " not found." + Environment.NewLine);
                    //continue;
                }
                //Errors.Append("Object " + objectInfo.ObjectName + ": Parent Type " + objectInfo.ParentType + " doesn't know this child." + Environment.NewLine);

            }
        }
    }
    else //if (parent == null)
    {
        Errors.Append("Object " + objectInfo.ObjectName + ": Parent Type " + objectInfo.ParentType + " not found." + Environment.NewLine);
        //continue;
    }

    if (parent != null)
    {
        // parent properties
        if (!TypeHelper.IsCollectionType(objectInfo.ObjectType))
        {
            foreach (Property prop in objectInfo.ParentProperties)
            {
                bool match = false;
                foreach (ValueProperty valProp in parent.ValueProperties)
                {
                    if (prop.Name == valProp.Name)
                    {
                        match = true;
                        break;
                    }
                }
                if (match == false)
                    Errors.Append("Object " + objectInfo.ObjectName + " Parent Property " + prop.Name + ": found no matching Value Property on parent type "  + parent.ObjectName + "." + Environment.NewLine);
            }
        }
    }

    // item and matching item's parent
    if (!objectInfo.ItemType.Equals(String.Empty))
    {
        CslaObjectInfo item = objectInfo.Parent.CslaObjects.Find(objectInfo.ItemType);
        if (item == null)
            Errors.Append("Object " + objectInfo.ObjectName + ": Item Type " + objectInfo.ItemType + " not found." + Environment.NewLine);
        else
            if (item.ParentType != objectInfo.ObjectName)
                Errors.Append("Object " + objectInfo.ObjectName + ": item of Parent Type " + item.ParentType + " doesn't match this object." + Environment.NewLine);
    }
}
if (Errors.Length > 0)
    return;

if (CurrentUnit.GenerationParams.BaseFilenameSuffix ==
    CurrentUnit.GenerationParams.ExtendedFilenameSuffix)
{
    Errors.Append("Generation settings: 'Suffix for base files' can not be equal to 'Suffix for extended files' (" +
        CurrentUnit.GenerationParams.BaseFilenameSuffix + ")." + Environment.NewLine);
}
if (CurrentUnit.GenerationParams.BaseFilenameSuffix != string.Empty &&
    CurrentUnit.GenerationParams.BaseFilenameSuffix ==
    CurrentUnit.GenerationParams.ClassCommentFilenameSuffix)
{
    Errors.Append("Generation settings: 'Suffix for base files' can not be equal to 'Suffix for class comment files' (" +
        CurrentUnit.GenerationParams.BaseFilenameSuffix + ")." + Environment.NewLine);
}
if (CurrentUnit.GenerationParams.ExtendedFilenameSuffix != string.Empty &&
    CurrentUnit.GenerationParams.ExtendedFilenameSuffix ==
    CurrentUnit.GenerationParams.ClassCommentFilenameSuffix)
{
    Errors.Append("Generation settings: 'Suffix for extended files' can not be equal to suffix for class comment files (" +
        CurrentUnit.GenerationParams.ExtendedFilenameSuffix + ")." + Environment.NewLine);
}
if (CurrentUnit.GenerationParams.BaseNamespace.Equals(string.Empty))
{
    Errors.Append("Generation settings: 'Base namespace' can not be empty." + Environment.NewLine);
}
if (CurrentUnit.GenerationParams.UtilitiesNamespace.Equals(string.Empty))
{
    Errors.Append("Generation settings: 'Utility classes namespace' can not be empty." + Environment.NewLine);
}
if (CurrentUnit.GenerationParams.UtilitiesNamespace.IndexOf(CurrentUnit.GenerationParams.BaseNamespace) != 0)
{
    Errors.Append("Generation settings: 'Utility classes namespace' (" + CurrentUnit.GenerationParams.UtilitiesNamespace + ") must be under must be under 'Base namespace' (" +
            CurrentUnit.GenerationParams.BaseNamespace + ")." + Environment.NewLine);
}
if (CurrentUnit.GenerationParams.DatabaseConnection.Equals(string.Empty))
{
    Errors.Append("Generation settings: 'Connection name' can not be empty." + Environment.NewLine);
}
if (CurrentUnit.GenerationParams.UseChildFactory && !CurrentUnit.GenerationParams.GenerateSynchronous)
{
    Errors.Append("Generation settings: 'Generate child factory methods' requires 'Generate Synchronous'." + Environment.NewLine);
}
// now this just cannot happen
/*if (CurrentUnit.GenerationParams.SeparateNamespaces &&
    CurrentUnit.GenerationParams.UtilitiesFolder != string.Empty)
{
    Warnings.Append("Generation settings: 'Utility classes folder' will be ignored (separate namespaces in folders is set)." + Environment.NewLine);
}*/

// Why? This isn't the behaviour with base files...
if (CurrentUnit.GenerationParams.SeparateClassComment &&
    CurrentUnit.GenerationParams.ClassCommentFilenameSuffix == string.Empty)
{
    Warnings.Append("Generation settings: 'Separate class comments in a folder' will be ignored (class comment suffix is empty)." + Environment.NewLine);
}
if (Errors.Length > 0)
    return;

List<string> objectNames = new List<string>();
List<string> filenames = new List<string>();
List<string> criteriaNames = new List<string>();
foreach (CslaObjectInfo objectInfo in CurrentUnit.CslaObjects)
{
    if (objectInfo.Generate)
    {
        if (objectInfo.ObjectNamespace.IndexOf(CurrentUnit.GenerationParams.BaseNamespace) != 0)
        {
            Errors.Append(objectInfo.ObjectName + ": object namespace (" + objectInfo.ObjectNamespace + ") must be under 'Base namespace' (" +
            CurrentUnit.GenerationParams.BaseNamespace + ")." + Environment.NewLine);
        }
        // duplicated object names
        if (objectNames.Contains(objectInfo.ObjectName))
        {
            Warnings.Append(objectInfo.ObjectName + ": object name is repeated." + Environment.NewLine);
        }
        else
        {
            objectNames.Add(objectInfo.ObjectName);
        }
        // duplicated filenames
        if (filenames.Contains(objectInfo.FileName))
        {
            Warnings.Append(objectInfo.ObjectName + ": object file name (" + objectInfo.FileName +
                            ") is repeated." + Environment.NewLine);
        }
        else
        {
            filenames.Add(objectInfo.FileName);
        }
        // duplicated criteria names
        foreach (Criteria criteria in objectInfo.CriteriaObjects)
        {
            if (!criteria.NestedClass && criteria.Properties.Count > 1)
            {
                if (criteriaNames.Contains(criteria.Name))
                {
                    Warnings.Append(objectInfo.ObjectName + ": criteria name (" + criteria.Name +
                            ") is repeated." + Environment.NewLine);
                }
                else
                {
                    criteriaNames.Add(criteria.Name);
                }
            }
        }
    }
}

if (Errors.Length > 0)
    return;
%>