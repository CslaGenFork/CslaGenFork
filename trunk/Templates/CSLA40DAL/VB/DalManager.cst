<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a static Database class." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the CSLA Object (just to get some project info)" %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>

<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>

//-----------------------------------------------------------------------
// <copyright file="DalManager<%= GetDalName(CurrentUnit) %>.cs" company="Marimer LLC">
//     Copyright (c) Marimer LLC. All rights reserved.
//     Website: http://www.lhotka.net/cslanet/
// </copyright>
//-----------------------------------------------------------------------

using System;
using System.Configuration;
using System.Data.SqlClient;
using Csla.Data;
<%
string utilNamespaceSuffix = string.Empty;
if (CurrentUnit.GenerationParams.UtilitiesNamespace != CurrentUnit.GenerationParams.BaseNamespace)
{
    utilNamespaceSuffix = CurrentUnit.GenerationParams.UtilitiesNamespace.Substring(CurrentUnit.GenerationParams.BaseNamespace.Length);
    %>
using <%= GetContextUtilitiesNamespace(CurrentUnit, GenerationStep.DalInterface) %>;
<%
}
%>

namespace <%= GetContextUtilitiesNamespace(CurrentUnit, GenerationStep.DalObject) %>
{
    /// <summary>
    /// Implements <see cref="IDalManager<%= GetDalName(CurrentUnit) %>"/> interface.
    /// </summary>
    /// <remarks>
    /// To use this DAL:<br/>
    /// 1) name this assembly <%= CurrentUnit.GenerationParams.DalObjectNamespace %><br/>
    /// 2) add the following line to the <strong>appSettings</strong>
    /// section of the application .config file: <br/>
    /// &lt;add key="<%= GetDalName(CurrentUnit) %>.DalManagerType" value="<%= CurrentUnit.GenerationParams.DalObjectNamespace %><%= utilNamespaceSuffix %>.DalManager<%= GetDalName(CurrentUnit) %>, <%= CurrentUnit.GenerationParams.DalObjectNamespace %>" /&gt;
    /// </remarks>
    public class DalManager<%= GetDalName(CurrentUnit) %> : IDalManager<%= GetDalName(CurrentUnit) %>
    {

        #region Fields and Properties

        private static readonly string TypeMask =
            typeof (DalManager<%= GetDalName(CurrentUnit) %>).FullName?.Replace("DalManager<%= GetDalName(CurrentUnit) %>", @"{0}");

        /// <summary>
        /// Gets the ADO ConnectionManager object.
        /// </summary>
        /// <value>The ConnectionManager object</value>
        public ConnectionManager<<%= ConnectionMethod %>> ConnectionManager { get; private set; }

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="DalManager<%= GetDalName(CurrentUnit) %>"/> class.
        /// </summary>
        public DalManager<%= GetDalName(CurrentUnit) %>()
        {
            try
            {
                ConnectionManager = ConnectionManager<<%= ConnectionMethod %>>.GetManager("<%= CurrentUnit.GenerationParams.DatabaseConnection %>");
            }
            catch (ConfigurationErrorsException)
            {
                if (ConnectionManager == null)
                    throw new ArgumentException(string.Format("ConnectionString {0} could not be found",
                        "<%= CurrentUnit.GenerationParams.DatabaseConnection %>"));
            }
        }

        #endregion

        #region IDalManager<%= GetDalName(CurrentUnit) %> Members

        /// <summary>
        /// Gets the <%= GetDalName(CurrentUnit) %> DAL provider for a given object Type.
        /// </summary>
        /// <typeparam name="T">Object Type that requires a <%= GetDalName(CurrentUnit) %> DAL provider.</typeparam>
        /// <returns>A new <%= GetDalName(CurrentUnit) %> DAL instance for the given Type.</returns>
        public T GetProvider<T>() where T : class
        {
            var typeName = string.Format(TypeMask, typeof(T).Name.Substring(1));
            var type = Type.GetType(typeName);
            if (type != null)
                return Activator.CreateInstance(type) as T;

            throw new NotImplementedException(typeName);
        }

        #endregion

        #region IDisposable Members

        /// <summary>
        /// Disposes the ConnectionManager.
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Releases unmanaged and - optionally - managed resources.
        /// </summary>
        /// <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing && ConnectionManager != null)
            {
                ConnectionManager.Dispose();
                ConnectionManager = null;
            }
        }

        #endregion

    }
}
