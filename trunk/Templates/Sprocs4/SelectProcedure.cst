<%@ CodeTemplate Inherits="SprocTemplateHelper" Language="C#" TargetLanguage="T-SQL" Description="Generates a Select stored procedure." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="Infos" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return infos to master.cst" %>

<%@ Assembly Name="DBSchemaInfo" %>
<%@ Import Namespace="DBSchemaInfo.Base" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Assembly Name="System.Data"%>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Assembly Name="System.Windows.Forms"%>
<%@ Import Namespace="System.Windows.Forms"%>

<%
foreach (CriteriaProperty parm in Criteria.Properties)
{
    if(parm.DbBindColumn.Column == null)
    {
        Errors.Append("Criteria Property " + Info.ObjectName + "." + Criteria.Name + "." + parm.Name + " is missing DB Bind Column." + Environment.NewLine);
        return;
    }
}
Init(Info);
int propCount = 0;
bool first = false;
bool collType = TypeHelper.IsCollectionType(Info.ObjectType);
bool isCollectionSearchWhereClause = collType;
CslaObjectInfo parentInfo = Info.Parent.CslaObjects.Find(Info.ParentType);
bool useThrowException = false;
if (parentInfo != null)
{
    if (!TypeHelper.IsCollectionType(parentInfo.ObjectType))
        useThrowException = CurrentUnit.GenerationParams.ReportObjectNotFound == ReportObjectNotFound.ThrowException;
}
else if (!collType && Info.IsNotNameValueList())
{
    useThrowException = CurrentUnit.GenerationParams.ReportObjectNotFound == ReportObjectNotFound.ThrowException;
}
List<IResultObject> tables = GetTablesSelect(Info);
SortTables(tables);
string plainTableSchema = GetSchema(tables[0], false);
string fullTableSchema = GetSchema(tables[0], true);
bool dontInnerJoinUp = IsChildSelfLoaded(Info) ||
    (Criteria.Properties.Count == 0 &&
    (Info.IsEditableRootCollection() ||
    Info.IsDynamicEditableRootCollection() ||
    Info.IsReadOnlyCollection()));
string fkMissingMessage = MissingForeignKeys(Criteria, Info, 1, dontInnerJoinUp);
if(fkMissingMessage != string.Empty)
{
    Errors.Append(Info.ObjectName + "." + Criteria.Name + ": missing Foreign Key on tables " + fkMissingMessage + Environment.NewLine);
    return;
}
%>
/****** Object:  StoredProcedure <%= fullTableSchema %>[<%= Criteria.GetOptions.ProcedureName %>] ******/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'<%= fullTableSchema %>[<%= Criteria.GetOptions.ProcedureName %>]') AND type in (N'P', N'PC'))
    DROP PROCEDURE <%= fullTableSchema %>[<%= Criteria.GetOptions.ProcedureName %>]
GO

CREATE PROCEDURE <%= fullTableSchema %>[<%= Criteria.GetOptions.ProcedureName %>]<%
first = true;
foreach (CriteriaProperty parm in Criteria.Properties)
{
    ValueProperty prop = GetValuePropertyByName(Info, parm.Name);
    if (prop != null)
    {
        if (IsStringType(prop.DbBindColumn.DataType))
            propCount++;
    }
    if (!first) { %>,<% } else { first = false; }
    %>
    @<%= parm.ParameterName %> <%= GetDataTypeString(parm) %><%= (collType && parm.Nullable) ? " = NULL" : "" %><%
}
%>
AS
    BEGIN

        SET NOCOUNT ON
    <%
if (useThrowException)
{
    %>

        /* Check for object existence */
        IF NOT EXISTS
        (
            SELECT <%
            first = true;
            if (!Info.ParentInsertOnly)
            {
                foreach (ValueProperty parentProp in Info.GetParentValueProperties())
                {
                    if (!parentProp.IsDatabaseBound || parentProp.DbBindColumn.Column == null)
                        continue;

                    if (first)
                        first = false;
                    else
                    {
                        %>, <%
                    }
                %>[<%= GetFKColumnForParentProperty(parentProp, tables[0]) %>]<%
                }
            }
            foreach (ValueProperty prop in Info.ValueProperties)
            {
                if (!prop.IsDatabaseBound || prop.DbBindColumn.Column == null)
                    continue;

                if (prop.PrimaryKey != ValueProperty.UserDefinedKeyBehaviour.Default)
                {
                if (first)
                    first = false;
                else
                {
                    %>, <%
                }
            %>[<%= GetColumnString(prop.DbBindColumn) %>]<%
                }
            }
            %> FROM <%= fullTableSchema %>[<%= tables[0].ObjectName %>]
            WHERE
                <%
            first = true;
            if (!Info.ParentInsertOnly)
            {
                foreach (ValueProperty parentProp in Info.GetParentValueProperties())
                {
                    if (!parentProp.IsDatabaseBound || parentProp.DbBindColumn.Column == null)
                        continue;

                    if (first)
                        first = false;
                    else
                    {
                        %> AND
                <%
                    }
            %>[<%= GetFKColumnForParentProperty(parentProp,tables[0]) %>] = @<%= TemplateHelper.GetFkParameterNameForParentProperty(Info, parentProp) %><%
                }
            }
            foreach (ValueProperty prop in Info.GetAllValueProperties())
            {
                if (!prop.IsDatabaseBound || prop.DbBindColumn.Column == null)
                    continue;

                if (prop.DbBindColumn.IsPrimaryKey)
                if (prop.PrimaryKey != ValueProperty.UserDefinedKeyBehaviour.Default)
                {
                    if (first)
                        first = false;
                    else
                    {
                        %> AND
                <%
                    }
            %>[<%= GetColumnString(prop.DbBindColumn) %>] = @<%= prop.ParameterName %><%
                }
            }
            if (UseBoolSoftDelete(tables, IgnoreFilter(Info)))
            {
                if (first)
                    first = false;
                else
                {
                    %> AND
                <%
                }
            %>[<%= Info.Parent.Params.SpBoolSoftDeleteColumn %>] = 'true'<%
            }
            else if (UseIntSoftDelete(tables, IgnoreFilter(Info)))
            {
                if (first)
                    first = false;
                else
                {
                    %> AND
                <%
                }
            %>[<%= Info.Parent.Params.SpIntSoftDeleteColumn %>] > 0<%
            }
            else if (IgnoreFilter(Info) && (string.IsNullOrEmpty(Info.Parent.Params.SpBoolSoftDeleteColumn) ||
                string.IsNullOrEmpty(Info.Parent.Params.SpIntSoftDeleteColumn)))
            {
                    %>
            /* Ignore filter option is on */<%
            }
            %>
        )
        BEGIN
            RAISERROR ('''<%= plainTableSchema %><%= Info.ObjectName %>'' object not found. It was probably removed by another user.', 16, 1)
            RETURN
        END
        <%
}
else if (collType && propCount > 0)
{
    %>

        /* Search Variables */
    <%
    first = true;
    foreach (Property parm in Criteria.Properties)
    {
        ValueProperty prop = GetValuePropertyByName(Info, parm.Name);
        if (prop != null)
        {
            if (IsStringType(prop.DbBindColumn.DataType))
            {
                if (prop.DbBindColumn.DataType.ToString() == "StringFixedLength")
                {
                    %>
        IF (@<%= parm.Name %> <> '')
            SET @<%= parm.Name %> = RTRIM(@<%= parm.Name %>) + '%'
        ELSE
            SET @<%= parm.Name %> = '%'
<%
                }
                else
                {
                    %>
        IF (@<%= parm.Name %> <> '')
            SET @<%= parm.Name %> = @<%= parm.Name %> + '%'
        ELSE
            SET @<%= parm.Name %> = '%'
<%
                }
            }
        }
    }
}

//Root Objects
string getSelect = GetSelect(Info, Criteria, false, isCollectionSearchWhereClause, 0, dontInnerJoinUp);
if (!string.IsNullOrEmpty(getSelect))
{
    %><%= getSelect %>
<%
}
//Child Objects
string getChildSelect = GetChildSelects(Info, Criteria, isCollectionSearchWhereClause, 1, dontInnerJoinUp);
if (!string.IsNullOrEmpty(getChildSelect))
{
    %><%= getChildSelect %>
<%
}
if (string.IsNullOrEmpty(getSelect) && string.IsNullOrEmpty(getChildSelect))
{
    Response.Write(Environment.NewLine);
}
%>

    END
GO
