<%@ CodeTemplate Inherits="CslaTemplateHelperCS" Language="CSharp" TargetLanguage="CSharp" Description="Generates a CSLA ReadOnly Collection." %>
<%@ Property Name="Info" Type="CslaObjectInfo" Optional="false" Category="Business Object" Description="Definition of the ReadOnlyCollection Object to create." %>
<%@ Property Name="Errors" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return errors to master.cst" %>
<%@ Property Name="Warnings" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return warnings to master.cst" %>
<%@ Property Name="Infos" Type="System.Text.StringBuilder" Optional="false" Category="Options" Description="Allows the template to return infos to master.cst" %>
<%@ Property Name="MethodList" Type="System.Collections.Generic.List<AdvancedGenerator.ServiceMethod>" Optional="false" Category="Options" Description="Allows the template to return a list a partial methods to master.cst (for Silverlight using services)" %>
<%@ Property Name="InlineQueryList" Type="System.Collections.Generic.List<AdvancedGenerator.InlineQuery>" Optional="false" Category="Options" Description="Allows the template to return a list a inline queries to master.cst" %>

<%@ Assembly Name="DBSchemaInfo" %>
<%@ Import Namespace="DBSchemaInfo.Base" %>
<%@ Assembly Name="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator" %>
<%@ Import Namespace="CslaGenerator.Metadata" %>
<%@ Import Namespace="CslaGenerator.CodeGen" %>
<%@ Import Namespace="CslaGenerator.Util" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Reflection" %>

<!-- #include file="ObjectValidate.asp" -->
<!-- #include file="ReadOnlyCollection_Validate.asp" -->
<%
if (Errors.Length == 0)
{
    string lastCriteria = "";
    bool useInlineQuery = false;
    bool isItem = false;
    bool isParentRootCollection = false;
    bool useIsLoadedProperty = false;
    CslaObjectInfo grandParentInfo = null;
    if (parentInfo != null)
    {
        grandParentInfo = Info.Parent.CslaObjects.Find(parentInfo.ParentType);
        isParentRootCollection = (parentInfo.IsEditableRootCollection()) ||
            (parentInfo.IsReadOnlyCollection() && parentInfo.ParentType == String.Empty);
    }
    bool isCollection = true;
    string bpcSpacer = String.Empty;
    bool ancestorIsCollection = false;
    int ancestorLoaderLevel = AncestorLoaderLevel(Info, out ancestorIsCollection);
    int silverlightLevel = 0;
    bool genOptional = false;
    bool first = true;
    bool? firstComment = null;
    %><!-- #include file="Header.asp" -->
<%= GetUsingStatementsStringBusiness(Info, CurrentUnit) %>
namespace <%= GetContextObjectNamespace(Info, CurrentUnit, GenerationStep.Business) %>
{
<%
    %><!-- #include file="XmlComment.asp" -->
    <%
    if (GetAttributesString(Info.Attributes) != string.Empty)
    {
        %>
    <%= GetAttributesString(Info.Attributes) %>
    <%
    }
    %>
    [Serializable]
<%
    if (CurrentUnit.GenerationParams.DualListInheritance)
    {
        %>#if WINFORMS
    <%= CurrentUnit.GenerationParams.DualListInheritance ? "" : "    " %><%
        if (Info.InheritedTypeWinForms.FinalName != string.Empty)
        {
            %><%= GetClassDeclarationInheritedTypeWinForms(Info) + GetInterfaceDeclaration(Info) %>
<%
        }
        else
        {
            %><%= GetClassDeclaration(Info, true) + GetInterfaceDeclaration(Info) %>
<%
        }
        %>#else
    <%
    }
    %><%= CurrentUnit.GenerationParams.DualListInheritance ? "" : "    " %><%
    if (Info.InheritedType.FinalName != string.Empty)
    {
        %><%= GetClassDeclarationInheritedType(Info) + GetInterfaceDeclaration(Info) %>
<%
    }
    else
    {
        bool isBindingList = CurrentUnit.GenerationParams.GenerateWinForms && !CurrentUnit.GenerationParams.DualListInheritance;
        %><%= GetClassDeclaration(Info, isBindingList) + GetInterfaceDeclaration(Info) %>
<%
    }
    if (CurrentUnit.GenerationParams.DualListInheritance)
    {
        %>#endif
    <%
    }
    %><%= CurrentUnit.GenerationParams.DualListInheritance ? "" : "    " %>{
<!-- #include file="EventProps.asp" -->
<!-- #include file="CollectionBusinessMethods.asp" -->
<!-- #include file="FindMethods.asp" -->
<%
    if (Info.SimpleCacheOptions != SimpleCacheResults.None)
    {
        %>
<!-- #include file="SimpleCacheFactory.asp" -->
<%
        Response.Write(Environment.NewLine);
    }
    if (Info.GenerateFactoryMethods && (UseChildFactoryHelper || Info.ParentType == string.Empty))
    {
        if (CurrentUnit.GenerationParams.TargetIsCsla40)
        {
            %>
<!-- #include file="ReadOnlyCollection_Factory.asp" -->
<%
        }
        else
        {
            %>
<!-- #include file="ReadOnlyCollection_Factory-45.asp" -->
<%
        }
        Response.Write(Environment.NewLine);
    }
    %>
<!-- #include file="Constructor.asp" -->
<!-- #include file="Criteria.asp" -->
<!-- #include file="ObjectAuthorizationMethods.asp" -->
<!-- #include file="SavedHandler.asp" -->
<%
    if (Info.GenerateDataAccessRegion)
    {
        if (!genOptional)
        {
            Response.Write(Environment.NewLine);
        }
        if (!Info.UseCustomLoading)
        {
            %>
<!-- #include file="ReadOnlyCollection_DataPortal.asp" -->
<%
            Response.Write(Environment.NewLine);
        }
        %>
<!-- #include file="InlineQueriesFieldsAndPartials.asp" -->
<!-- #include file="DataPortalHooks.asp" -->
<!-- #include file="SavedManager.asp" -->

<%
    }
    else
    {
        Response.Write(Environment.NewLine);
    }
    %>
    }
<!-- #include file="CriteriaObject.asp" -->
}
<%
}
%>
