<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="projectParametersBindingSource.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>189, 17</value>
  </metadata>
  <data name="chkAutoCriteria.ToolTip" xml:space="preserve">
    <value>If checked,
- ReadOnly collections and Name Value lists are created with a parameterless Get Criteria;
- EditableRoot and DynamicEditableRoot collections are created with a parameterless Create and Get Criteria.</value>
  </data>
  <data name="cboTransactionType.ToolTip" xml:space="preserve">
    <value>Select the transaction model to be used by the DataPortal.
Since version 4.0.0 TransactionalAttribute is deprecated in favour of TransactionScope.
References to TransactionalAttribute are automatically converted to TransactionScope.</value>
  </data>
  <data name="cboPersistenceType.ToolTip" xml:space="preserve">
    <value>Select the type of persistence to be used by the DataPortal:
- SqlConnectionManager for SQL Server, using ConnectionManager/TransactionManager
- SqlConnectionUnshared for SQL Server, using classic SqlConnection object (no transactions available)
- LinqContext for LINQ to SQL
- EFContext for Entity Framework object</value>
  </data>
  <data name="chkRemoveChildBeforeParent.ToolTip" xml:space="preserve">
    <value>If checked, the Stored Procedure will delete (or soft delete) all child rows
before deleting (or soft deleting) the parent row.

RC - Not implemented.
If unchecked, the database child removal must be handle by an override to RemoveItem.</value>
  </data>
  <metadata name="generationParametersBindingSource.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>412, 17</value>
  </metadata>
  <data name="txtUtilitiesNamespace.ToolTip" xml:space="preserve">
    <value>Specify the namespace where the &lt;Database&gt;, &lt;DataPortalHookArgs&gt; and DAL support files will be created.
When separating namespaces in folders, this namespace will be used as the folder for utility files.</value>
  </data>
  <data name="txtUtilitiesFolder.ToolTip" xml:space="preserve">
    <value>Specify the folder where the &lt;Database&gt; and &lt;DataPortalHookArgs&gt;  and DAL support files will be created.
This is relative to the project's output folder and is used only when namespaces are not separated in folders.</value>
  </data>
  <data name="txtDalName.ToolTip" xml:space="preserve">
    <value>Specify the DAL name to be used by this project. If possible, use the Database Connection name.
If there are several business assemblies using the same database connection,
use a different DAL name per each business assembly.
</value>
  </data>
  <data name="cboObjectNotFound.ToolTip" xml:space="preserve">
    <value>Define how to report that a non-item object wasn't found on the DB:
* IsLoadedProperty - use a generated "IsLoaded" state property;
* ThrowException - the generated stored procedure raises an exception.</value>
  </data>
  <data name="cboGenerateAuthorization.ToolTip" xml:space="preserve">
    <value>Authorization level to generate. Use "None" for no implementation at all.
In Csla Object Info panel and in all value properties panels,
the authz options will be shown or hidden according to this setting.

N.B. - "Custom" shows all authz options because it generates
Authorization code only for objects with at least one authz option filled.
Authorization code is generated as follows:
-  "Can-" methods are generated on the ".Designer" file.
- "AddObjectAuthorizationRules()" method is generated on the extended file.
- until Rules 4 are implemented "AddBusinessRules()" method isn't generated.
  So it's up to you to write this method on the extended file.</value>
  </data>
  <data name="chkForceReadOnlyProperties.ToolTip" xml:space="preserve">
    <value>If checked, all ReadOnlyObject's properties are generated as ReadOnly, regardless of each property setting.
Otherwise allows all kinds of accessibility for ReadOnlyObject's properties.

Note - ReadOnlyObject's managed and unmanaged properties are always ReadOnly properties.</value>
  </data>
  <metadata name="generationDbProviderCollectionBindingSource.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>650, 17</value>
  </metadata>
  <metadata name="ofdLoad.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>100, 17</value>
  </metadata>
</root>